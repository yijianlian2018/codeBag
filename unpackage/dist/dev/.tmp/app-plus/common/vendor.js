(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\n                    * Create a cached version of a pure function.\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\n   * Camelize a hyphen-delimited string.\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name);\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\n                                              *[\n                                              *    ['data.items', 'data.id', item.data.id],\n                                              *    ['metas', 'id', meta.id]\n                                              *],\n                                              *[\n                                              *    ['data.items', 'data.id', item.data.id],\n                                              *    ['metas', 'id', meta.id]\n                                              *],\n                                              *'test'\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var componentOptions = {\n    options: {\n      multipleSlots: true,\n      addGlobalClass: true },\n\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.0.1\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"Store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  if (typeof state === 'function') {\n    state = state() || {};\n  }\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  if (Vue.config.devtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  if (true) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });\n\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  return genericSubscribe(fn, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.0.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 123:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 124);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDhCQUFxQiIsImZpbGUiOiIxMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///123\n");

/***/ }),

/***/ 124:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 125);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG9CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIxMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xufSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///124\n");

/***/ }),

/***/ 125:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///125\n");

/***/ }),

/***/ 13:
/*!********************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/common/util.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _citydata = __webpack_require__(/*! ./citydata */ 15);\nvar _config = _interopRequireDefault(__webpack_require__(/*! ./config */ 16));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n// API\nvar getLocationUrl = function getLocationUrl(latitude, longitude) {return \"https://apis.map.qq.com/ws/geocoder/v1/?location=\".concat(latitude, \",\").concat(longitude, \"&key=\").concat(_config.default.key);};\nvar getCountyListUrl = function getCountyListUrl(code) {return \"https://apis.map.qq.com/ws/district/v1/getchildren?&id=\".concat(code, \"&key=\").concat(_config.default.key);};\nvar getIndexUrl = function getIndexUrl() {return '../index/index';};\n\n/**\n                                                                      * 安全地在深层嵌套对象中取值\n                                                                      * get deeply nested data from an object safely, return null if not found\n                                                                      * @param {Array} keyList an Array of keys\n                                                                      * @param {Object} obj \n                                                                      */\nvar safeGet = function safeGet(keyList, obj) {return keyList.reduce(function (preValue, curKey) {return preValue && preValue[curKey] ? preValue[curKey] : null;}, obj);};\n\nvar isNotEmpty = function isNotEmpty(array) {return Array.isArray(array) && array.length > 0;};\n\nvar isChinese = function isChinese(str) {return /^[\\u4e00-\\u9fa5]+$/.test(str);};\n\n// 城市名按首字母分组\nvar getCityListSortedByInitialLetter = function getCityListSortedByInitialLetter() {return (\n    _citydata.LETTERS.map(\n    function (letter) {return {\n        initial: letter,\n        cityInfo: _citydata.CITY_LIST.filter(function (city) {return city.initial == letter;}) };}));};\n\n\n\n\nvar getSlicedName = function getSlicedName(cityObj, key, sliceLen) {return cityObj[key] && cityObj[key].slice(0, sliceLen);};\n\nvar onFail = function onFail(err) {console.log(__f__(err, \" at common/util.js:33\"));}; // add your logic here e.g. show a toast\n\nvar formatTime = function formatTime(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  var hour = date.getHours();\n  var minute = date.getMinutes();\n  var second = date.getSeconds();\n\n  return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':');\n};\n\nvar formatNumber = function formatNumber(n) {\n  n = n.toString();\n  return n[1] ? n : '0' + n;\n};var _default =\n{\n  formatTime: formatTime,\n  getLocationUrl: getLocationUrl,\n  getCountyListUrl: getCountyListUrl,\n  getIndexUrl: getIndexUrl,\n  safeGet: safeGet,\n  isNotEmpty: isNotEmpty,\n  isChinese: isChinese,\n  getCityListSortedByInitialLetter: getCityListSortedByInitialLetter,\n  getSlicedName: getSlicedName,\n  onFail: onFail };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 14)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL3V0aWwuanMiXSwibmFtZXMiOlsiZ2V0TG9jYXRpb25VcmwiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImNvbmZpZyIsImtleSIsImdldENvdW50eUxpc3RVcmwiLCJjb2RlIiwiZ2V0SW5kZXhVcmwiLCJzYWZlR2V0Iiwia2V5TGlzdCIsIm9iaiIsInJlZHVjZSIsInByZVZhbHVlIiwiY3VyS2V5IiwiaXNOb3RFbXB0eSIsImFycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiaXNDaGluZXNlIiwic3RyIiwidGVzdCIsImdldENpdHlMaXN0U29ydGVkQnlJbml0aWFsTGV0dGVyIiwiTEVUVEVSUyIsIm1hcCIsImxldHRlciIsImluaXRpYWwiLCJjaXR5SW5mbyIsIkNJVFlfTElTVCIsImZpbHRlciIsImNpdHkiLCJnZXRTbGljZWROYW1lIiwiY2l0eU9iaiIsInNsaWNlTGVuIiwic2xpY2UiLCJvbkZhaWwiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiZm9ybWF0VGltZSIsImRhdGUiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsImdldE1vbnRoIiwiZGF5IiwiZ2V0RGF0ZSIsImhvdXIiLCJnZXRIb3VycyIsIm1pbnV0ZSIsImdldE1pbnV0ZXMiLCJzZWNvbmQiLCJnZXRTZWNvbmRzIiwiZm9ybWF0TnVtYmVyIiwiam9pbiIsIm4iLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Im9JQUFBO0FBQ0EsOEU7O0FBRUE7QUFDQSxJQUFNQSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUNDLFFBQUQsRUFBV0MsU0FBWCxxRUFBOEVELFFBQTlFLGNBQTBGQyxTQUExRixrQkFBMkdDLGdCQUFPQyxHQUFsSCxHQUF2QjtBQUNBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQUMsSUFBSSwyRUFBK0RBLElBQS9ELGtCQUEyRUgsZ0JBQU9DLEdBQWxGLEdBQTdCO0FBQ0EsSUFBTUcsV0FBVyxHQUFHLFNBQWRBLFdBQWMsV0FBTyxnQkFBUCxFQUFwQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsT0FBRCxFQUFVQyxHQUFWLFVBQWtCRCxPQUFPLENBQUNFLE1BQVIsQ0FBZSxVQUFDQyxRQUFELEVBQVdDLE1BQVgsVUFBd0JELFFBQVEsSUFBSUEsUUFBUSxDQUFDQyxNQUFELENBQXJCLEdBQWlDRCxRQUFRLENBQUNDLE1BQUQsQ0FBekMsR0FBb0QsSUFBM0UsRUFBZixFQUFpR0gsR0FBakcsQ0FBbEIsRUFBaEI7O0FBRUEsSUFBTUksVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQUMsS0FBSyxVQUFLQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsS0FBZCxLQUF3QkEsS0FBSyxDQUFDRyxNQUFOLEdBQWUsQ0FBNUMsRUFBeEI7O0FBRUEsSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBQUMsR0FBRyxVQUFLLHFCQUFxQkMsSUFBckIsQ0FBMEJELEdBQTFCLENBQUwsRUFBckI7O0FBRUE7QUFDQSxJQUFNRSxnQ0FBZ0MsR0FBRyxTQUFuQ0EsZ0NBQW1DO0FBQ3ZDQyxzQkFBUUMsR0FBUjtBQUNFLGNBQUFDLE1BQU0sVUFBSztBQUNUQyxlQUFPLEVBQUVELE1BREE7QUFFVEUsZ0JBQVEsRUFBRUMsb0JBQVVDLE1BQVYsQ0FBaUIsVUFBQUMsSUFBSSxVQUFJQSxJQUFJLENBQUNKLE9BQUwsSUFBZ0JELE1BQXBCLEVBQXJCLENBRkQsRUFBTCxFQURSLENBRHVDLEdBQXpDOzs7OztBQVNBLElBQU1NLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsT0FBRCxFQUFVNUIsR0FBVixFQUFlNkIsUUFBZixVQUE2QkQsT0FBTyxDQUFDNUIsR0FBRCxDQUFQLElBQWdCNEIsT0FBTyxDQUFDNUIsR0FBRCxDQUFQLENBQWE4QixLQUFiLENBQW1CLENBQW5CLEVBQXNCRCxRQUF0QixDQUE3QyxFQUF0Qjs7QUFFQSxJQUFNRSxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFDQyxHQUFELEVBQVMsQ0FBRUMsT0FBTyxDQUFDQyxHQUFSLE9BQVlGLEdBQVosNEJBQWtCLENBQTVDLEMsQ0FBNkM7O0FBRTdDLElBQU1HLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUFDLElBQUksRUFBSTtBQUN6QixNQUFNQyxJQUFJLEdBQUdELElBQUksQ0FBQ0UsV0FBTCxFQUFiO0FBQ0EsTUFBTUMsS0FBSyxHQUFHSCxJQUFJLENBQUNJLFFBQUwsS0FBa0IsQ0FBaEM7QUFDQSxNQUFNQyxHQUFHLEdBQUdMLElBQUksQ0FBQ00sT0FBTCxFQUFaO0FBQ0EsTUFBTUMsSUFBSSxHQUFHUCxJQUFJLENBQUNRLFFBQUwsRUFBYjtBQUNBLE1BQU1DLE1BQU0sR0FBR1QsSUFBSSxDQUFDVSxVQUFMLEVBQWY7QUFDQSxNQUFNQyxNQUFNLEdBQUdYLElBQUksQ0FBQ1ksVUFBTCxFQUFmOztBQUVBLFNBQU8sQ0FBQ1gsSUFBRCxFQUFPRSxLQUFQLEVBQWNFLEdBQWQsRUFBbUJyQixHQUFuQixDQUF1QjZCLFlBQXZCLEVBQXFDQyxJQUFyQyxDQUEwQyxHQUExQyxJQUFpRCxHQUFqRCxHQUF1RCxDQUFDUCxJQUFELEVBQU9FLE1BQVAsRUFBZUUsTUFBZixFQUF1QjNCLEdBQXZCLENBQTJCNkIsWUFBM0IsRUFBeUNDLElBQXpDLENBQThDLEdBQTlDLENBQTlEO0FBQ0QsQ0FURDs7QUFXQSxJQUFNRCxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFBRSxDQUFDLEVBQUk7QUFDeEJBLEdBQUMsR0FBR0EsQ0FBQyxDQUFDQyxRQUFGLEVBQUo7QUFDQSxTQUFPRCxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9BLENBQVAsR0FBVyxNQUFNQSxDQUF4QjtBQUNELENBSEQsQztBQUllO0FBQ2JoQixZQUFVLEVBQVZBLFVBRGE7QUFFYnZDLGdCQUFjLEVBQWRBLGNBRmE7QUFHYkssa0JBQWdCLEVBQWhCQSxnQkFIYTtBQUliRSxhQUFXLEVBQVhBLFdBSmE7QUFLYkMsU0FBTyxFQUFQQSxPQUxhO0FBTWJNLFlBQVUsRUFBVkEsVUFOYTtBQU9iSyxXQUFTLEVBQVRBLFNBUGE7QUFRYkcsa0NBQWdDLEVBQWhDQSxnQ0FSYTtBQVNiUyxlQUFhLEVBQWJBLGFBVGE7QUFVYkksUUFBTSxFQUFOQSxNQVZhLEUiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMRVRURVJTLCBDSVRZX0xJU1QgfSBmcm9tICcuL2NpdHlkYXRhJ1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZydcblxuLy8gQVBJXG5jb25zdCBnZXRMb2NhdGlvblVybCA9IChsYXRpdHVkZSwgbG9uZ2l0dWRlKSA9PiAoYGh0dHBzOi8vYXBpcy5tYXAucXEuY29tL3dzL2dlb2NvZGVyL3YxLz9sb2NhdGlvbj0ke2xhdGl0dWRlfSwke2xvbmdpdHVkZX0ma2V5PSR7Y29uZmlnLmtleX1gKVxuY29uc3QgZ2V0Q291bnR5TGlzdFVybCA9IGNvZGUgPT4gKGBodHRwczovL2FwaXMubWFwLnFxLmNvbS93cy9kaXN0cmljdC92MS9nZXRjaGlsZHJlbj8maWQ9JHtjb2RlfSZrZXk9JHtjb25maWcua2V5fWApXG5jb25zdCBnZXRJbmRleFVybCA9ICgpID0+ICgnLi4vaW5kZXgvaW5kZXgnKVxuXG4vKipcbiAqIOWuieWFqOWcsOWcqOa3seWxguW1jOWll+WvueixoeS4reWPluWAvFxuICogZ2V0IGRlZXBseSBuZXN0ZWQgZGF0YSBmcm9tIGFuIG9iamVjdCBzYWZlbHksIHJldHVybiBudWxsIGlmIG5vdCBmb3VuZFxuICogQHBhcmFtIHtBcnJheX0ga2V5TGlzdCBhbiBBcnJheSBvZiBrZXlzXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFxuICovXG5jb25zdCBzYWZlR2V0ID0gKGtleUxpc3QsIG9iaikgPT4ga2V5TGlzdC5yZWR1Y2UoKHByZVZhbHVlLCBjdXJLZXkpID0+ICgocHJlVmFsdWUgJiYgcHJlVmFsdWVbY3VyS2V5XSkgPyBwcmVWYWx1ZVtjdXJLZXldIDogbnVsbCksIG9iailcblxuY29uc3QgaXNOb3RFbXB0eSA9IGFycmF5ID0+IChBcnJheS5pc0FycmF5KGFycmF5KSAmJiBhcnJheS5sZW5ndGggPiAwKVxuXG5jb25zdCBpc0NoaW5lc2UgPSBzdHIgPT4gKC9eW1xcdTRlMDAtXFx1OWZhNV0rJC8udGVzdChzdHIpKVxuXG4vLyDln47luILlkI3mjInpppblrZfmr43liIbnu4RcbmNvbnN0IGdldENpdHlMaXN0U29ydGVkQnlJbml0aWFsTGV0dGVyID0gKCkgPT4gKFxuICBMRVRURVJTLm1hcChcbiAgICBsZXR0ZXIgPT4gKHtcbiAgICAgIGluaXRpYWw6IGxldHRlcixcbiAgICAgIGNpdHlJbmZvOiBDSVRZX0xJU1QuZmlsdGVyKGNpdHkgPT4gY2l0eS5pbml0aWFsID09IGxldHRlcilcbiAgICB9KVxuICApXG4pXG5cbmNvbnN0IGdldFNsaWNlZE5hbWUgPSAoY2l0eU9iaiwga2V5LCBzbGljZUxlbikgPT4gKGNpdHlPYmpba2V5XSAmJiBjaXR5T2JqW2tleV0uc2xpY2UoMCwgc2xpY2VMZW4pKVxuXG5jb25zdCBvbkZhaWwgPSAoZXJyKSA9PiB7IGNvbnNvbGUubG9nKGVycikgfSAvLyBhZGQgeW91ciBsb2dpYyBoZXJlIGUuZy4gc2hvdyBhIHRvYXN0XG5cbmNvbnN0IGZvcm1hdFRpbWUgPSBkYXRlID0+IHtcbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKVxuICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDFcbiAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKClcbiAgY29uc3QgaG91ciA9IGRhdGUuZ2V0SG91cnMoKVxuICBjb25zdCBtaW51dGUgPSBkYXRlLmdldE1pbnV0ZXMoKVxuICBjb25zdCBzZWNvbmQgPSBkYXRlLmdldFNlY29uZHMoKVxuXG4gIHJldHVybiBbeWVhciwgbW9udGgsIGRheV0ubWFwKGZvcm1hdE51bWJlcikuam9pbignLycpICsgJyAnICsgW2hvdXIsIG1pbnV0ZSwgc2Vjb25kXS5tYXAoZm9ybWF0TnVtYmVyKS5qb2luKCc6Jylcbn1cblxuY29uc3QgZm9ybWF0TnVtYmVyID0gbiA9PiB7XG4gIG4gPSBuLnRvU3RyaW5nKClcbiAgcmV0dXJuIG5bMV0gPyBuIDogJzAnICsgblxufVxuZXhwb3J0IGRlZmF1bHQge1xuICBmb3JtYXRUaW1lLFxuICBnZXRMb2NhdGlvblVybCxcbiAgZ2V0Q291bnR5TGlzdFVybCxcbiAgZ2V0SW5kZXhVcmwsXG4gIHNhZmVHZXQsXG4gIGlzTm90RW1wdHksXG4gIGlzQ2hpbmVzZSxcbiAgZ2V0Q2l0eUxpc3RTb3J0ZWRCeUluaXRpYWxMZXR0ZXIsXG4gIGdldFNsaWNlZE5hbWUsXG4gIG9uRmFpbCxcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 14:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n    return v;\n  });\n  var msg = '';\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJhcmdzIiwibXNncyIsIm1hcCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJwb3AiLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQU1DLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVY7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFYyxTQUFTQyxTQUFULEdBQTZCLG1DQUFOQyxJQUFNLG9EQUFOQSxJQUFNO0FBQzFDLE1BQU1DLElBQUksR0FBR0QsSUFBSSxDQUFDRSxHQUFMLENBQVMsVUFBQ1gsQ0FBRCxFQUFPO0FBQzNCLFFBQU1ZLElBQUksR0FBR1YsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQWI7QUFDQSxRQUFJWSxJQUFJLENBQUNDLFdBQUwsT0FBdUIsaUJBQTNCLEVBQThDO0FBQzVDLFVBQUk7QUFDRmIsU0FBQyxHQUFHLHFCQUFxQmMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLENBQWYsQ0FBckIsR0FBeUMsZ0JBQTdDO0FBQ0QsT0FGRCxDQUVFLE9BQU9nQixDQUFQLEVBQVU7QUFDVmhCLFNBQUMsR0FBRyxpQkFBSjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsVUFBSUEsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZEEsU0FBQyxHQUFHLFlBQUo7QUFDRCxPQUZELE1BRU8sSUFBSUEsQ0FBQyxLQUFLaUIsU0FBVixFQUFxQjtBQUMxQmpCLFNBQUMsR0FBRyxpQkFBSjtBQUNELE9BRk0sTUFFQTtBQUNMLFlBQU1rQixLQUFLLEdBQUduQixLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTbUIsV0FBVCxFQUFkO0FBQ0EsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3Q2xCLFdBQUMsR0FBRyxjQUFja0IsS0FBZCxHQUFzQixLQUF0QixHQUE4QmxCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDa0IsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTGxCLFdBQUMsR0FBR29CLE1BQU0sQ0FBQ3BCLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFdBQU9BLENBQVA7QUFDRCxHQXZCWSxDQUFiO0FBd0JBLE1BQUlxQixHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlYLElBQUksQ0FBQ0gsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQU1lLE9BQU8sR0FBR1osSUFBSSxDQUFDYSxHQUFMLEVBQWhCO0FBQ0FGLE9BQUcsR0FBR1gsSUFBSSxDQUFDYyxJQUFMLENBQVUsYUFBVixDQUFOO0FBQ0EsUUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSixTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMRCxPQUFHLEdBQUdYLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDtBQUNELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XG4gIGNvbnN0IHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcbiAgcmV0dXJuIHMuc3Vic3RyaW5nKDgsIHMubGVuZ3RoIC0gMSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9nICguLi5hcmdzKSB7XG4gIGNvbnN0IG1zZ3MgPSBhcmdzLm1hcCgodikgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdiA9ICctLS1CRUdJTjpKU09OLS0tJyArIEpTT04uc3RyaW5naWZ5KHYpICsgJy0tLUVORDpKU09OLS0tJ1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2ID0gJ1tvYmplY3Qgb2JqZWN0XSdcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHYgPT09IG51bGwpIHtcbiAgICAgICAgdiA9ICctLS1OVUxMLS0tJ1xuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdiA9ICctLS1VTkRFRklORUQtLS0nXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB2VHlwZSA9IHR5cG9mKHYpLnRvVXBwZXJDYXNlKClcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2XG4gIH0pXG4gIGxldCBtc2cgPSAnJ1xuICBpZiAobXNncy5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgbGFzdE1zZyA9IG1zZ3MucG9wKClcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcbiAgICBpZiAobGFzdE1zZy5pbmRleE9mKCcgYXQgJykgPT09IDApIHtcbiAgICAgIG1zZyArPSBsYXN0TXNnXG4gICAgfSBlbHNlIHtcbiAgICAgIG1zZyArPSAnLS0tQ09NTUEtLS0nICsgbGFzdE1zZ1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBtc2dzWzBdXG4gIH1cbiAgcmV0dXJuIG1zZ1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),

/***/ 15:
/*!************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/common/citydata.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.CITY_NOT_FOUND = exports.HOT_CITY_LIST = exports.CITY_LIST = exports.LETTERS = void 0; //城市检索的首字母\nvar LETTERS = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"W\", \"X\", \"Y\", \"Z\"];\n// 城市信息\nexports.LETTERS = LETTERS;var CITY_LIST = [{ \"id\": \"35\", \"provincecode\": \"150000\", \"city\": \"阿拉善盟\", \"code\": \"152900\", \"initial\": \"A\", \"short\": \"Alashanmeng\" }, { \"id\": \"38\", \"provincecode\": \"210000\", \"city\": \"鞍山市\", \"code\": \"210300\", \"initial\": \"A\", \"short\": \"Anshan\" }, { \"id\": \"105\", \"provincecode\": \"340000\", \"city\": \"安庆市\", \"code\": \"340800\", \"initial\": \"A\", \"short\": \"Anqing\" }, { \"id\": \"156\", \"provincecode\": \"410000\", \"city\": \"安阳市\", \"code\": \"410500\", \"initial\": \"A\", \"short\": \"Anyang\" }, { \"id\": \"256\", \"provincecode\": \"510000\", \"city\": \"阿坝藏族羌族自治州\", \"code\": \"513200\", \"initial\": \"A\", \"short\": \"Aba\" }, { \"id\": \"262\", \"provincecode\": \"520000\", \"city\": \"安顺市\", \"code\": \"520400\", \"initial\": \"A\", \"short\": \"Anshun\" }, { \"id\": \"289\", \"provincecode\": \"540000\", \"city\": \"阿里地区\", \"code\": \"542500\", \"initial\": \"A\", \"short\": \"Ali\" }, { \"id\": \"299\", \"provincecode\": \"610000\", \"city\": \"安康市\", \"code\": \"610900\", \"initial\": \"A\", \"short\": \"Ankang\" }, { \"id\": \"335\", \"provincecode\": \"650000\", \"city\": \"阿克苏地区\", \"code\": \"652900\", \"initial\": \"A\", \"short\": \"Akesu\" }, { \"id\": \"341\", \"provincecode\": \"650000\", \"city\": \"阿勒泰地区\", \"code\": \"654300\", \"initial\": \"A\", \"short\": \"Aletai\" }, { \"id\": \"1\", \"provincecode\": \"110000\", \"city\": \"北京市\", \"code\": \"110000\", \"initial\": \"B\", \"short\": \"Beijing\" }, { \"id\": \"7\", \"provincecode\": \"130000\", \"city\": \"保定市\", \"code\": \"130600\", \"initial\": \"B\", \"short\": \"Baoding\" }, { \"id\": \"25\", \"provincecode\": \"150000\", \"city\": \"包头市\", \"code\": \"150200\", \"initial\": \"B\", \"short\": \"Baotou\" }, { \"id\": \"31\", \"provincecode\": \"150000\", \"city\": \"巴彦淖尔市\", \"code\": \"150800\", \"initial\": \"B\", \"short\": \"Bayannaoer\" }, { \"id\": \"40\", \"provincecode\": \"210000\", \"city\": \"本溪市\", \"code\": \"210500\", \"initial\": \"B\", \"short\": \"Benxi\" }, { \"id\": \"55\", \"provincecode\": \"220000\", \"city\": \"白山市\", \"code\": \"220600\", \"initial\": \"B\", \"short\": \"Baishan\" }, { \"id\": \"57\", \"provincecode\": \"220000\", \"city\": \"白城市\", \"code\": \"220800\", \"initial\": \"B\", \"short\": \"Baicheng\" }, { \"id\": \"100\", \"provincecode\": \"340000\", \"city\": \"蚌埠市\", \"code\": \"340300\", \"initial\": \"B\", \"short\": \"Bangbu\" }, { \"id\": \"150\", \"provincecode\": \"370000\", \"city\": \"滨州市\", \"code\": \"371600\", \"initial\": \"B\", \"short\": \"Binzhou\" }, { \"id\": \"222\", \"provincecode\": \"450000\", \"city\": \"北海市\", \"code\": \"450500\", \"initial\": \"B\", \"short\": \"Beihai\" }, { \"id\": \"227\", \"provincecode\": \"450000\", \"city\": \"百色市\", \"code\": \"451000\", \"initial\": \"B\", \"short\": \"Baise\" }, { \"id\": \"254\", \"provincecode\": \"510000\", \"city\": \"巴中市\", \"code\": \"511900\", \"initial\": \"B\", \"short\": \"Bazhong\" }, { \"id\": \"265\", \"provincecode\": \"520000\", \"city\": \"毕节地区\", \"code\": \"522400\", \"initial\": \"B\", \"short\": \"Bijie\" }, { \"id\": \"271\", \"provincecode\": \"530000\", \"city\": \"保山市\", \"code\": \"530500\", \"initial\": \"B\", \"short\": \"Baoshan\" }, { \"id\": \"293\", \"provincecode\": \"610000\", \"city\": \"宝鸡市\", \"code\": \"610300\", \"initial\": \"B\", \"short\": \"Baoji\" }, { \"id\": \"304\", \"provincecode\": \"620000\", \"city\": \"白银市\", \"code\": \"620400\", \"initial\": \"B\", \"short\": \"Baiyin\" }, { \"id\": \"333\", \"provincecode\": \"650000\", \"city\": \"博尔塔拉蒙古自治州\", \"code\": \"652700\", \"initial\": \"B\", \"short\": \"Boertala\" }, { \"id\": \"334\", \"provincecode\": \"650000\", \"city\": \"巴音郭楞蒙古自治州\", \"code\": \"652800\", \"initial\": \"B\", \"short\": \"Bayinguoleng\" }, { \"id\": \"\", \"provincecode\": \"500000\", \"city\": \"重庆市\", \"code\": \"500000\", \"initial\": \"C\", \"short\": \"Chongqing\" }, { \"id\": \"9\", \"provincecode\": \"130000\", \"city\": \"承德市\", \"code\": \"130800\", \"initial\": \"C\", \"short\": \"Chengde\" }, { \"id\": \"10\", \"provincecode\": \"130000\", \"city\": \"沧州市\", \"code\": \"130900\", \"initial\": \"C\", \"short\": \"Cangzhou\" }, { \"id\": \"16\", \"provincecode\": \"140000\", \"city\": \"长治市\", \"code\": \"140400\", \"initial\": \"C\", \"short\": \"Changzhi\" }, { \"id\": \"27\", \"provincecode\": \"150000\", \"city\": \"赤峰市\", \"code\": \"150400\", \"initial\": \"C\", \"short\": \"Chifeng\" }, { \"id\": \"48\", \"provincecode\": \"210000\", \"city\": \"朝阳市\", \"code\": \"211300\", \"initial\": \"C\", \"short\": \"Chaoyang\" }, { \"id\": \"50\", \"provincecode\": \"220000\", \"city\": \"长春市\", \"code\": \"220100\", \"initial\": \"C\", \"short\": \"Changchun\" }, { \"id\": \"77\", \"provincecode\": \"320000\", \"city\": \"常州市\", \"code\": \"320400\", \"initial\": \"C\", \"short\": \"Changzhou\" }, { \"id\": \"107\", \"provincecode\": \"340000\", \"city\": \"滁州市\", \"code\": \"341100\", \"initial\": \"C\", \"short\": \"Chuzhou\" }, { \"id\": \"110\", \"provincecode\": \"340000\", \"city\": \"巢湖市\", \"code\": \"341400\", \"initial\": \"C\", \"short\": \"Chaohu\" }, { \"id\": \"113\", \"provincecode\": \"340000\", \"city\": \"池州市\", \"code\": \"341700\", \"initial\": \"C\", \"short\": \"Chizhou\" }, { \"id\": \"183\", \"provincecode\": \"430000\", \"city\": \"长沙市\", \"code\": \"430100\", \"initial\": \"C\", \"short\": \"Changsha\" }, { \"id\": \"189\", \"provincecode\": \"430000\", \"city\": \"常德市\", \"code\": \"430700\", \"initial\": \"C\", \"short\": \"Changde\" }, { \"id\": \"192\", \"provincecode\": \"430000\", \"city\": \"郴州市\", \"code\": \"431000\", \"initial\": \"C\", \"short\": \"Chenzhou\" }, { \"id\": \"215\", \"provincecode\": \"440000\", \"city\": \"潮州市\", \"code\": \"445100\", \"initial\": \"C\", \"short\": \"Chaozhou\" }, { \"id\": \"231\", \"provincecode\": \"450000\", \"city\": \"崇左市\", \"code\": \"451400\", \"initial\": \"C\", \"short\": \"Chongzuo\" }, { \"id\": \"238\", \"provincecode\": \"510000\", \"city\": \"成都市\", \"code\": \"510100\", \"initial\": \"C\", \"short\": \"Chengdu\" }, { \"id\": \"276\", \"provincecode\": \"530000\", \"city\": \"楚雄彝族自治州\", \"code\": \"532300\", \"initial\": \"C\", \"short\": \"Chuxiong\" }, { \"id\": \"285\", \"provincecode\": \"540000\", \"city\": \"昌都地区\", \"code\": \"542100\", \"initial\": \"C\", \"short\": \"Changdu\" }, { \"id\": \"332\", \"provincecode\": \"650000\", \"city\": \"昌吉回族自治州\", \"code\": \"652300\", \"initial\": \"C\", \"short\": \"Changji\" }, { \"id\": \"14\", \"provincecode\": \"140000\", \"city\": \"大同市\", \"code\": \"140200\", \"initial\": \"D\", \"short\": \"Datong\" }, { \"id\": \"37\", \"provincecode\": \"210000\", \"city\": \"大连市\", \"code\": \"210200\", \"initial\": \"D\", \"short\": \"Dalian\" }, { \"id\": \"41\", \"provincecode\": \"210000\", \"city\": \"丹东市\", \"code\": \"210600\", \"initial\": \"D\", \"short\": \"Dandong\" }, { \"id\": \"64\", \"provincecode\": \"230000\", \"city\": \"大庆市\", \"code\": \"230600\", \"initial\": \"D\", \"short\": \"Daqing\" }, { \"id\": \"71\", \"provincecode\": \"230000\", \"city\": \"大兴安岭地区\", \"code\": \"232700\", \"initial\": \"D\", \"short\": \"Daxinganling\" }, { \"id\": \"139\", \"provincecode\": \"370000\", \"city\": \"东营市\", \"code\": \"370500\", \"initial\": \"D\", \"short\": \"Dongying\" }, { \"id\": \"148\", \"provincecode\": \"370000\", \"city\": \"德州市\", \"code\": \"371400\", \"initial\": \"D\", \"short\": \"Dezhou\" }, { \"id\": \"213\", \"provincecode\": \"440000\", \"city\": \"东莞市\", \"code\": \"441900\", \"initial\": \"D\", \"short\": \"Dongguan\" }, { \"id\": \"242\", \"provincecode\": \"510000\", \"city\": \"德阳市\", \"code\": \"510600\", \"initial\": \"D\", \"short\": \"Deyang\" }, { \"id\": \"252\", \"provincecode\": \"510000\", \"city\": \"达州市\", \"code\": \"511700\", \"initial\": \"D\", \"short\": \"Dazhou\" }, { \"id\": \"280\", \"provincecode\": \"530000\", \"city\": \"大理白族自治州\", \"code\": \"532900\", \"initial\": \"D\", \"short\": \"Dali\" }, { \"id\": \"281\", \"provincecode\": \"530000\", \"city\": \"德宏傣族景颇族自治州\", \"code\": \"533100\", \"initial\": \"D\", \"short\": \"Dehong\" }, { \"id\": \"283\", \"provincecode\": \"530000\", \"city\": \"迪庆藏族自治州\", \"code\": \"533400\", \"initial\": \"D\", \"short\": \"Diqing\" }, { \"id\": \"311\", \"provincecode\": \"620000\", \"city\": \"定西市\", \"code\": \"621100\", \"initial\": \"D\", \"short\": \"Dingxi\" }, { \"id\": \"29\", \"provincecode\": \"150000\", \"city\": \"鄂尔多斯市\", \"code\": \"150600\", \"initial\": \"E\", \"short\": \"Eerduosi\" }, { \"id\": \"174\", \"provincecode\": \"420000\", \"city\": \"鄂州市\", \"code\": \"420700\", \"initial\": \"E\", \"short\": \"Ezhou\" }, { \"id\": \"181\", \"provincecode\": \"420000\", \"city\": \"恩施土家族苗族自治州\", \"code\": \"422800\", \"initial\": \"E\", \"short\": \"Enshi\" }, { \"id\": \"39\", \"provincecode\": \"210000\", \"city\": \"抚顺市\", \"code\": \"210400\", \"initial\": \"F\", \"short\": \"Fushun\" }, { \"id\": \"44\", \"provincecode\": \"210000\", \"city\": \"阜新市\", \"code\": \"210900\", \"initial\": \"F\", \"short\": \"Fuxin\" }, { \"id\": \"108\", \"provincecode\": \"340000\", \"city\": \"阜阳市\", \"code\": \"341200\", \"initial\": \"F\", \"short\": \"Fuyang\" }, { \"id\": \"115\", \"provincecode\": \"350000\", \"city\": \"福州市\", \"code\": \"350100\", \"initial\": \"F\", \"short\": \"Fuzhou\" }, { \"id\": \"133\", \"provincecode\": \"360000\", \"city\": \"抚州市\", \"code\": \"361000\", \"initial\": \"F\", \"short\": \"Fuzhou\" }, { \"id\": \"202\", \"provincecode\": \"440000\", \"city\": \"佛山市\", \"code\": \"440600\", \"initial\": \"F\", \"short\": \"Foshan\" }, { \"id\": \"223\", \"provincecode\": \"450000\", \"city\": \"防城港市\", \"code\": \"450600\", \"initial\": \"F\", \"short\": \"Fangchenggang\" }, { \"id\": \"130\", \"provincecode\": \"360000\", \"city\": \"赣州市\", \"code\": \"360700\", \"initial\": \"G\", \"short\": \"Ganzhou\" }, { \"id\": \"197\", \"provincecode\": \"440000\", \"city\": \"广州市\", \"code\": \"440100\", \"initial\": \"G\", \"short\": \"Guangzhou\" }, { \"id\": \"220\", \"provincecode\": \"450000\", \"city\": \"桂林市\", \"code\": \"450300\", \"initial\": \"G\", \"short\": \"Guilin\" }, { \"id\": \"225\", \"provincecode\": \"450000\", \"city\": \"贵港市\", \"code\": \"450800\", \"initial\": \"G\", \"short\": \"Guigang\" }, { \"id\": \"244\", \"provincecode\": \"510000\", \"city\": \"广元市\", \"code\": \"510800\", \"initial\": \"G\", \"short\": \"Guangyuan\" }, { \"id\": \"251\", \"provincecode\": \"510000\", \"city\": \"广安市\", \"code\": \"511600\", \"initial\": \"G\", \"short\": \"Guangan\" }, { \"id\": \"257\", \"provincecode\": \"510000\", \"city\": \"甘孜藏族自治州\", \"code\": \"513300\", \"initial\": \"G\", \"short\": \"Ganzi\" }, { \"id\": \"259\", \"provincecode\": \"520000\", \"city\": \"贵阳市\", \"code\": \"520100\", \"initial\": \"G\", \"short\": \"Guiyang\" }, { \"id\": \"314\", \"provincecode\": \"620000\", \"city\": \"甘南藏族自治州\", \"code\": \"623000\", \"initial\": \"G\", \"short\": \"Gannan\" }, { \"id\": \"320\", \"provincecode\": \"630000\", \"city\": \"果洛藏族自治州\", \"code\": \"632600\", \"initial\": \"G\", \"short\": \"Guoluo\" }, { \"id\": \"326\", \"provincecode\": \"640000\", \"city\": \"固原市\", \"code\": \"640400\", \"initial\": \"G\", \"short\": \"Guyuan\" }, { \"id\": \"5\", \"provincecode\": \"130000\", \"city\": \"邯郸市\", \"code\": \"130400\", \"initial\": \"H\", \"short\": \"Handan\" }, { \"id\": \"12\", \"provincecode\": \"130000\", \"city\": \"衡水市\", \"code\": \"131100\", \"initial\": \"H\", \"short\": \"Hengshui\" }, { \"id\": \"\", \"provincecode\": \"370000\", \"city\": \"菏泽市\", \"code\": \"371700\", \"initial\": \"H\", \"short\": \"Heze\" }, { \"id\": \"24\", \"provincecode\": \"150000\", \"city\": \"呼和浩特市\", \"code\": \"150100\", \"initial\": \"H\", \"short\": \"Huhehaote\" }, { \"id\": \"30\", \"provincecode\": \"150000\", \"city\": \"呼伦贝尔市\", \"code\": \"150700\", \"initial\": \"H\", \"short\": \"Hulunbeier\" }, { \"id\": \"49\", \"provincecode\": \"210000\", \"city\": \"葫芦岛市\", \"code\": \"211400\", \"initial\": \"H\", \"short\": \"Huludao\" }, { \"id\": \"59\", \"provincecode\": \"230000\", \"city\": \"哈尔滨市\", \"code\": \"230100\", \"initial\": \"H\", \"short\": \"Haerbin\" }, { \"id\": \"62\", \"provincecode\": \"230000\", \"city\": \"鹤岗市\", \"code\": \"230400\", \"initial\": \"H\", \"short\": \"Hegang\" }, { \"id\": \"69\", \"provincecode\": \"230000\", \"city\": \"黑河市\", \"code\": \"231100\", \"initial\": \"H\", \"short\": \"Heihe\" }, { \"id\": \"81\", \"provincecode\": \"320000\", \"city\": \"淮安市\", \"code\": \"320800\", \"initial\": \"H\", \"short\": \"Huaian\" }, { \"id\": \"87\", \"provincecode\": \"330000\", \"city\": \"杭州市\", \"code\": \"330100\", \"initial\": \"H\", \"short\": \"Hangzhou\" }, { \"id\": \"91\", \"provincecode\": \"330000\", \"city\": \"湖州市\", \"code\": \"330500\", \"initial\": \"H\", \"short\": \"Huzhou\" }, { \"id\": \"98\", \"provincecode\": \"340000\", \"city\": \"合肥市\", \"code\": \"340100\", \"initial\": \"H\", \"short\": \"Hefei\" }, { \"id\": \"101\", \"provincecode\": \"340000\", \"city\": \"淮南市\", \"code\": \"340400\", \"initial\": \"H\", \"short\": \"Huainan\" }, { \"id\": \"103\", \"provincecode\": \"340000\", \"city\": \"淮北市\", \"code\": \"340600\", \"initial\": \"H\", \"short\": \"Huaibei\" }, { \"id\": \"106\", \"provincecode\": \"340000\", \"city\": \"黄山市\", \"code\": \"341000\", \"initial\": \"H\", \"short\": \"Huangshan\" }, { \"id\": \"112\", \"provincecode\": \"340000\", \"city\": \"亳州市\", \"code\": \"341600\", \"initial\": \"H\", \"short\": \"Bozhou\" }, { \"id\": \"157\", \"provincecode\": \"410000\", \"city\": \"鹤壁市\", \"code\": \"410600\", \"initial\": \"H\", \"short\": \"Hebi\" }, { \"id\": \"170\", \"provincecode\": \"420000\", \"city\": \"黄石市\", \"code\": \"420200\", \"initial\": \"H\", \"short\": \"Huangshi\" }, { \"id\": \"178\", \"provincecode\": \"420000\", \"city\": \"黄冈市\", \"code\": \"421100\", \"initial\": \"H\", \"short\": \"Huanggang\" }, { \"id\": \"186\", \"provincecode\": \"430000\", \"city\": \"衡阳市\", \"code\": \"430400\", \"initial\": \"H\", \"short\": \"Hengyang\" }, { \"id\": \"194\", \"provincecode\": \"430000\", \"city\": \"怀化市\", \"code\": \"431200\", \"initial\": \"H\", \"short\": \"Huaihua\" }, { \"id\": \"207\", \"provincecode\": \"440000\", \"city\": \"惠州市\", \"code\": \"441300\", \"initial\": \"H\", \"short\": \"Huizhou\" }, { \"id\": \"210\", \"provincecode\": \"440000\", \"city\": \"河源市\", \"code\": \"441600\", \"initial\": \"H\", \"short\": \"Heyuan\" }, { \"id\": \"228\", \"provincecode\": \"450000\", \"city\": \"贺州市\", \"code\": \"451100\", \"initial\": \"H\", \"short\": \"Hezhou\" }, { \"id\": \"229\", \"provincecode\": \"450000\", \"city\": \"河池市\", \"code\": \"451200\", \"initial\": \"H\", \"short\": \"Hechi\" }, { \"id\": \"232\", \"provincecode\": \"460000\", \"city\": \"海口市\", \"code\": \"460100\", \"initial\": \"H\", \"short\": \"Haikou\" }, { \"id\": \"277\", \"provincecode\": \"530000\", \"city\": \"红河哈尼族彝族自治州\", \"code\": \"532500\", \"initial\": \"H\", \"short\": \"Honghe\" }, { \"id\": \"297\", \"provincecode\": \"610000\", \"city\": \"汉中市\", \"code\": \"610700\", \"initial\": \"H\", \"short\": \"Hanzhong\" }, { \"id\": \"316\", \"provincecode\": \"630000\", \"city\": \"海东地区\", \"code\": \"632100\", \"initial\": \"H\", \"short\": \"Haidong\" }, { \"id\": \"317\", \"provincecode\": \"630000\", \"city\": \"海北藏族自治州\", \"code\": \"632200\", \"initial\": \"H\", \"short\": \"Haibei\" }, { \"id\": \"318\", \"provincecode\": \"630000\", \"city\": \"黄南藏族自治州\", \"code\": \"632300\", \"initial\": \"H\", \"short\": \"Huangnan\" }, { \"id\": \"319\", \"provincecode\": \"630000\", \"city\": \"海南藏族自治州\", \"code\": \"632500\", \"initial\": \"H\", \"short\": \"Hainan\" }, { \"id\": \"322\", \"provincecode\": \"630000\", \"city\": \"海西蒙古族藏族自治州\", \"code\": \"632800\", \"initial\": \"H\", \"short\": \"Haixi\" }, { \"id\": \"331\", \"provincecode\": \"650000\", \"city\": \"哈密地区\", \"code\": \"652200\", \"initial\": \"H\", \"short\": \"Hami\" }, { \"id\": \"338\", \"provincecode\": \"650000\", \"city\": \"和田地区\", \"code\": \"653200\", \"initial\": \"H\", \"short\": \"Hetiandi\" }, { \"id\": \"17\", \"provincecode\": \"140000\", \"city\": \"晋城市\", \"code\": \"140500\", \"initial\": \"J\", \"short\": \"Jincheng\" }, { \"id\": \"19\", \"provincecode\": \"140000\", \"city\": \"晋中市\", \"code\": \"140700\", \"initial\": \"J\", \"short\": \"Jinzhong\" }, { \"id\": \"42\", \"provincecode\": \"210000\", \"city\": \"锦州市\", \"code\": \"210700\", \"initial\": \"J\", \"short\": \"Jinzhou\" }, { \"id\": \"51\", \"provincecode\": \"220000\", \"city\": \"吉林市\", \"code\": \"220200\", \"initial\": \"J\", \"short\": \"Jilin\" }, { \"id\": \"61\", \"provincecode\": \"230000\", \"city\": \"鸡西市\", \"code\": \"230300\", \"initial\": \"J\", \"short\": \"Jixi\" }, { \"id\": \"66\", \"provincecode\": \"230000\", \"city\": \"佳木斯市\", \"code\": \"230800\", \"initial\": \"J\", \"short\": \"Jiamusi\" }, { \"id\": \"90\", \"provincecode\": \"330000\", \"city\": \"嘉兴市\", \"code\": \"330400\", \"initial\": \"J\", \"short\": \"Jiaxing\" }, { \"id\": \"93\", \"provincecode\": \"330000\", \"city\": \"金华市\", \"code\": \"330700\", \"initial\": \"J\", \"short\": \"Jinhua\" }, { \"id\": \"125\", \"provincecode\": \"360000\", \"city\": \"景德镇市\", \"code\": \"360200\", \"initial\": \"J\", \"short\": \"Jingdezhen\" }, { \"id\": \"127\", \"provincecode\": \"360000\", \"city\": \"九江市\", \"code\": \"360400\", \"initial\": \"J\", \"short\": \"Jiujiang\" }, { \"id\": \"131\", \"provincecode\": \"360000\", \"city\": \"吉安市\", \"code\": \"360800\", \"initial\": \"J\", \"short\": \"Jian\" }, { \"id\": \"135\", \"provincecode\": \"370000\", \"city\": \"济南市\", \"code\": \"370100\", \"initial\": \"J\", \"short\": \"Jinan\" }, { \"id\": \"142\", \"provincecode\": \"370000\", \"city\": \"济宁市\", \"code\": \"370800\", \"initial\": \"J\", \"short\": \"Jining\" }, { \"id\": \"159\", \"provincecode\": \"410000\", \"city\": \"焦作市\", \"code\": \"410800\", \"initial\": \"J\", \"short\": \"Jiaozuo\" }, { \"id\": \"175\", \"provincecode\": \"420000\", \"city\": \"荆门市\", \"code\": \"420800\", \"initial\": \"J\", \"short\": \"Jingmen\" }, { \"id\": \"177\", \"provincecode\": \"420000\", \"city\": \"荆州市\", \"code\": \"421000\", \"initial\": \"J\", \"short\": \"Jingzhou\" }, { \"id\": \"203\", \"provincecode\": \"440000\", \"city\": \"江门市\", \"code\": \"440700\", \"initial\": \"J\", \"short\": \"Jiangmen\" }, { \"id\": \"216\", \"provincecode\": \"440000\", \"city\": \"揭阳市\", \"code\": \"445200\", \"initial\": \"J\", \"short\": \"Jieyang\" }, { \"id\": \"302\", \"provincecode\": \"620000\", \"city\": \"嘉峪关市\", \"code\": \"620200\", \"initial\": \"J\", \"short\": \"Jiayuguan\" }, { \"id\": \"303\", \"provincecode\": \"620000\", \"city\": \"金昌市\", \"code\": \"620300\", \"initial\": \"J\", \"short\": \"Jinchang\" }, { \"id\": \"309\", \"provincecode\": \"620000\", \"city\": \"酒泉市\", \"code\": \"620900\", \"initial\": \"J\", \"short\": \"Jiuquan\" }, { \"id\": \"153\", \"provincecode\": \"410000\", \"city\": \"开封市\", \"code\": \"410200\", \"initial\": \"K\", \"short\": \"Kaifeng\" }, { \"id\": \"268\", \"provincecode\": \"530000\", \"city\": \"昆明市\", \"code\": \"530100\", \"initial\": \"K\", \"short\": \"Kunming\" }, { \"id\": \"329\", \"provincecode\": \"650000\", \"city\": \"克拉玛依市\", \"code\": \"650200\", \"initial\": \"K\", \"short\": \"Kelamayi\" }, { \"id\": \"336\", \"provincecode\": \"650000\", \"city\": \"克孜勒苏柯尔克孜自治州\", \"code\": \"653000\", \"initial\": \"K\", \"short\": \"Kezile\" }, { \"id\": \"337\", \"provincecode\": \"650000\", \"city\": \"喀什地区\", \"code\": \"653100\", \"initial\": \"K\", \"short\": \"Kashidi\" }, { \"id\": \"11\", \"provincecode\": \"130000\", \"city\": \"廊坊市\", \"code\": \"131000\", \"initial\": \"L\", \"short\": \"Langfang\" }, { \"id\": \"22\", \"provincecode\": \"140000\", \"city\": \"临汾市\", \"code\": \"141000\", \"initial\": \"L\", \"short\": \"Linfen\" }, { \"id\": \"23\", \"provincecode\": \"140000\", \"city\": \"吕梁市\", \"code\": \"141100\", \"initial\": \"L\", \"short\": \"Lvliang\" }, { \"id\": \"45\", \"provincecode\": \"210000\", \"city\": \"辽阳市\", \"code\": \"211000\", \"initial\": \"L\", \"short\": \"Liaoyang\" }, { \"id\": \"53\", \"provincecode\": \"220000\", \"city\": \"辽源市\", \"code\": \"220400\", \"initial\": \"L\", \"short\": \"Liaoyuan\" }, { \"id\": \"80\", \"provincecode\": \"320000\", \"city\": \"连云港市\", \"code\": \"320700\", \"initial\": \"L\", \"short\": \"Lianyungang\" }, { \"id\": \"97\", \"provincecode\": \"330000\", \"city\": \"丽水市\", \"code\": \"331100\", \"initial\": \"L\", \"short\": \"Lishui\" }, { \"id\": \"111\", \"provincecode\": \"340000\", \"city\": \"六安市\", \"code\": \"341500\", \"initial\": \"L\", \"short\": \"Liuan\" }, { \"id\": \"122\", \"provincecode\": \"350000\", \"city\": \"龙岩市\", \"code\": \"350800\", \"initial\": \"L\", \"short\": \"Longyan\" }, { \"id\": \"146\", \"provincecode\": \"370000\", \"city\": \"莱芜市\", \"code\": \"371200\", \"initial\": \"L\", \"short\": \"Laiwu\" }, { \"id\": \"147\", \"provincecode\": \"370000\", \"city\": \"临沂市\", \"code\": \"371300\", \"initial\": \"L\", \"short\": \"Linyi\" }, { \"id\": \"149\", \"provincecode\": \"370000\", \"city\": \"聊城市\", \"code\": \"371500\", \"initial\": \"L\", \"short\": \"Liaocheng\" }, { \"id\": \"154\", \"provincecode\": \"410000\", \"city\": \"洛阳市\", \"code\": \"410300\", \"initial\": \"L\", \"short\": \"Luoyang\" }, { \"id\": \"162\", \"provincecode\": \"410000\", \"city\": \"漯河市\", \"code\": \"411100\", \"initial\": \"L\", \"short\": \"Luohe\" }, { \"id\": \"195\", \"provincecode\": \"430000\", \"city\": \"娄底市\", \"code\": \"431300\", \"initial\": \"L\", \"short\": \"Loudi\" }, { \"id\": \"219\", \"provincecode\": \"450000\", \"city\": \"柳州市\", \"code\": \"450200\", \"initial\": \"L\", \"short\": \"Liuzhou\" }, { \"id\": \"230\", \"provincecode\": \"450000\", \"city\": \"来宾市\", \"code\": \"451300\", \"initial\": \"L\", \"short\": \"Laibin\" }, { \"id\": \"241\", \"provincecode\": \"510000\", \"city\": \"泸州市\", \"code\": \"510500\", \"initial\": \"L\", \"short\": \"Luzhou\" }, { \"id\": \"247\", \"provincecode\": \"510000\", \"city\": \"乐山市\", \"code\": \"511100\", \"initial\": \"L\", \"short\": \"Leshan\" }, { \"id\": \"258\", \"provincecode\": \"510000\", \"city\": \"凉山彝族自治州\", \"code\": \"513400\", \"initial\": \"L\", \"short\": \"Liangshan\" }, { \"id\": \"260\", \"provincecode\": \"520000\", \"city\": \"六盘水市\", \"code\": \"520200\", \"initial\": \"L\", \"short\": \"Liupanshui\" }, { \"id\": \"273\", \"provincecode\": \"530000\", \"city\": \"丽江市\", \"code\": \"530700\", \"initial\": \"L\", \"short\": \"Lijiang\" }, { \"id\": \"275\", \"provincecode\": \"530000\", \"city\": \"临沧市\", \"code\": \"530900\", \"initial\": \"L\", \"short\": \"Lincang\" }, { \"id\": \"284\", \"provincecode\": \"540000\", \"city\": \"拉萨市\", \"code\": \"540100\", \"initial\": \"L\", \"short\": \"Lasa\" }, { \"id\": \"290\", \"provincecode\": \"540000\", \"city\": \"林芝地区\", \"code\": \"542600\", \"initial\": \"L\", \"short\": \"Linzhi\" }, { \"id\": \"301\", \"provincecode\": \"620000\", \"city\": \"兰州市\", \"code\": \"620100\", \"initial\": \"L\", \"short\": \"Lanzhou\" }, { \"id\": \"312\", \"provincecode\": \"620000\", \"city\": \"陇南市\", \"code\": \"621200\", \"initial\": \"L\", \"short\": \"Longnan\" }, { \"id\": \"313\", \"provincecode\": \"620000\", \"city\": \"临夏回族自治州\", \"code\": \"622900\", \"initial\": \"L\", \"short\": \"Linxia\" }, { \"id\": \"68\", \"provincecode\": \"230000\", \"city\": \"牡丹江市\", \"code\": \"231000\", \"initial\": \"M\", \"short\": \"Mudanjiang\" }, { \"id\": \"102\", \"provincecode\": \"340000\", \"city\": \"马鞍山市\", \"code\": \"340500\", \"initial\": \"M\", \"short\": \"Maanshan\" }, { \"id\": \"205\", \"provincecode\": \"440000\", \"city\": \"茂名市\", \"code\": \"440900\", \"initial\": \"M\", \"short\": \"Maoming\" }, { \"id\": \"208\", \"provincecode\": \"440000\", \"city\": \"梅州市\", \"code\": \"441400\", \"initial\": \"M\", \"short\": \"Meizhou\" }, { \"id\": \"243\", \"provincecode\": \"510000\", \"city\": \"绵阳市\", \"code\": \"510700\", \"initial\": \"M\", \"short\": \"Mianyang\" }, { \"id\": \"249\", \"provincecode\": \"510000\", \"city\": \"眉山市\", \"code\": \"511400\", \"initial\": \"M\", \"short\": \"Meishan\" }, { \"id\": \"74\", \"provincecode\": \"320000\", \"city\": \"南京市\", \"code\": \"320100\", \"initial\": \"N\", \"short\": \"Nanjing\" }, { \"id\": \"79\", \"provincecode\": \"320000\", \"city\": \"南通市\", \"code\": \"320600\", \"initial\": \"N\", \"short\": \"Nantong\" }, { \"id\": \"88\", \"provincecode\": \"330000\", \"city\": \"宁波市\", \"code\": \"330200\", \"initial\": \"N\", \"short\": \"Ningbo\" }, { \"id\": \"121\", \"provincecode\": \"350000\", \"city\": \"南平市\", \"code\": \"350700\", \"initial\": \"N\", \"short\": \"Nanping\" }, { \"id\": \"123\", \"provincecode\": \"350000\", \"city\": \"宁德市\", \"code\": \"350900\", \"initial\": \"N\", \"short\": \"Ningde\" }, { \"id\": \"124\", \"provincecode\": \"360000\", \"city\": \"南昌市\", \"code\": \"360100\", \"initial\": \"N\", \"short\": \"Nanchang\" }, { \"id\": \"164\", \"provincecode\": \"410000\", \"city\": \"南阳市\", \"code\": \"411300\", \"initial\": \"N\", \"short\": \"Nanyang\" }, { \"id\": \"218\", \"provincecode\": \"450000\", \"city\": \"南宁市\", \"code\": \"450100\", \"initial\": \"N\", \"short\": \"Nanning\" }, { \"id\": \"246\", \"provincecode\": \"510000\", \"city\": \"内江市\", \"code\": \"511000\", \"initial\": \"N\", \"short\": \"Neijiang\" }, { \"id\": \"248\", \"provincecode\": \"510000\", \"city\": \"南充市\", \"code\": \"511300\", \"initial\": \"N\", \"short\": \"Nanchong\" }, { \"id\": \"282\", \"provincecode\": \"530000\", \"city\": \"怒江傈僳族自治州\", \"code\": \"533300\", \"initial\": \"N\", \"short\": \"Nujiang\" }, { \"id\": \"288\", \"provincecode\": \"540000\", \"city\": \"那曲地区\", \"code\": \"542400\", \"initial\": \"N\", \"short\": \"Naqu\" }, { \"id\": \"46\", \"provincecode\": \"210000\", \"city\": \"盘锦市\", \"code\": \"211100\", \"initial\": \"P\", \"short\": \"Panjin\" }, { \"id\": \"117\", \"provincecode\": \"350000\", \"city\": \"莆田市\", \"code\": \"350300\", \"initial\": \"P\", \"short\": \"Putian\" }, { \"id\": \"126\", \"provincecode\": \"360000\", \"city\": \"萍乡市\", \"code\": \"360300\", \"initial\": \"P\", \"short\": \"Pingxiang\" }, { \"id\": \"155\", \"provincecode\": \"410000\", \"city\": \"平顶山市\", \"code\": \"410400\", \"initial\": \"P\", \"short\": \"Pingdingshan\" }, { \"id\": \"160\", \"provincecode\": \"410000\", \"city\": \"濮阳市\", \"code\": \"410900\", \"initial\": \"P\", \"short\": \"Puyang\" }, { \"id\": \"240\", \"provincecode\": \"510000\", \"city\": \"攀枝花市\", \"code\": \"510400\", \"initial\": \"P\", \"short\": \"Panzhihua\" }, { \"id\": \"308\", \"provincecode\": \"620000\", \"city\": \"平凉市\", \"code\": \"620800\", \"initial\": \"P\", \"short\": \"Pingliang\" }, { \"id\": \"4\", \"provincecode\": \"130000\", \"city\": \"秦皇岛市\", \"code\": \"130300\", \"initial\": \"Q\", \"short\": \"Qinhuangdao\" }, { \"id\": \"60\", \"provincecode\": \"230000\", \"city\": \"齐齐哈尔市\", \"code\": \"230200\", \"initial\": \"Q\", \"short\": \"Qiqihaer\" }, { \"id\": \"67\", \"provincecode\": \"230000\", \"city\": \"七台河市\", \"code\": \"230900\", \"initial\": \"Q\", \"short\": \"Qitaihe\" }, { \"id\": \"94\", \"provincecode\": \"330000\", \"city\": \"衢州市\", \"code\": \"330800\", \"initial\": \"Q\", \"short\": \"Quzhou\" }, { \"id\": \"119\", \"provincecode\": \"350000\", \"city\": \"泉州市\", \"code\": \"350500\", \"initial\": \"Q\", \"short\": \"Quanzhou\" }, { \"id\": \"136\", \"provincecode\": \"370000\", \"city\": \"青岛市\", \"code\": \"370200\", \"initial\": \"Q\", \"short\": \"Qingdao\" }, { \"id\": \"212\", \"provincecode\": \"440000\", \"city\": \"清远市\", \"code\": \"441800\", \"initial\": \"Q\", \"short\": \"Qingyuan\" }, { \"id\": \"224\", \"provincecode\": \"450000\", \"city\": \"钦州市\", \"code\": \"450700\", \"initial\": \"Q\", \"short\": \"Qinzhou\" }, { \"id\": \"264\", \"provincecode\": \"520000\", \"city\": \"黔西南布依族苗族自治州\", \"code\": \"522300\", \"initial\": \"Q\", \"short\": \"Qianxinan\" }, { \"id\": \"266\", \"provincecode\": \"520000\", \"city\": \"黔东南苗族侗族自治州\", \"code\": \"522600\", \"initial\": \"Q\", \"short\": \"Qiandong\" }, { \"id\": \"267\", \"provincecode\": \"520000\", \"city\": \"黔南布依族苗族自治州\", \"code\": \"522700\", \"initial\": \"Q\", \"short\": \"Qiannan\" }, { \"id\": \"269\", \"provincecode\": \"530000\", \"city\": \"曲靖市\", \"code\": \"530300\", \"initial\": \"Q\", \"short\": \"Qujing\" }, { \"id\": \"310\", \"provincecode\": \"620000\", \"city\": \"庆阳市\", \"code\": \"621000\", \"initial\": \"Q\", \"short\": \"Qingyang\" }, { \"id\": \"145\", \"provincecode\": \"370000\", \"city\": \"日照市\", \"code\": \"371100\", \"initial\": \"R\", \"short\": \"Rizhao\" }, { \"id\": \"287\", \"provincecode\": \"540000\", \"city\": \"日喀则地区\", \"code\": \"542300\", \"initial\": \"R\", \"short\": \"Rikaze\" }, { \"id\": \"2\", \"provincecode\": \"130000\", \"city\": \"石家庄市\", \"code\": \"130100\", \"initial\": \"S\", \"short\": \"Shijiazhuang\" }, { \"id\": \"\", \"provincecode\": \"310000\", \"city\": \"上海市\", \"code\": \"310000\", \"initial\": \"S\", \"short\": \"Shanghai\" }, { \"id\": \"18\", \"provincecode\": \"140000\", \"city\": \"朔州市\", \"code\": \"140600\", \"initial\": \"S\", \"short\": \"Shuozhou\" }, { \"id\": \"36\", \"provincecode\": \"210000\", \"city\": \"沈阳市\", \"code\": \"210100\", \"initial\": \"S\", \"short\": \"Shenyang\" }, { \"id\": \"\", \"provincecode\": \"530000\", \"city\": \"普洱市\", \"code\": \"530800\", \"initial\": \"P\", \"short\": \"Puer\" }, { \"id\": \"52\", \"provincecode\": \"220000\", \"city\": \"四平市\", \"code\": \"220300\", \"initial\": \"S\", \"short\": \"Siping\" }, { \"id\": \"56\", \"provincecode\": \"220000\", \"city\": \"松原市\", \"code\": \"220700\", \"initial\": \"S\", \"short\": \"Songyuan\" }, { \"id\": \"63\", \"provincecode\": \"230000\", \"city\": \"双鸭山市\", \"code\": \"230500\", \"initial\": \"S\", \"short\": \"Shuangyashan\" }, { \"id\": \"70\", \"provincecode\": \"230000\", \"city\": \"绥化市\", \"code\": \"231200\", \"initial\": \"S\", \"short\": \"Suihua\" }, { \"id\": \"78\", \"provincecode\": \"320000\", \"city\": \"苏州市\", \"code\": \"320500\", \"initial\": \"S\", \"short\": \"Suzhou\" }, { \"id\": \"86\", \"provincecode\": \"320000\", \"city\": \"宿迁市\", \"code\": \"321300\", \"initial\": \"S\", \"short\": \"Suqian\" }, { \"id\": \"92\", \"provincecode\": \"330000\", \"city\": \"绍兴市\", \"code\": \"330600\", \"initial\": \"S\", \"short\": \"Shaoxing\" }, { \"id\": \"109\", \"provincecode\": \"340000\", \"city\": \"宿州市\", \"code\": \"341300\", \"initial\": \"S\", \"short\": \"Suzhou\" }, { \"id\": \"118\", \"provincecode\": \"350000\", \"city\": \"三明市\", \"code\": \"350400\", \"initial\": \"S\", \"short\": \"Sanming\" }, { \"id\": \"134\", \"provincecode\": \"360000\", \"city\": \"上饶市\", \"code\": \"361100\", \"initial\": \"S\", \"short\": \"Shangrao\" }, { \"id\": \"163\", \"provincecode\": \"410000\", \"city\": \"三门峡市\", \"code\": \"411200\", \"initial\": \"S\", \"short\": \"Sanmenxia\" }, { \"id\": \"165\", \"provincecode\": \"410000\", \"city\": \"商丘市\", \"code\": \"411400\", \"initial\": \"S\", \"short\": \"Shangqiu\" }, { \"id\": \"171\", \"provincecode\": \"420000\", \"city\": \"十堰市\", \"code\": \"420300\", \"initial\": \"S\", \"short\": \"Shiyan\" }, { \"id\": \"180\", \"provincecode\": \"420000\", \"city\": \"随州市\", \"code\": \"421300\", \"initial\": \"S\", \"short\": \"Suizhou\" }, { \"id\": \"187\", \"provincecode\": \"430000\", \"city\": \"邵阳市\", \"code\": \"430500\", \"initial\": \"S\", \"short\": \"Shaoyang\" }, { \"id\": \"198\", \"provincecode\": \"440000\", \"city\": \"韶关市\", \"code\": \"440200\", \"initial\": \"S\", \"short\": \"Shaoguan\" }, { \"id\": \"199\", \"provincecode\": \"440000\", \"city\": \"深圳市\", \"code\": \"440300\", \"initial\": \"S\", \"short\": \"Shenzhen\" }, { \"id\": \"201\", \"provincecode\": \"440000\", \"city\": \"汕头市\", \"code\": \"440500\", \"initial\": \"S\", \"short\": \"Shantou\" }, { \"id\": \"209\", \"provincecode\": \"440000\", \"city\": \"汕尾市\", \"code\": \"441500\", \"initial\": \"S\", \"short\": \"Shanwei\" }, { \"id\": \"233\", \"provincecode\": \"460000\", \"city\": \"三亚市\", \"code\": \"460200\", \"initial\": \"S\", \"short\": \"Sanya\" }, { \"id\": \"245\", \"provincecode\": \"510000\", \"city\": \"遂宁市\", \"code\": \"510900\", \"initial\": \"S\", \"short\": \"Suining\" }, { \"id\": \"286\", \"provincecode\": \"540000\", \"city\": \"山南地区\", \"code\": \"542200\", \"initial\": \"S\", \"short\": \"Shannan\" }, { \"id\": \"300\", \"provincecode\": \"610000\", \"city\": \"商洛市\", \"code\": \"611000\", \"initial\": \"S\", \"short\": \"Shangluo\" }, { \"id\": \"324\", \"provincecode\": \"640000\", \"city\": \"石嘴山市\", \"code\": \"640200\", \"initial\": \"S\", \"short\": \"Shizuishan\" }, { \"id\": \"3\", \"provincecode\": \"130000\", \"city\": \"唐山市\", \"code\": \"130200\", \"initial\": \"T\", \"short\": \"Tangshan\" }, { \"id\": \"13\", \"provincecode\": \"140000\", \"city\": \"太原市\", \"code\": \"140100\", \"initial\": \"T\", \"short\": \"Taiyuan\" }, { \"id\": \"28\", \"provincecode\": \"150000\", \"city\": \"通辽市\", \"code\": \"150500\", \"initial\": \"T\", \"short\": \"Tongliao\" }, { \"id\": \"47\", \"provincecode\": \"210000\", \"city\": \"铁岭市\", \"code\": \"211200\", \"initial\": \"T\", \"short\": \"Tieling\" }, { \"id\": \"54\", \"provincecode\": \"220000\", \"city\": \"通化市\", \"code\": \"220500\", \"initial\": \"T\", \"short\": \"Tonghua\" }, { \"id\": \"85\", \"provincecode\": \"320000\", \"city\": \"泰州市\", \"code\": \"321200\", \"initial\": \"T\", \"short\": \"Taizhou\" }, { \"id\": \"96\", \"provincecode\": \"330000\", \"city\": \"台州市\", \"code\": \"331000\", \"initial\": \"T\", \"short\": \"Taizhou\" }, { \"id\": \"104\", \"provincecode\": \"340000\", \"city\": \"铜陵市\", \"code\": \"340700\", \"initial\": \"T\", \"short\": \"Tongling\" }, { \"id\": \"143\", \"provincecode\": \"370000\", \"city\": \"泰安市\", \"code\": \"370900\", \"initial\": \"T\", \"short\": \"Taian\" }, { \"id\": \"263\", \"provincecode\": \"520000\", \"city\": \"铜仁地区\", \"code\": \"522200\", \"initial\": \"T\", \"short\": \"Tongren\" }, { \"id\": \"292\", \"provincecode\": \"610000\", \"city\": \"铜川市\", \"code\": \"610200\", \"initial\": \"T\", \"short\": \"Tongchuan\" }, { \"id\": \"305\", \"provincecode\": \"620000\", \"city\": \"天水市\", \"code\": \"620500\", \"initial\": \"T\", \"short\": \"Tianshui\" }, { \"id\": \"330\", \"provincecode\": \"650000\", \"city\": \"吐鲁番地区\", \"code\": \"652100\", \"initial\": \"T\", \"short\": \"Tulufan\" }, { \"id\": \"340\", \"provincecode\": \"650000\", \"city\": \"塔城地区\", \"code\": \"654200\", \"initial\": \"T\", \"short\": \"Tachengdi\" }, { \"id\": \"343\", \"provincecode\": \"120000\", \"city\": \"天津市\", \"code\": \"120000\", \"initial\": \"T\", \"short\": \"Tianjin\" }, { \"id\": \"26\", \"provincecode\": \"150000\", \"city\": \"乌海市\", \"code\": \"150300\", \"initial\": \"W\", \"short\": \"Wuhai\" }, { \"id\": \"32\", \"provincecode\": \"150000\", \"city\": \"乌兰察布市\", \"code\": \"150900\", \"initial\": \"W\", \"short\": \"Wulanchabu\" }, { \"id\": \"75\", \"provincecode\": \"320000\", \"city\": \"无锡市\", \"code\": \"320200\", \"initial\": \"W\", \"short\": \"Wuxi\" }, { \"id\": \"89\", \"provincecode\": \"330000\", \"city\": \"温州市\", \"code\": \"330300\", \"initial\": \"W\", \"short\": \"Wenzhou\" }, { \"id\": \"99\", \"provincecode\": \"340000\", \"city\": \"芜湖市\", \"code\": \"340200\", \"initial\": \"W\", \"short\": \"Wuhu\" }, { \"id\": \"141\", \"provincecode\": \"370000\", \"city\": \"潍坊市\", \"code\": \"370700\", \"initial\": \"W\", \"short\": \"Weifang\" }, { \"id\": \"144\", \"provincecode\": \"370000\", \"city\": \"威海市\", \"code\": \"371000\", \"initial\": \"W\", \"short\": \"Weihai\" }, { \"id\": \"169\", \"provincecode\": \"420000\", \"city\": \"武汉市\", \"code\": \"420100\", \"initial\": \"W\", \"short\": \"Wuhan\" }, { \"id\": \"221\", \"provincecode\": \"450000\", \"city\": \"梧州市\", \"code\": \"450400\", \"initial\": \"W\", \"short\": \"Wuzhou\" }, { \"id\": \"278\", \"provincecode\": \"530000\", \"city\": \"文山壮族苗族自治州\", \"code\": \"532600\", \"initial\": \"W\", \"short\": \"Wenshan\" }, { \"id\": \"295\", \"provincecode\": \"610000\", \"city\": \"渭南市\", \"code\": \"610500\", \"initial\": \"W\", \"short\": \"Weinan\" }, { \"id\": \"306\", \"provincecode\": \"620000\", \"city\": \"武威市\", \"code\": \"620600\", \"initial\": \"W\", \"short\": \"Wuwei\" }, { \"id\": \"325\", \"provincecode\": \"640000\", \"city\": \"吴忠市\", \"code\": \"640300\", \"initial\": \"W\", \"short\": \"Wuzhong\" }, { \"id\": \"328\", \"provincecode\": \"650000\", \"city\": \"乌鲁木齐市\", \"code\": \"650100\", \"initial\": \"W\", \"short\": \"Wulumuqi\" }, { \"id\": \"6\", \"provincecode\": \"130000\", \"city\": \"邢台市\", \"code\": \"130500\", \"initial\": \"X\", \"short\": \"Xingtai\" }, { \"id\": \"21\", \"provincecode\": \"140000\", \"city\": \"忻州市\", \"code\": \"140900\", \"initial\": \"X\", \"short\": \"Xinzhou\" }, { \"id\": \"33\", \"provincecode\": \"150000\", \"city\": \"兴安盟\", \"code\": \"152200\", \"initial\": \"X\", \"short\": \"Xinganmeng\" }, { \"id\": \"34\", \"provincecode\": \"150000\", \"city\": \"锡林郭勒盟\", \"code\": \"152500\", \"initial\": \"X\", \"short\": \"Xilinguolemeng\" }, { \"id\": \"76\", \"provincecode\": \"320000\", \"city\": \"徐州市\", \"code\": \"320300\", \"initial\": \"X\", \"short\": \"Xuzhou\" }, { \"id\": \"114\", \"provincecode\": \"340000\", \"city\": \"宣城市\", \"code\": \"341800\", \"initial\": \"X\", \"short\": \"Xuancheng\" }, { \"id\": \"116\", \"provincecode\": \"350000\", \"city\": \"厦门市\", \"code\": \"350200\", \"initial\": \"X\", \"short\": \"Xiamen\" }, { \"id\": \"128\", \"provincecode\": \"360000\", \"city\": \"新余市\", \"code\": \"360500\", \"initial\": \"X\", \"short\": \"Xinyu\" }, { \"id\": \"158\", \"provincecode\": \"410000\", \"city\": \"新乡市\", \"code\": \"410700\", \"initial\": \"X\", \"short\": \"Xinxiang\" }, { \"id\": \"161\", \"provincecode\": \"410000\", \"city\": \"许昌市\", \"code\": \"411000\", \"initial\": \"X\", \"short\": \"Xuchang\" }, { \"id\": \"166\", \"provincecode\": \"410000\", \"city\": \"信阳市\", \"code\": \"411500\", \"initial\": \"X\", \"short\": \"Xinyang\" }, { \"id\": \"173\", \"provincecode\": \"420000\", \"city\": \"襄樊市\", \"code\": \"420600\", \"initial\": \"X\", \"short\": \"Xiangfan\" }, { \"id\": \"176\", \"provincecode\": \"420000\", \"city\": \"孝感市\", \"code\": \"420900\", \"initial\": \"X\", \"short\": \"Xiaogan\" }, { \"id\": \"179\", \"provincecode\": \"420000\", \"city\": \"咸宁市\", \"code\": \"421200\", \"initial\": \"X\", \"short\": \"Xianning\" }, { \"id\": \"185\", \"provincecode\": \"430000\", \"city\": \"湘潭市\", \"code\": \"430300\", \"initial\": \"X\", \"short\": \"Xiangtan\" }, { \"id\": \"196\", \"provincecode\": \"430000\", \"city\": \"湘西土家族苗族自治州\", \"code\": \"433100\", \"initial\": \"X\", \"short\": \"Xiangxi\" }, { \"id\": \"279\", \"provincecode\": \"530000\", \"city\": \"西双版纳傣族自治州\", \"code\": \"532800\", \"initial\": \"X\", \"short\": \"Xishuangbanna\" }, { \"id\": \"291\", \"provincecode\": \"610000\", \"city\": \"西安市\", \"code\": \"610100\", \"initial\": \"X\", \"short\": \"Xian\" }, { \"id\": \"294\", \"provincecode\": \"610000\", \"city\": \"咸阳市\", \"code\": \"610400\", \"initial\": \"X\", \"short\": \"Xianyang\" }, { \"id\": \"315\", \"provincecode\": \"630000\", \"city\": \"西宁市\", \"code\": \"630100\", \"initial\": \"X\", \"short\": \"Xining\" }, { \"id\": \"15\", \"provincecode\": \"140000\", \"city\": \"阳泉市\", \"code\": \"140300\", \"initial\": \"Y\", \"short\": \"Yangquan\" }, { \"id\": \"20\", \"provincecode\": \"140000\", \"city\": \"运城市\", \"code\": \"140800\", \"initial\": \"Y\", \"short\": \"Yuncheng\" }, { \"id\": \"43\", \"provincecode\": \"210000\", \"city\": \"营口市\", \"code\": \"210800\", \"initial\": \"Y\", \"short\": \"Yingkou\" }, { \"id\": \"58\", \"provincecode\": \"220000\", \"city\": \"延边朝鲜族自治州\", \"code\": \"222400\", \"initial\": \"Y\", \"short\": \"Yanbian\" }, { \"id\": \"65\", \"provincecode\": \"230000\", \"city\": \"伊春市\", \"code\": \"230700\", \"initial\": \"Y\", \"short\": \"Yichun\" }, { \"id\": \"82\", \"provincecode\": \"320000\", \"city\": \"盐城市\", \"code\": \"320900\", \"initial\": \"Y\", \"short\": \"Yancheng\" }, { \"id\": \"83\", \"provincecode\": \"320000\", \"city\": \"扬州市\", \"code\": \"321000\", \"initial\": \"Y\", \"short\": \"Yangzhou\" }, { \"id\": \"129\", \"provincecode\": \"360000\", \"city\": \"鹰潭市\", \"code\": \"360600\", \"initial\": \"Y\", \"short\": \"Yingtan\" }, { \"id\": \"132\", \"provincecode\": \"360000\", \"city\": \"宜春市\", \"code\": \"360900\", \"initial\": \"Y\", \"short\": \"Yichun\" }, { \"id\": \"140\", \"provincecode\": \"370000\", \"city\": \"烟台市\", \"code\": \"370600\", \"initial\": \"Y\", \"short\": \"Yantai\" }, { \"id\": \"172\", \"provincecode\": \"420000\", \"city\": \"宜昌市\", \"code\": \"420500\", \"initial\": \"Y\", \"short\": \"Yichang\" }, { \"id\": \"188\", \"provincecode\": \"430000\", \"city\": \"岳阳市\", \"code\": \"430600\", \"initial\": \"Y\", \"short\": \"Yueyang\" }, { \"id\": \"191\", \"provincecode\": \"430000\", \"city\": \"益阳市\", \"code\": \"430900\", \"initial\": \"Y\", \"short\": \"Yiyang\" }, { \"id\": \"193\", \"provincecode\": \"430000\", \"city\": \"永州市\", \"code\": \"431100\", \"initial\": \"Y\", \"short\": \"Yongzhou\" }, { \"id\": \"211\", \"provincecode\": \"440000\", \"city\": \"阳江市\", \"code\": \"441700\", \"initial\": \"Y\", \"short\": \"Yangjiang\" }, { \"id\": \"217\", \"provincecode\": \"440000\", \"city\": \"云浮市\", \"code\": \"445300\", \"initial\": \"Y\", \"short\": \"Yunfu\" }, { \"id\": \"226\", \"provincecode\": \"450000\", \"city\": \"玉林市\", \"code\": \"450900\", \"initial\": \"Y\", \"short\": \"Yulin\" }, { \"id\": \"250\", \"provincecode\": \"510000\", \"city\": \"宜宾市\", \"code\": \"511500\", \"initial\": \"Y\", \"short\": \"Yibin\" }, { \"id\": \"253\", \"provincecode\": \"510000\", \"city\": \"雅安市\", \"code\": \"511800\", \"initial\": \"Y\", \"short\": \"Yaan\" }, { \"id\": \"270\", \"provincecode\": \"530000\", \"city\": \"玉溪市\", \"code\": \"530400\", \"initial\": \"Y\", \"short\": \"Yuxi\" }, { \"id\": \"296\", \"provincecode\": \"610000\", \"city\": \"延安市\", \"code\": \"610600\", \"initial\": \"Y\", \"short\": \"Yanan\" }, { \"id\": \"298\", \"provincecode\": \"610000\", \"city\": \"榆林市\", \"code\": \"610800\", \"initial\": \"Y\", \"short\": \"Yulin\" }, { \"id\": \"321\", \"provincecode\": \"630000\", \"city\": \"玉树藏族自治州\", \"code\": \"632700\", \"initial\": \"Y\", \"short\": \"Yushu\" }, { \"id\": \"323\", \"provincecode\": \"640000\", \"city\": \"银川市\", \"code\": \"640100\", \"initial\": \"Y\", \"short\": \"Yinchuan\" }, { \"id\": \"339\", \"provincecode\": \"650000\", \"city\": \"伊犁哈萨克自治州\", \"code\": \"654000\", \"initial\": \"Y\", \"short\": \"Yilihasake\" }, { \"id\": \"8\", \"provincecode\": \"130000\", \"city\": \"张家口市\", \"code\": \"130700\", \"initial\": \"Z\", \"short\": \"Zhangjiakou\" }, { \"id\": \"84\", \"provincecode\": \"320000\", \"city\": \"镇江市\", \"code\": \"321100\", \"initial\": \"Z\", \"short\": \"Zhenjiang\" }, { \"id\": \"95\", \"provincecode\": \"330000\", \"city\": \"舟山市\", \"code\": \"330900\", \"initial\": \"Z\", \"short\": \"Zhoushan\" }, { \"id\": \"120\", \"provincecode\": \"350000\", \"city\": \"漳州市\", \"code\": \"350600\", \"initial\": \"Z\", \"short\": \"Zhangzhou\" }, { \"id\": \"137\", \"provincecode\": \"370000\", \"city\": \"淄博市\", \"code\": \"370300\", \"initial\": \"Z\", \"short\": \"Zibo\" }, { \"id\": \"138\", \"provincecode\": \"370000\", \"city\": \"枣庄市\", \"code\": \"370400\", \"initial\": \"Z\", \"short\": \"Zaozhuang\" }, { \"id\": \"152\", \"provincecode\": \"410000\", \"city\": \"郑州市\", \"code\": \"410100\", \"initial\": \"Z\", \"short\": \"Zhengzhou\" }, { \"id\": \"167\", \"provincecode\": \"410000\", \"city\": \"周口市\", \"code\": \"411600\", \"initial\": \"Z\", \"short\": \"Zhoukou\" }, { \"id\": \"168\", \"provincecode\": \"410000\", \"city\": \"驻马店市\", \"code\": \"411700\", \"initial\": \"Z\", \"short\": \"Zhumadian\" }, { \"id\": \"184\", \"provincecode\": \"430000\", \"city\": \"株洲市\", \"code\": \"430200\", \"initial\": \"Z\", \"short\": \"Zhuzhou\" }, { \"id\": \"190\", \"provincecode\": \"430000\", \"city\": \"张家界市\", \"code\": \"430800\", \"initial\": \"Z\", \"short\": \"Zhangjiajie\" }, { \"id\": \"200\", \"provincecode\": \"440000\", \"city\": \"珠海市\", \"code\": \"440400\", \"initial\": \"Z\", \"short\": \"Zhuhai\" }, { \"id\": \"204\", \"provincecode\": \"440000\", \"city\": \"湛江市\", \"code\": \"440800\", \"initial\": \"Z\", \"short\": \"Zhanjiang\" }, { \"id\": \"206\", \"provincecode\": \"440000\", \"city\": \"肇庆市\", \"code\": \"441200\", \"initial\": \"Z\", \"short\": \"Zhaoqing\" }, { \"id\": \"214\", \"provincecode\": \"440000\", \"city\": \"中山市\", \"code\": \"442000\", \"initial\": \"Z\", \"short\": \"Zhongshan\" }, { \"id\": \"239\", \"provincecode\": \"510000\", \"city\": \"自贡市\", \"code\": \"510300\", \"initial\": \"Z\", \"short\": \"Zigong\" }, { \"id\": \"255\", \"provincecode\": \"510000\", \"city\": \"资阳市\", \"code\": \"512000\", \"initial\": \"Z\", \"short\": \"Ziyang\" }, { \"id\": \"261\", \"provincecode\": \"520000\", \"city\": \"遵义市\", \"code\": \"520300\", \"initial\": \"Z\", \"short\": \"Zunyi\" }, { \"id\": \"272\", \"provincecode\": \"530000\", \"city\": \"昭通市\", \"code\": \"530600\", \"initial\": \"Z\", \"short\": \"Zhaotong\" }, { \"id\": \"307\", \"provincecode\": \"620000\", \"city\": \"张掖市\", \"code\": \"620700\", \"initial\": \"Z\", \"short\": \"Zhangye\" }, { \"id\": \"327\", \"provincecode\": \"640000\", \"city\": \"中卫市\", \"code\": \"640500\", \"initial\": \"Z\", \"short\": \"Zhongwei\" }];exports.CITY_LIST = CITY_LIST;\n\nvar HOT_CITY_LIST = [{ cityCode: 110000, city: '北京市' }, { cityCode: 310000, city: '上海市' }, { cityCode: 440100, city: '广州市' }, { cityCode: 440300, city: '深圳市' }, { cityCode: 330100, city: '杭州市' }, { cityCode: 320100, city: '南京市' }, { cityCode: 420100, city: '武汉市' }, { cityCode: 120000, city: '天津市' }, { cityCode: 610100, city: '西安市' }];exports.HOT_CITY_LIST = HOT_CITY_LIST;\n\nvar CITY_NOT_FOUND = [{ city: '无匹配城市', code: \"000\" }];exports.CITY_NOT_FOUND = CITY_NOT_FOUND;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!**********************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/common/config.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" //应写入腾讯地图的key，并改文件名为config.js\nmodule.exports = {\n  key: \"ICTBZ-5SC3G-VG2QG-IMEEO-LBNQ3-KTFO4\" };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2NvbmZpZy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwia2V5Il0sIm1hcHBpbmdzIjoiQ0FBQTtBQUNBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsS0FBRyxFQUFFLHFDQURVLEVBQWpCIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy/lupTlhpnlhaXohb7orq/lnLDlm77nmoRrZXnvvIzlubbmlLnmlofku7blkI3kuLpjb25maWcuanNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBrZXk6IFwiSUNUQlotNVNDM0ctVkcyUUctSU1FRU8tTEJOUTMtS1RGTzRcIixcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 180:
/*!********************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/common/area.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"province_list\": { \"110000\": \"北京市\", \"120000\": \"天津市\", \"130000\": \"河北省\", \"140000\": \"山西省\", \"150000\": \"内蒙古自治区\", \"210000\": \"辽宁省\", \"220000\": \"吉林省\", \"230000\": \"黑龙江省\", \"310000\": \"上海市\", \"320000\": \"江苏省\", \"330000\": \"浙江省\", \"340000\": \"安徽省\", \"350000\": \"福建省\", \"360000\": \"江西省\", \"370000\": \"山东省\", \"410000\": \"河南省\", \"420000\": \"湖北省\", \"430000\": \"湖南省\", \"440000\": \"广东省\", \"450000\": \"广西壮族自治区\", \"460000\": \"海南省\", \"500000\": \"重庆市\", \"510000\": \"四川省\", \"520000\": \"贵州省\", \"530000\": \"云南省\", \"540000\": \"西藏自治区\", \"610000\": \"陕西省\", \"620000\": \"甘肃省\", \"630000\": \"青海省\", \"640000\": \"宁夏回族自治区\", \"650000\": \"新疆维吾尔自治区\", \"710000\": \"台湾省\", \"810000\": \"香港特别行政区\", \"820000\": \"澳门特别行政区\" }, \"city_list\": { \"110100\": \"北京市\", \"120100\": \"天津市\", \"130100\": \"石家庄市\", \"130200\": \"唐山市\", \"130300\": \"秦皇岛市\", \"130400\": \"邯郸市\", \"130500\": \"邢台市\", \"130600\": \"保定市\", \"130700\": \"张家口市\", \"130800\": \"承德市\", \"130900\": \"沧州市\", \"131000\": \"廊坊市\", \"131100\": \"衡水市\", \"140100\": \"太原市\", \"140200\": \"大同市\", \"140300\": \"阳泉市\", \"140400\": \"长治市\", \"140500\": \"晋城市\", \"140600\": \"朔州市\", \"140700\": \"晋中市\", \"140800\": \"运城市\", \"140900\": \"忻州市\", \"141000\": \"临汾市\", \"141100\": \"吕梁市\", \"150100\": \"呼和浩特市\", \"150200\": \"包头市\", \"150300\": \"乌海市\", \"150400\": \"赤峰市\", \"150500\": \"通辽市\", \"150600\": \"鄂尔多斯市\", \"150700\": \"呼伦贝尔市\", \"150800\": \"巴彦淖尔市\", \"150900\": \"乌兰察布市\", \"152200\": \"兴安盟\", \"152500\": \"锡林郭勒盟\", \"152900\": \"阿拉善盟\", \"210100\": \"沈阳市\", \"210200\": \"大连市\", \"210300\": \"鞍山市\", \"210400\": \"抚顺市\", \"210500\": \"本溪市\", \"210600\": \"丹东市\", \"210700\": \"锦州市\", \"210800\": \"营口市\", \"210900\": \"阜新市\", \"211000\": \"辽阳市\", \"211100\": \"盘锦市\", \"211200\": \"铁岭市\", \"211300\": \"朝阳市\", \"211400\": \"葫芦岛市\", \"220100\": \"长春市\", \"220200\": \"吉林市\", \"220300\": \"四平市\", \"220400\": \"辽源市\", \"220500\": \"通化市\", \"220600\": \"白山市\", \"220700\": \"松原市\", \"220800\": \"白城市\", \"222400\": \"延边朝鲜族自治州\", \"230100\": \"哈尔滨市\", \"230200\": \"齐齐哈尔市\", \"230300\": \"鸡西市\", \"230400\": \"鹤岗市\", \"230500\": \"双鸭山市\", \"230600\": \"大庆市\", \"230700\": \"伊春市\", \"230800\": \"佳木斯市\", \"230900\": \"七台河市\", \"231000\": \"牡丹江市\", \"231100\": \"黑河市\", \"231200\": \"绥化市\", \"232700\": \"大兴安岭地区\", \"310100\": \"上海市\", \"320100\": \"南京市\", \"320200\": \"无锡市\", \"320300\": \"徐州市\", \"320400\": \"常州市\", \"320500\": \"苏州市\", \"320600\": \"南通市\", \"320700\": \"连云港市\", \"320800\": \"淮安市\", \"320900\": \"盐城市\", \"321000\": \"扬州市\", \"321100\": \"镇江市\", \"321200\": \"泰州市\", \"321300\": \"宿迁市\", \"330100\": \"杭州市\", \"330200\": \"宁波市\", \"330300\": \"温州市\", \"330400\": \"嘉兴市\", \"330500\": \"湖州市\", \"330600\": \"绍兴市\", \"330700\": \"金华市\", \"330800\": \"衢州市\", \"330900\": \"舟山市\", \"331000\": \"台州市\", \"331100\": \"丽水市\", \"340100\": \"合肥市\", \"340200\": \"芜湖市\", \"340300\": \"蚌埠市\", \"340400\": \"淮南市\", \"340500\": \"马鞍山市\", \"340600\": \"淮北市\", \"340700\": \"铜陵市\", \"340800\": \"安庆市\", \"341000\": \"黄山市\", \"341100\": \"滁州市\", \"341200\": \"阜阳市\", \"341300\": \"宿州市\", \"341500\": \"六安市\", \"341600\": \"亳州市\", \"341700\": \"池州市\", \"341800\": \"宣城市\", \"350100\": \"福州市\", \"350200\": \"厦门市\", \"350300\": \"莆田市\", \"350400\": \"三明市\", \"350500\": \"泉州市\", \"350600\": \"漳州市\", \"350700\": \"南平市\", \"350800\": \"龙岩市\", \"350900\": \"宁德市\", \"360100\": \"南昌市\", \"360200\": \"景德镇市\", \"360300\": \"萍乡市\", \"360400\": \"九江市\", \"360500\": \"新余市\", \"360600\": \"鹰潭市\", \"360700\": \"赣州市\", \"360800\": \"吉安市\", \"360900\": \"宜春市\", \"361000\": \"抚州市\", \"361100\": \"上饶市\", \"370100\": \"济南市\", \"370200\": \"青岛市\", \"370300\": \"淄博市\", \"370400\": \"枣庄市\", \"370500\": \"东营市\", \"370600\": \"烟台市\", \"370700\": \"潍坊市\", \"370800\": \"济宁市\", \"370900\": \"泰安市\", \"371000\": \"威海市\", \"371100\": \"日照市\", \"371200\": \"莱芜市\", \"371300\": \"临沂市\", \"371400\": \"德州市\", \"371500\": \"聊城市\", \"371600\": \"滨州市\", \"371700\": \"菏泽市\", \"410100\": \"郑州市\", \"410200\": \"开封市\", \"410300\": \"洛阳市\", \"410400\": \"平顶山市\", \"410500\": \"安阳市\", \"410600\": \"鹤壁市\", \"410700\": \"新乡市\", \"410800\": \"焦作市\", \"410900\": \"濮阳市\", \"411000\": \"许昌市\", \"411100\": \"漯河市\", \"411200\": \"三门峡市\", \"411300\": \"南阳市\", \"411400\": \"商丘市\", \"411500\": \"信阳市\", \"411600\": \"周口市\", \"411700\": \"驻马店市\", \"419000\": \"省直辖县\", \"420100\": \"武汉市\", \"420200\": \"黄石市\", \"420300\": \"十堰市\", \"420500\": \"宜昌市\", \"420600\": \"襄阳市\", \"420700\": \"鄂州市\", \"420800\": \"荆门市\", \"420900\": \"孝感市\", \"421000\": \"荆州市\", \"421100\": \"黄冈市\", \"421200\": \"咸宁市\", \"421300\": \"随州市\", \"422800\": \"恩施土家族苗族自治州\", \"429000\": \"省直辖县\", \"430100\": \"长沙市\", \"430200\": \"株洲市\", \"430300\": \"湘潭市\", \"430400\": \"衡阳市\", \"430500\": \"邵阳市\", \"430600\": \"岳阳市\", \"430700\": \"常德市\", \"430800\": \"张家界市\", \"430900\": \"益阳市\", \"431000\": \"郴州市\", \"431100\": \"永州市\", \"431200\": \"怀化市\", \"431300\": \"娄底市\", \"433100\": \"湘西土家族苗族自治州\", \"440100\": \"广州市\", \"440200\": \"韶关市\", \"440300\": \"深圳市\", \"440400\": \"珠海市\", \"440500\": \"汕头市\", \"440600\": \"佛山市\", \"440700\": \"江门市\", \"440800\": \"湛江市\", \"440900\": \"茂名市\", \"441200\": \"肇庆市\", \"441300\": \"惠州市\", \"441400\": \"梅州市\", \"441500\": \"汕尾市\", \"441600\": \"河源市\", \"441700\": \"阳江市\", \"441800\": \"清远市\", \"441900\": \"东莞市\", \"442000\": \"中山市\", \"445100\": \"潮州市\", \"445200\": \"揭阳市\", \"445300\": \"云浮市\", \"450100\": \"南宁市\", \"450200\": \"柳州市\", \"450300\": \"桂林市\", \"450400\": \"梧州市\", \"450500\": \"北海市\", \"450600\": \"防城港市\", \"450700\": \"钦州市\", \"450800\": \"贵港市\", \"450900\": \"玉林市\", \"451000\": \"百色市\", \"451100\": \"贺州市\", \"451200\": \"河池市\", \"451300\": \"来宾市\", \"451400\": \"崇左市\", \"460100\": \"海口市\", \"460200\": \"三亚市\", \"460300\": \"三沙市\", \"460400\": \"儋州市\", \"469000\": \"省直辖县\", \"500100\": \"重庆市\", \"500200\": \"县\", \"510100\": \"成都市\", \"510300\": \"自贡市\", \"510400\": \"攀枝花市\", \"510500\": \"泸州市\", \"510600\": \"德阳市\", \"510700\": \"绵阳市\", \"510800\": \"广元市\", \"510900\": \"遂宁市\", \"511000\": \"内江市\", \"511100\": \"乐山市\", \"511300\": \"南充市\", \"511400\": \"眉山市\", \"511500\": \"宜宾市\", \"511600\": \"广安市\", \"511700\": \"达州市\", \"511800\": \"雅安市\", \"511900\": \"巴中市\", \"512000\": \"资阳市\", \"513200\": \"阿坝藏族羌族自治州\", \"513300\": \"甘孜藏族自治州\", \"513400\": \"凉山彝族自治州\", \"520100\": \"贵阳市\", \"520200\": \"六盘水市\", \"520300\": \"遵义市\", \"520400\": \"安顺市\", \"520500\": \"毕节市\", \"520600\": \"铜仁市\", \"522300\": \"黔西南布依族苗族自治州\", \"522600\": \"黔东南苗族侗族自治州\", \"522700\": \"黔南布依族苗族自治州\", \"530100\": \"昆明市\", \"530300\": \"曲靖市\", \"530400\": \"玉溪市\", \"530500\": \"保山市\", \"530600\": \"昭通市\", \"530700\": \"丽江市\", \"530800\": \"普洱市\", \"530900\": \"临沧市\", \"532300\": \"楚雄彝族自治州\", \"532500\": \"红河哈尼族彝族自治州\", \"532600\": \"文山壮族苗族自治州\", \"532800\": \"西双版纳傣族自治州\", \"532900\": \"大理白族自治州\", \"533100\": \"德宏傣族景颇族自治州\", \"533300\": \"怒江傈僳族自治州\", \"533400\": \"迪庆藏族自治州\", \"540100\": \"拉萨市\", \"540200\": \"日喀则市\", \"540300\": \"昌都市\", \"540400\": \"林芝市\", \"540500\": \"山南市\", \"540600\": \"那曲市\", \"542500\": \"阿里地区\", \"610100\": \"西安市\", \"610200\": \"铜川市\", \"610300\": \"宝鸡市\", \"610400\": \"咸阳市\", \"610500\": \"渭南市\", \"610600\": \"延安市\", \"610700\": \"汉中市\", \"610800\": \"榆林市\", \"610900\": \"安康市\", \"611000\": \"商洛市\", \"620100\": \"兰州市\", \"620200\": \"嘉峪关市\", \"620300\": \"金昌市\", \"620400\": \"白银市\", \"620500\": \"天水市\", \"620600\": \"武威市\", \"620700\": \"张掖市\", \"620800\": \"平凉市\", \"620900\": \"酒泉市\", \"621000\": \"庆阳市\", \"621100\": \"定西市\", \"621200\": \"陇南市\", \"622900\": \"临夏回族自治州\", \"623000\": \"甘南藏族自治州\", \"630100\": \"西宁市\", \"630200\": \"海东市\", \"632200\": \"海北藏族自治州\", \"632300\": \"黄南藏族自治州\", \"632500\": \"海南藏族自治州\", \"632600\": \"果洛藏族自治州\", \"632700\": \"玉树藏族自治州\", \"632800\": \"海西蒙古族藏族自治州\", \"640100\": \"银川市\", \"640200\": \"石嘴山市\", \"640300\": \"吴忠市\", \"640400\": \"固原市\", \"640500\": \"中卫市\", \"650100\": \"乌鲁木齐市\", \"650200\": \"克拉玛依市\", \"650400\": \"吐鲁番市\", \"650500\": \"哈密市\", \"652300\": \"昌吉回族自治州\", \"652700\": \"博尔塔拉蒙古自治州\", \"652800\": \"巴音郭楞蒙古自治州\", \"652900\": \"阿克苏地区\", \"653000\": \"克孜勒苏柯尔克孜自治州\", \"653100\": \"喀什地区\", \"653200\": \"和田地区\", \"654000\": \"伊犁哈萨克自治州\", \"654200\": \"塔城地区\", \"654300\": \"阿勒泰地区\", \"659000\": \"自治区直辖县级行政区划\", \"710100\": \"台北市\", \"710200\": \"高雄市\", \"710300\": \"台南市\", \"710400\": \"台中市\", \"710500\": \"金门县\", \"710600\": \"南投县\", \"710700\": \"基隆市\", \"710800\": \"新竹市\", \"710900\": \"嘉义市\", \"711100\": \"新北市\", \"711200\": \"宜兰县\", \"711300\": \"新竹县\", \"711400\": \"桃园县\", \"711500\": \"苗栗县\", \"711700\": \"彰化县\", \"711900\": \"嘉义县\", \"712100\": \"云林县\", \"712400\": \"屏东县\", \"712500\": \"台东县\", \"712600\": \"花莲县\", \"712700\": \"澎湖县\", \"712800\": \"连江县\", \"810100\": \"香港岛\", \"810200\": \"九龙\", \"810300\": \"新界\", \"820100\": \"澳门半岛\", \"820200\": \"离岛\" }, \"county_list\": { \"110101\": \"东城区\", \"110102\": \"西城区\", \"110105\": \"朝阳区\", \"110106\": \"丰台区\", \"110107\": \"石景山区\", \"110108\": \"海淀区\", \"110109\": \"门头沟区\", \"110111\": \"房山区\", \"110112\": \"通州区\", \"110113\": \"顺义区\", \"110114\": \"昌平区\", \"110115\": \"大兴区\", \"110116\": \"怀柔区\", \"110117\": \"平谷区\", \"110118\": \"密云区\", \"110119\": \"延庆区\", \"120101\": \"和平区\", \"120102\": \"河东区\", \"120103\": \"河西区\", \"120104\": \"南开区\", \"120105\": \"河北区\", \"120106\": \"红桥区\", \"120110\": \"东丽区\", \"120111\": \"西青区\", \"120112\": \"津南区\", \"120113\": \"北辰区\", \"120114\": \"武清区\", \"120115\": \"宝坻区\", \"120116\": \"滨海新区\", \"120117\": \"宁河区\", \"120118\": \"静海区\", \"120119\": \"蓟州区\", \"130102\": \"长安区\", \"130104\": \"桥西区\", \"130105\": \"新华区\", \"130107\": \"井陉矿区\", \"130108\": \"裕华区\", \"130109\": \"藁城区\", \"130110\": \"鹿泉区\", \"130111\": \"栾城区\", \"130121\": \"井陉县\", \"130123\": \"正定县\", \"130125\": \"行唐县\", \"130126\": \"灵寿县\", \"130127\": \"高邑县\", \"130128\": \"深泽县\", \"130129\": \"赞皇县\", \"130130\": \"无极县\", \"130131\": \"平山县\", \"130132\": \"元氏县\", \"130133\": \"赵县\", \"130181\": \"辛集市\", \"130183\": \"晋州市\", \"130184\": \"新乐市\", \"130202\": \"路南区\", \"130203\": \"路北区\", \"130204\": \"古冶区\", \"130205\": \"开平区\", \"130207\": \"丰南区\", \"130208\": \"丰润区\", \"130209\": \"曹妃甸区\", \"130224\": \"滦南县\", \"130225\": \"乐亭县\", \"130227\": \"迁西县\", \"130229\": \"玉田县\", \"130281\": \"遵化市\", \"130283\": \"迁安市\", \"130284\": \"滦州市\", \"130302\": \"海港区\", \"130303\": \"山海关区\", \"130304\": \"北戴河区\", \"130306\": \"抚宁区\", \"130321\": \"青龙满族自治县\", \"130322\": \"昌黎县\", \"130324\": \"卢龙县\", \"130390\": \"经济技术开发区\", \"130402\": \"邯山区\", \"130403\": \"丛台区\", \"130404\": \"复兴区\", \"130406\": \"峰峰矿区\", \"130407\": \"肥乡区\", \"130408\": \"永年区\", \"130423\": \"临漳县\", \"130424\": \"成安县\", \"130425\": \"大名县\", \"130426\": \"涉县\", \"130427\": \"磁县\", \"130430\": \"邱县\", \"130431\": \"鸡泽县\", \"130432\": \"广平县\", \"130433\": \"馆陶县\", \"130434\": \"魏县\", \"130435\": \"曲周县\", \"130481\": \"武安市\", \"130502\": \"桥东区\", \"130503\": \"桥西区\", \"130521\": \"邢台县\", \"130522\": \"临城县\", \"130523\": \"内丘县\", \"130524\": \"柏乡县\", \"130525\": \"隆尧县\", \"130526\": \"任县\", \"130527\": \"南和县\", \"130528\": \"宁晋县\", \"130529\": \"巨鹿县\", \"130530\": \"新河县\", \"130531\": \"广宗县\", \"130532\": \"平乡县\", \"130533\": \"威县\", \"130534\": \"清河县\", \"130535\": \"临西县\", \"130581\": \"南宫市\", \"130582\": \"沙河市\", \"130602\": \"竞秀区\", \"130606\": \"莲池区\", \"130607\": \"满城区\", \"130608\": \"清苑区\", \"130609\": \"徐水区\", \"130623\": \"涞水县\", \"130624\": \"阜平县\", \"130626\": \"定兴县\", \"130627\": \"唐县\", \"130628\": \"高阳县\", \"130629\": \"容城县\", \"130630\": \"涞源县\", \"130631\": \"望都县\", \"130632\": \"安新县\", \"130633\": \"易县\", \"130634\": \"曲阳县\", \"130635\": \"蠡县\", \"130636\": \"顺平县\", \"130637\": \"博野县\", \"130638\": \"雄县\", \"130681\": \"涿州市\", \"130682\": \"定州市\", \"130683\": \"安国市\", \"130684\": \"高碑店市\", \"130702\": \"桥东区\", \"130703\": \"桥西区\", \"130705\": \"宣化区\", \"130706\": \"下花园区\", \"130708\": \"万全区\", \"130709\": \"崇礼区\", \"130722\": \"张北县\", \"130723\": \"康保县\", \"130724\": \"沽源县\", \"130725\": \"尚义县\", \"130726\": \"蔚县\", \"130727\": \"阳原县\", \"130728\": \"怀安县\", \"130730\": \"怀来县\", \"130731\": \"涿鹿县\", \"130732\": \"赤城县\", \"130802\": \"双桥区\", \"130803\": \"双滦区\", \"130804\": \"鹰手营子矿区\", \"130821\": \"承德县\", \"130822\": \"兴隆县\", \"130824\": \"滦平县\", \"130825\": \"隆化县\", \"130826\": \"丰宁满族自治县\", \"130827\": \"宽城满族自治县\", \"130828\": \"围场满族蒙古族自治县\", \"130881\": \"平泉市\", \"130902\": \"新华区\", \"130903\": \"运河区\", \"130921\": \"沧县\", \"130922\": \"青县\", \"130923\": \"东光县\", \"130924\": \"海兴县\", \"130925\": \"盐山县\", \"130926\": \"肃宁县\", \"130927\": \"南皮县\", \"130928\": \"吴桥县\", \"130929\": \"献县\", \"130930\": \"孟村回族自治县\", \"130981\": \"泊头市\", \"130982\": \"任丘市\", \"130983\": \"黄骅市\", \"130984\": \"河间市\", \"131002\": \"安次区\", \"131003\": \"广阳区\", \"131022\": \"固安县\", \"131023\": \"永清县\", \"131024\": \"香河县\", \"131025\": \"大城县\", \"131026\": \"文安县\", \"131028\": \"大厂回族自治县\", \"131081\": \"霸州市\", \"131082\": \"三河市\", \"131090\": \"开发区\", \"131102\": \"桃城区\", \"131103\": \"冀州区\", \"131121\": \"枣强县\", \"131122\": \"武邑县\", \"131123\": \"武强县\", \"131124\": \"饶阳县\", \"131125\": \"安平县\", \"131126\": \"故城县\", \"131127\": \"景县\", \"131128\": \"阜城县\", \"131182\": \"深州市\", \"140105\": \"小店区\", \"140106\": \"迎泽区\", \"140107\": \"杏花岭区\", \"140108\": \"尖草坪区\", \"140109\": \"万柏林区\", \"140110\": \"晋源区\", \"140121\": \"清徐县\", \"140122\": \"阳曲县\", \"140123\": \"娄烦县\", \"140181\": \"古交市\", \"140212\": \"新荣区\", \"140213\": \"平城区\", \"140214\": \"云冈区\", \"140215\": \"云州区\", \"140221\": \"阳高县\", \"140222\": \"天镇县\", \"140223\": \"广灵县\", \"140224\": \"灵丘县\", \"140225\": \"浑源县\", \"140226\": \"左云县\", \"140302\": \"城区\", \"140303\": \"矿区\", \"140311\": \"郊区\", \"140321\": \"平定县\", \"140322\": \"盂县\", \"140403\": \"潞州区\", \"140404\": \"上党区\", \"140405\": \"屯留区\", \"140406\": \"潞城区\", \"140423\": \"襄垣县\", \"140425\": \"平顺县\", \"140426\": \"黎城县\", \"140427\": \"壶关县\", \"140428\": \"长子县\", \"140429\": \"武乡县\", \"140430\": \"沁县\", \"140431\": \"沁源县\", \"140502\": \"城区\", \"140521\": \"沁水县\", \"140522\": \"阳城县\", \"140524\": \"陵川县\", \"140525\": \"泽州县\", \"140581\": \"高平市\", \"140602\": \"朔城区\", \"140603\": \"平鲁区\", \"140621\": \"山阴县\", \"140622\": \"应县\", \"140623\": \"右玉县\", \"140681\": \"怀仁市\", \"140702\": \"榆次区\", \"140721\": \"榆社县\", \"140722\": \"左权县\", \"140723\": \"和顺县\", \"140724\": \"昔阳县\", \"140725\": \"寿阳县\", \"140726\": \"太谷县\", \"140727\": \"祁县\", \"140728\": \"平遥县\", \"140729\": \"灵石县\", \"140781\": \"介休市\", \"140802\": \"盐湖区\", \"140821\": \"临猗县\", \"140822\": \"万荣县\", \"140823\": \"闻喜县\", \"140824\": \"稷山县\", \"140825\": \"新绛县\", \"140826\": \"绛县\", \"140827\": \"垣曲县\", \"140828\": \"夏县\", \"140829\": \"平陆县\", \"140830\": \"芮城县\", \"140881\": \"永济市\", \"140882\": \"河津市\", \"140902\": \"忻府区\", \"140921\": \"定襄县\", \"140922\": \"五台县\", \"140923\": \"代县\", \"140924\": \"繁峙县\", \"140925\": \"宁武县\", \"140926\": \"静乐县\", \"140927\": \"神池县\", \"140928\": \"五寨县\", \"140929\": \"岢岚县\", \"140930\": \"河曲县\", \"140931\": \"保德县\", \"140932\": \"偏关县\", \"140981\": \"原平市\", \"141002\": \"尧都区\", \"141021\": \"曲沃县\", \"141022\": \"翼城县\", \"141023\": \"襄汾县\", \"141024\": \"洪洞县\", \"141025\": \"古县\", \"141026\": \"安泽县\", \"141027\": \"浮山县\", \"141028\": \"吉县\", \"141029\": \"乡宁县\", \"141030\": \"大宁县\", \"141031\": \"隰县\", \"141032\": \"永和县\", \"141033\": \"蒲县\", \"141034\": \"汾西县\", \"141081\": \"侯马市\", \"141082\": \"霍州市\", \"141102\": \"离石区\", \"141121\": \"文水县\", \"141122\": \"交城县\", \"141123\": \"兴县\", \"141124\": \"临县\", \"141125\": \"柳林县\", \"141126\": \"石楼县\", \"141127\": \"岚县\", \"141128\": \"方山县\", \"141129\": \"中阳县\", \"141130\": \"交口县\", \"141181\": \"孝义市\", \"141182\": \"汾阳市\", \"150102\": \"新城区\", \"150103\": \"回民区\", \"150104\": \"玉泉区\", \"150105\": \"赛罕区\", \"150121\": \"土默特左旗\", \"150122\": \"托克托县\", \"150123\": \"和林格尔县\", \"150124\": \"清水河县\", \"150125\": \"武川县\", \"150202\": \"东河区\", \"150203\": \"昆都仑区\", \"150204\": \"青山区\", \"150205\": \"石拐区\", \"150206\": \"白云鄂博矿区\", \"150207\": \"九原区\", \"150221\": \"土默特右旗\", \"150222\": \"固阳县\", \"150223\": \"达尔罕茂明安联合旗\", \"150302\": \"海勃湾区\", \"150303\": \"海南区\", \"150304\": \"乌达区\", \"150402\": \"红山区\", \"150403\": \"元宝山区\", \"150404\": \"松山区\", \"150421\": \"阿鲁科尔沁旗\", \"150422\": \"巴林左旗\", \"150423\": \"巴林右旗\", \"150424\": \"林西县\", \"150425\": \"克什克腾旗\", \"150426\": \"翁牛特旗\", \"150428\": \"喀喇沁旗\", \"150429\": \"宁城县\", \"150430\": \"敖汉旗\", \"150502\": \"科尔沁区\", \"150521\": \"科尔沁左翼中旗\", \"150522\": \"科尔沁左翼后旗\", \"150523\": \"开鲁县\", \"150524\": \"库伦旗\", \"150525\": \"奈曼旗\", \"150526\": \"扎鲁特旗\", \"150581\": \"霍林郭勒市\", \"150602\": \"东胜区\", \"150603\": \"康巴什区\", \"150621\": \"达拉特旗\", \"150622\": \"准格尔旗\", \"150623\": \"鄂托克前旗\", \"150624\": \"鄂托克旗\", \"150625\": \"杭锦旗\", \"150626\": \"乌审旗\", \"150627\": \"伊金霍洛旗\", \"150702\": \"海拉尔区\", \"150703\": \"扎赉诺尔区\", \"150721\": \"阿荣旗\", \"150722\": \"莫力达瓦达斡尔族自治旗\", \"150723\": \"鄂伦春自治旗\", \"150724\": \"鄂温克族自治旗\", \"150725\": \"陈巴尔虎旗\", \"150726\": \"新巴尔虎左旗\", \"150727\": \"新巴尔虎右旗\", \"150781\": \"满洲里市\", \"150782\": \"牙克石市\", \"150783\": \"扎兰屯市\", \"150784\": \"额尔古纳市\", \"150785\": \"根河市\", \"150802\": \"临河区\", \"150821\": \"五原县\", \"150822\": \"磴口县\", \"150823\": \"乌拉特前旗\", \"150824\": \"乌拉特中旗\", \"150825\": \"乌拉特后旗\", \"150826\": \"杭锦后旗\", \"150902\": \"集宁区\", \"150921\": \"卓资县\", \"150922\": \"化德县\", \"150923\": \"商都县\", \"150924\": \"兴和县\", \"150925\": \"凉城县\", \"150926\": \"察哈尔右翼前旗\", \"150927\": \"察哈尔右翼中旗\", \"150928\": \"察哈尔右翼后旗\", \"150929\": \"四子王旗\", \"150981\": \"丰镇市\", \"152201\": \"乌兰浩特市\", \"152202\": \"阿尔山市\", \"152221\": \"科尔沁右翼前旗\", \"152222\": \"科尔沁右翼中旗\", \"152223\": \"扎赉特旗\", \"152224\": \"突泉县\", \"152501\": \"二连浩特市\", \"152502\": \"锡林浩特市\", \"152522\": \"阿巴嘎旗\", \"152523\": \"苏尼特左旗\", \"152524\": \"苏尼特右旗\", \"152525\": \"东乌珠穆沁旗\", \"152526\": \"西乌珠穆沁旗\", \"152527\": \"太仆寺旗\", \"152528\": \"镶黄旗\", \"152529\": \"正镶白旗\", \"152530\": \"正蓝旗\", \"152531\": \"多伦县\", \"152921\": \"阿拉善左旗\", \"152922\": \"阿拉善右旗\", \"152923\": \"额济纳旗\", \"210102\": \"和平区\", \"210103\": \"沈河区\", \"210104\": \"大东区\", \"210105\": \"皇姑区\", \"210106\": \"铁西区\", \"210111\": \"苏家屯区\", \"210112\": \"浑南区\", \"210113\": \"沈北新区\", \"210114\": \"于洪区\", \"210115\": \"辽中区\", \"210123\": \"康平县\", \"210124\": \"法库县\", \"210181\": \"新民市\", \"210190\": \"经济技术开发区\", \"210202\": \"中山区\", \"210203\": \"西岗区\", \"210204\": \"沙河口区\", \"210211\": \"甘井子区\", \"210212\": \"旅顺口区\", \"210213\": \"金州区\", \"210214\": \"普兰店区\", \"210224\": \"长海县\", \"210281\": \"瓦房店市\", \"210283\": \"庄河市\", \"210302\": \"铁东区\", \"210303\": \"铁西区\", \"210304\": \"立山区\", \"210311\": \"千山区\", \"210321\": \"台安县\", \"210323\": \"岫岩满族自治县\", \"210381\": \"海城市\", \"210390\": \"高新区\", \"210402\": \"新抚区\", \"210403\": \"东洲区\", \"210404\": \"望花区\", \"210411\": \"顺城区\", \"210421\": \"抚顺县\", \"210422\": \"新宾满族自治县\", \"210423\": \"清原满族自治县\", \"210502\": \"平山区\", \"210503\": \"溪湖区\", \"210504\": \"明山区\", \"210505\": \"南芬区\", \"210521\": \"本溪满族自治县\", \"210522\": \"桓仁满族自治县\", \"210602\": \"元宝区\", \"210603\": \"振兴区\", \"210604\": \"振安区\", \"210624\": \"宽甸满族自治县\", \"210681\": \"东港市\", \"210682\": \"凤城市\", \"210702\": \"古塔区\", \"210703\": \"凌河区\", \"210711\": \"太和区\", \"210726\": \"黑山县\", \"210727\": \"义县\", \"210781\": \"凌海市\", \"210782\": \"北镇市\", \"210793\": \"经济技术开发区\", \"210802\": \"站前区\", \"210803\": \"西市区\", \"210804\": \"鲅鱼圈区\", \"210811\": \"老边区\", \"210881\": \"盖州市\", \"210882\": \"大石桥市\", \"210902\": \"海州区\", \"210903\": \"新邱区\", \"210904\": \"太平区\", \"210905\": \"清河门区\", \"210911\": \"细河区\", \"210921\": \"阜新蒙古族自治县\", \"210922\": \"彰武县\", \"211002\": \"白塔区\", \"211003\": \"文圣区\", \"211004\": \"宏伟区\", \"211005\": \"弓长岭区\", \"211011\": \"太子河区\", \"211021\": \"辽阳县\", \"211081\": \"灯塔市\", \"211102\": \"双台子区\", \"211103\": \"兴隆台区\", \"211104\": \"大洼区\", \"211122\": \"盘山县\", \"211202\": \"银州区\", \"211204\": \"清河区\", \"211221\": \"铁岭县\", \"211223\": \"西丰县\", \"211224\": \"昌图县\", \"211281\": \"调兵山市\", \"211282\": \"开原市\", \"211302\": \"双塔区\", \"211303\": \"龙城区\", \"211321\": \"朝阳县\", \"211322\": \"建平县\", \"211324\": \"喀喇沁左翼蒙古族自治县\", \"211381\": \"北票市\", \"211382\": \"凌源市\", \"211402\": \"连山区\", \"211403\": \"龙港区\", \"211404\": \"南票区\", \"211421\": \"绥中县\", \"211422\": \"建昌县\", \"211481\": \"兴城市\", \"220102\": \"南关区\", \"220103\": \"宽城区\", \"220104\": \"朝阳区\", \"220105\": \"二道区\", \"220106\": \"绿园区\", \"220112\": \"双阳区\", \"220113\": \"九台区\", \"220122\": \"农安县\", \"220182\": \"榆树市\", \"220183\": \"德惠市\", \"220192\": \"经济技术开发区\", \"220202\": \"昌邑区\", \"220203\": \"龙潭区\", \"220204\": \"船营区\", \"220211\": \"丰满区\", \"220221\": \"永吉县\", \"220281\": \"蛟河市\", \"220282\": \"桦甸市\", \"220283\": \"舒兰市\", \"220284\": \"磐石市\", \"220302\": \"铁西区\", \"220303\": \"铁东区\", \"220322\": \"梨树县\", \"220323\": \"伊通满族自治县\", \"220381\": \"公主岭市\", \"220382\": \"双辽市\", \"220402\": \"龙山区\", \"220403\": \"西安区\", \"220421\": \"东丰县\", \"220422\": \"东辽县\", \"220502\": \"东昌区\", \"220503\": \"二道江区\", \"220521\": \"通化县\", \"220523\": \"辉南县\", \"220524\": \"柳河县\", \"220581\": \"梅河口市\", \"220582\": \"集安市\", \"220602\": \"浑江区\", \"220605\": \"江源区\", \"220621\": \"抚松县\", \"220622\": \"靖宇县\", \"220623\": \"长白朝鲜族自治县\", \"220681\": \"临江市\", \"220702\": \"宁江区\", \"220721\": \"前郭尔罗斯蒙古族自治县\", \"220722\": \"长岭县\", \"220723\": \"乾安县\", \"220781\": \"扶余市\", \"220802\": \"洮北区\", \"220821\": \"镇赉县\", \"220822\": \"通榆县\", \"220881\": \"洮南市\", \"220882\": \"大安市\", \"222401\": \"延吉市\", \"222402\": \"图们市\", \"222403\": \"敦化市\", \"222404\": \"珲春市\", \"222405\": \"龙井市\", \"222406\": \"和龙市\", \"222424\": \"汪清县\", \"222426\": \"安图县\", \"230102\": \"道里区\", \"230103\": \"南岗区\", \"230104\": \"道外区\", \"230108\": \"平房区\", \"230109\": \"松北区\", \"230110\": \"香坊区\", \"230111\": \"呼兰区\", \"230112\": \"阿城区\", \"230113\": \"双城区\", \"230123\": \"依兰县\", \"230124\": \"方正县\", \"230125\": \"宾县\", \"230126\": \"巴彦县\", \"230127\": \"木兰县\", \"230128\": \"通河县\", \"230129\": \"延寿县\", \"230183\": \"尚志市\", \"230184\": \"五常市\", \"230202\": \"龙沙区\", \"230203\": \"建华区\", \"230204\": \"铁锋区\", \"230205\": \"昂昂溪区\", \"230206\": \"富拉尔基区\", \"230207\": \"碾子山区\", \"230208\": \"梅里斯达斡尔族区\", \"230221\": \"龙江县\", \"230223\": \"依安县\", \"230224\": \"泰来县\", \"230225\": \"甘南县\", \"230227\": \"富裕县\", \"230229\": \"克山县\", \"230230\": \"克东县\", \"230231\": \"拜泉县\", \"230281\": \"讷河市\", \"230302\": \"鸡冠区\", \"230303\": \"恒山区\", \"230304\": \"滴道区\", \"230305\": \"梨树区\", \"230306\": \"城子河区\", \"230307\": \"麻山区\", \"230321\": \"鸡东县\", \"230381\": \"虎林市\", \"230382\": \"密山市\", \"230402\": \"向阳区\", \"230403\": \"工农区\", \"230404\": \"南山区\", \"230405\": \"兴安区\", \"230406\": \"东山区\", \"230407\": \"兴山区\", \"230421\": \"萝北县\", \"230422\": \"绥滨县\", \"230502\": \"尖山区\", \"230503\": \"岭东区\", \"230505\": \"四方台区\", \"230506\": \"宝山区\", \"230521\": \"集贤县\", \"230522\": \"友谊县\", \"230523\": \"宝清县\", \"230524\": \"饶河县\", \"230602\": \"萨尔图区\", \"230603\": \"龙凤区\", \"230604\": \"让胡路区\", \"230605\": \"红岗区\", \"230606\": \"大同区\", \"230621\": \"肇州县\", \"230622\": \"肇源县\", \"230623\": \"林甸县\", \"230624\": \"杜尔伯特蒙古族自治县\", \"230702\": \"伊春区\", \"230703\": \"南岔区\", \"230704\": \"友好区\", \"230705\": \"西林区\", \"230706\": \"翠峦区\", \"230707\": \"新青区\", \"230708\": \"美溪区\", \"230709\": \"金山屯区\", \"230710\": \"五营区\", \"230711\": \"乌马河区\", \"230712\": \"汤旺河区\", \"230713\": \"带岭区\", \"230714\": \"乌伊岭区\", \"230715\": \"红星区\", \"230716\": \"上甘岭区\", \"230722\": \"嘉荫县\", \"230781\": \"铁力市\", \"230803\": \"向阳区\", \"230804\": \"前进区\", \"230805\": \"东风区\", \"230811\": \"郊区\", \"230822\": \"桦南县\", \"230826\": \"桦川县\", \"230828\": \"汤原县\", \"230881\": \"同江市\", \"230882\": \"富锦市\", \"230883\": \"抚远市\", \"230902\": \"新兴区\", \"230903\": \"桃山区\", \"230904\": \"茄子河区\", \"230921\": \"勃利县\", \"231002\": \"东安区\", \"231003\": \"阳明区\", \"231004\": \"爱民区\", \"231005\": \"西安区\", \"231025\": \"林口县\", \"231081\": \"绥芬河市\", \"231083\": \"海林市\", \"231084\": \"宁安市\", \"231085\": \"穆棱市\", \"231086\": \"东宁市\", \"231102\": \"爱辉区\", \"231121\": \"嫩江县\", \"231123\": \"逊克县\", \"231124\": \"孙吴县\", \"231181\": \"北安市\", \"231182\": \"五大连池市\", \"231202\": \"北林区\", \"231221\": \"望奎县\", \"231222\": \"兰西县\", \"231223\": \"青冈县\", \"231224\": \"庆安县\", \"231225\": \"明水县\", \"231226\": \"绥棱县\", \"231281\": \"安达市\", \"231282\": \"肇东市\", \"231283\": \"海伦市\", \"232701\": \"漠河市\", \"232721\": \"呼玛县\", \"232722\": \"塔河县\", \"232790\": \"松岭区\", \"232791\": \"呼中区\", \"232792\": \"加格达奇区\", \"232793\": \"新林区\", \"310101\": \"黄浦区\", \"310104\": \"徐汇区\", \"310105\": \"长宁区\", \"310106\": \"静安区\", \"310107\": \"普陀区\", \"310109\": \"虹口区\", \"310110\": \"杨浦区\", \"310112\": \"闵行区\", \"310113\": \"宝山区\", \"310114\": \"嘉定区\", \"310115\": \"浦东新区\", \"310116\": \"金山区\", \"310117\": \"松江区\", \"310118\": \"青浦区\", \"310120\": \"奉贤区\", \"310151\": \"崇明区\", \"320102\": \"玄武区\", \"320104\": \"秦淮区\", \"320105\": \"建邺区\", \"320106\": \"鼓楼区\", \"320111\": \"浦口区\", \"320113\": \"栖霞区\", \"320114\": \"雨花台区\", \"320115\": \"江宁区\", \"320116\": \"六合区\", \"320117\": \"溧水区\", \"320118\": \"高淳区\", \"320205\": \"锡山区\", \"320206\": \"惠山区\", \"320211\": \"滨湖区\", \"320213\": \"梁溪区\", \"320214\": \"新吴区\", \"320281\": \"江阴市\", \"320282\": \"宜兴市\", \"320302\": \"鼓楼区\", \"320303\": \"云龙区\", \"320305\": \"贾汪区\", \"320311\": \"泉山区\", \"320312\": \"铜山区\", \"320321\": \"丰县\", \"320322\": \"沛县\", \"320324\": \"睢宁县\", \"320381\": \"新沂市\", \"320382\": \"邳州市\", \"320391\": \"工业园区\", \"320402\": \"天宁区\", \"320404\": \"钟楼区\", \"320411\": \"新北区\", \"320412\": \"武进区\", \"320413\": \"金坛区\", \"320481\": \"溧阳市\", \"320505\": \"虎丘区\", \"320506\": \"吴中区\", \"320507\": \"相城区\", \"320508\": \"姑苏区\", \"320509\": \"吴江区\", \"320581\": \"常熟市\", \"320582\": \"张家港市\", \"320583\": \"昆山市\", \"320585\": \"太仓市\", \"320590\": \"工业园区\", \"320591\": \"高新区\", \"320602\": \"崇川区\", \"320611\": \"港闸区\", \"320612\": \"通州区\", \"320623\": \"如东县\", \"320681\": \"启东市\", \"320682\": \"如皋市\", \"320684\": \"海门市\", \"320685\": \"海安市\", \"320691\": \"高新区\", \"320703\": \"连云区\", \"320706\": \"海州区\", \"320707\": \"赣榆区\", \"320722\": \"东海县\", \"320723\": \"灌云县\", \"320724\": \"灌南县\", \"320803\": \"淮安区\", \"320804\": \"淮阴区\", \"320812\": \"清江浦区\", \"320813\": \"洪泽区\", \"320826\": \"涟水县\", \"320830\": \"盱眙县\", \"320831\": \"金湖县\", \"320890\": \"经济开发区\", \"320902\": \"亭湖区\", \"320903\": \"盐都区\", \"320904\": \"大丰区\", \"320921\": \"响水县\", \"320922\": \"滨海县\", \"320923\": \"阜宁县\", \"320924\": \"射阳县\", \"320925\": \"建湖县\", \"320981\": \"东台市\", \"321002\": \"广陵区\", \"321003\": \"邗江区\", \"321012\": \"江都区\", \"321023\": \"宝应县\", \"321081\": \"仪征市\", \"321084\": \"高邮市\", \"321090\": \"经济开发区\", \"321102\": \"京口区\", \"321111\": \"润州区\", \"321112\": \"丹徒区\", \"321181\": \"丹阳市\", \"321182\": \"扬中市\", \"321183\": \"句容市\", \"321202\": \"海陵区\", \"321203\": \"高港区\", \"321204\": \"姜堰区\", \"321281\": \"兴化市\", \"321282\": \"靖江市\", \"321283\": \"泰兴市\", \"321302\": \"宿城区\", \"321311\": \"宿豫区\", \"321322\": \"沭阳县\", \"321323\": \"泗阳县\", \"321324\": \"泗洪县\", \"330102\": \"上城区\", \"330103\": \"下城区\", \"330104\": \"江干区\", \"330105\": \"拱墅区\", \"330106\": \"西湖区\", \"330108\": \"滨江区\", \"330109\": \"萧山区\", \"330110\": \"余杭区\", \"330111\": \"富阳区\", \"330112\": \"临安区\", \"330122\": \"桐庐县\", \"330127\": \"淳安县\", \"330182\": \"建德市\", \"330203\": \"海曙区\", \"330205\": \"江北区\", \"330206\": \"北仑区\", \"330211\": \"镇海区\", \"330212\": \"鄞州区\", \"330213\": \"奉化区\", \"330225\": \"象山县\", \"330226\": \"宁海县\", \"330281\": \"余姚市\", \"330282\": \"慈溪市\", \"330302\": \"鹿城区\", \"330303\": \"龙湾区\", \"330304\": \"瓯海区\", \"330305\": \"洞头区\", \"330324\": \"永嘉县\", \"330326\": \"平阳县\", \"330327\": \"苍南县\", \"330328\": \"文成县\", \"330329\": \"泰顺县\", \"330381\": \"瑞安市\", \"330382\": \"乐清市\", \"330402\": \"南湖区\", \"330411\": \"秀洲区\", \"330421\": \"嘉善县\", \"330424\": \"海盐县\", \"330481\": \"海宁市\", \"330482\": \"平湖市\", \"330483\": \"桐乡市\", \"330502\": \"吴兴区\", \"330503\": \"南浔区\", \"330521\": \"德清县\", \"330522\": \"长兴县\", \"330523\": \"安吉县\", \"330602\": \"越城区\", \"330603\": \"柯桥区\", \"330604\": \"上虞区\", \"330624\": \"新昌县\", \"330681\": \"诸暨市\", \"330683\": \"嵊州市\", \"330702\": \"婺城区\", \"330703\": \"金东区\", \"330723\": \"武义县\", \"330726\": \"浦江县\", \"330727\": \"磐安县\", \"330781\": \"兰溪市\", \"330782\": \"义乌市\", \"330783\": \"东阳市\", \"330784\": \"永康市\", \"330802\": \"柯城区\", \"330803\": \"衢江区\", \"330822\": \"常山县\", \"330824\": \"开化县\", \"330825\": \"龙游县\", \"330881\": \"江山市\", \"330902\": \"定海区\", \"330903\": \"普陀区\", \"330921\": \"岱山县\", \"330922\": \"嵊泗县\", \"331002\": \"椒江区\", \"331003\": \"黄岩区\", \"331004\": \"路桥区\", \"331022\": \"三门县\", \"331023\": \"天台县\", \"331024\": \"仙居县\", \"331081\": \"温岭市\", \"331082\": \"临海市\", \"331083\": \"玉环市\", \"331102\": \"莲都区\", \"331121\": \"青田县\", \"331122\": \"缙云县\", \"331123\": \"遂昌县\", \"331124\": \"松阳县\", \"331125\": \"云和县\", \"331126\": \"庆元县\", \"331127\": \"景宁畲族自治县\", \"331181\": \"龙泉市\", \"340102\": \"瑶海区\", \"340103\": \"庐阳区\", \"340104\": \"蜀山区\", \"340111\": \"包河区\", \"340121\": \"长丰县\", \"340122\": \"肥东县\", \"340123\": \"肥西县\", \"340124\": \"庐江县\", \"340181\": \"巢湖市\", \"340190\": \"高新技术开发区\", \"340191\": \"经济技术开发区\", \"340202\": \"镜湖区\", \"340203\": \"弋江区\", \"340207\": \"鸠江区\", \"340208\": \"三山区\", \"340221\": \"芜湖县\", \"340222\": \"繁昌县\", \"340223\": \"南陵县\", \"340225\": \"无为县\", \"340302\": \"龙子湖区\", \"340303\": \"蚌山区\", \"340304\": \"禹会区\", \"340311\": \"淮上区\", \"340321\": \"怀远县\", \"340322\": \"五河县\", \"340323\": \"固镇县\", \"340402\": \"大通区\", \"340403\": \"田家庵区\", \"340404\": \"谢家集区\", \"340405\": \"八公山区\", \"340406\": \"潘集区\", \"340421\": \"凤台县\", \"340422\": \"寿县\", \"340503\": \"花山区\", \"340504\": \"雨山区\", \"340506\": \"博望区\", \"340521\": \"当涂县\", \"340522\": \"含山县\", \"340523\": \"和县\", \"340602\": \"杜集区\", \"340603\": \"相山区\", \"340604\": \"烈山区\", \"340621\": \"濉溪县\", \"340705\": \"铜官区\", \"340706\": \"义安区\", \"340711\": \"郊区\", \"340722\": \"枞阳县\", \"340802\": \"迎江区\", \"340803\": \"大观区\", \"340811\": \"宜秀区\", \"340822\": \"怀宁县\", \"340824\": \"潜山县\", \"340825\": \"太湖县\", \"340826\": \"宿松县\", \"340827\": \"望江县\", \"340828\": \"岳西县\", \"340881\": \"桐城市\", \"341002\": \"屯溪区\", \"341003\": \"黄山区\", \"341004\": \"徽州区\", \"341021\": \"歙县\", \"341022\": \"休宁县\", \"341023\": \"黟县\", \"341024\": \"祁门县\", \"341102\": \"琅琊区\", \"341103\": \"南谯区\", \"341122\": \"来安县\", \"341124\": \"全椒县\", \"341125\": \"定远县\", \"341126\": \"凤阳县\", \"341181\": \"天长市\", \"341182\": \"明光市\", \"341202\": \"颍州区\", \"341203\": \"颍东区\", \"341204\": \"颍泉区\", \"341221\": \"临泉县\", \"341222\": \"太和县\", \"341225\": \"阜南县\", \"341226\": \"颍上县\", \"341282\": \"界首市\", \"341302\": \"埇桥区\", \"341321\": \"砀山县\", \"341322\": \"萧县\", \"341323\": \"灵璧县\", \"341324\": \"泗县\", \"341390\": \"经济开发区\", \"341502\": \"金安区\", \"341503\": \"裕安区\", \"341504\": \"叶集区\", \"341522\": \"霍邱县\", \"341523\": \"舒城县\", \"341524\": \"金寨县\", \"341525\": \"霍山县\", \"341602\": \"谯城区\", \"341621\": \"涡阳县\", \"341622\": \"蒙城县\", \"341623\": \"利辛县\", \"341702\": \"贵池区\", \"341721\": \"东至县\", \"341722\": \"石台县\", \"341723\": \"青阳县\", \"341802\": \"宣州区\", \"341821\": \"郎溪县\", \"341822\": \"广德县\", \"341823\": \"泾县\", \"341824\": \"绩溪县\", \"341825\": \"旌德县\", \"341881\": \"宁国市\", \"350102\": \"鼓楼区\", \"350103\": \"台江区\", \"350104\": \"仓山区\", \"350105\": \"马尾区\", \"350111\": \"晋安区\", \"350112\": \"长乐区\", \"350121\": \"闽侯县\", \"350122\": \"连江县\", \"350123\": \"罗源县\", \"350124\": \"闽清县\", \"350125\": \"永泰县\", \"350128\": \"平潭县\", \"350181\": \"福清市\", \"350203\": \"思明区\", \"350205\": \"海沧区\", \"350206\": \"湖里区\", \"350211\": \"集美区\", \"350212\": \"同安区\", \"350213\": \"翔安区\", \"350302\": \"城厢区\", \"350303\": \"涵江区\", \"350304\": \"荔城区\", \"350305\": \"秀屿区\", \"350322\": \"仙游县\", \"350402\": \"梅列区\", \"350403\": \"三元区\", \"350421\": \"明溪县\", \"350423\": \"清流县\", \"350424\": \"宁化县\", \"350425\": \"大田县\", \"350426\": \"尤溪县\", \"350427\": \"沙县\", \"350428\": \"将乐县\", \"350429\": \"泰宁县\", \"350430\": \"建宁县\", \"350481\": \"永安市\", \"350502\": \"鲤城区\", \"350503\": \"丰泽区\", \"350504\": \"洛江区\", \"350505\": \"泉港区\", \"350521\": \"惠安县\", \"350524\": \"安溪县\", \"350525\": \"永春县\", \"350526\": \"德化县\", \"350527\": \"金门县\", \"350581\": \"石狮市\", \"350582\": \"晋江市\", \"350583\": \"南安市\", \"350602\": \"芗城区\", \"350603\": \"龙文区\", \"350622\": \"云霄县\", \"350623\": \"漳浦县\", \"350624\": \"诏安县\", \"350625\": \"长泰县\", \"350626\": \"东山县\", \"350627\": \"南靖县\", \"350628\": \"平和县\", \"350629\": \"华安县\", \"350681\": \"龙海市\", \"350702\": \"延平区\", \"350703\": \"建阳区\", \"350721\": \"顺昌县\", \"350722\": \"浦城县\", \"350723\": \"光泽县\", \"350724\": \"松溪县\", \"350725\": \"政和县\", \"350781\": \"邵武市\", \"350782\": \"武夷山市\", \"350783\": \"建瓯市\", \"350802\": \"新罗区\", \"350803\": \"永定区\", \"350821\": \"长汀县\", \"350823\": \"上杭县\", \"350824\": \"武平县\", \"350825\": \"连城县\", \"350881\": \"漳平市\", \"350902\": \"蕉城区\", \"350921\": \"霞浦县\", \"350922\": \"古田县\", \"350923\": \"屏南县\", \"350924\": \"寿宁县\", \"350925\": \"周宁县\", \"350926\": \"柘荣县\", \"350981\": \"福安市\", \"350982\": \"福鼎市\", \"360102\": \"东湖区\", \"360103\": \"西湖区\", \"360104\": \"青云谱区\", \"360105\": \"湾里区\", \"360111\": \"青山湖区\", \"360112\": \"新建区\", \"360121\": \"南昌县\", \"360123\": \"安义县\", \"360124\": \"进贤县\", \"360190\": \"经济技术开发区\", \"360192\": \"高新区\", \"360202\": \"昌江区\", \"360203\": \"珠山区\", \"360222\": \"浮梁县\", \"360281\": \"乐平市\", \"360302\": \"安源区\", \"360313\": \"湘东区\", \"360321\": \"莲花县\", \"360322\": \"上栗县\", \"360323\": \"芦溪县\", \"360402\": \"濂溪区\", \"360403\": \"浔阳区\", \"360404\": \"柴桑区\", \"360423\": \"武宁县\", \"360424\": \"修水县\", \"360425\": \"永修县\", \"360426\": \"德安县\", \"360428\": \"都昌县\", \"360429\": \"湖口县\", \"360430\": \"彭泽县\", \"360481\": \"瑞昌市\", \"360482\": \"共青城市\", \"360483\": \"庐山市\", \"360490\": \"经济技术开发区\", \"360502\": \"渝水区\", \"360521\": \"分宜县\", \"360602\": \"月湖区\", \"360603\": \"余江区\", \"360681\": \"贵溪市\", \"360702\": \"章贡区\", \"360703\": \"南康区\", \"360704\": \"赣县区\", \"360722\": \"信丰县\", \"360723\": \"大余县\", \"360724\": \"上犹县\", \"360725\": \"崇义县\", \"360726\": \"安远县\", \"360727\": \"龙南县\", \"360728\": \"定南县\", \"360729\": \"全南县\", \"360730\": \"宁都县\", \"360731\": \"于都县\", \"360732\": \"兴国县\", \"360733\": \"会昌县\", \"360734\": \"寻乌县\", \"360735\": \"石城县\", \"360781\": \"瑞金市\", \"360802\": \"吉州区\", \"360803\": \"青原区\", \"360821\": \"吉安县\", \"360822\": \"吉水县\", \"360823\": \"峡江县\", \"360824\": \"新干县\", \"360825\": \"永丰县\", \"360826\": \"泰和县\", \"360827\": \"遂川县\", \"360828\": \"万安县\", \"360829\": \"安福县\", \"360830\": \"永新县\", \"360881\": \"井冈山市\", \"360902\": \"袁州区\", \"360921\": \"奉新县\", \"360922\": \"万载县\", \"360923\": \"上高县\", \"360924\": \"宜丰县\", \"360925\": \"靖安县\", \"360926\": \"铜鼓县\", \"360981\": \"丰城市\", \"360982\": \"樟树市\", \"360983\": \"高安市\", \"361002\": \"临川区\", \"361003\": \"东乡区\", \"361021\": \"南城县\", \"361022\": \"黎川县\", \"361023\": \"南丰县\", \"361024\": \"崇仁县\", \"361025\": \"乐安县\", \"361026\": \"宜黄县\", \"361027\": \"金溪县\", \"361028\": \"资溪县\", \"361030\": \"广昌县\", \"361102\": \"信州区\", \"361103\": \"广丰区\", \"361121\": \"上饶县\", \"361123\": \"玉山县\", \"361124\": \"铅山县\", \"361125\": \"横峰县\", \"361126\": \"弋阳县\", \"361127\": \"余干县\", \"361128\": \"鄱阳县\", \"361129\": \"万年县\", \"361130\": \"婺源县\", \"361181\": \"德兴市\", \"370102\": \"历下区\", \"370103\": \"市中区\", \"370104\": \"槐荫区\", \"370105\": \"天桥区\", \"370112\": \"历城区\", \"370113\": \"长清区\", \"370114\": \"章丘区\", \"370115\": \"济阳区\", \"370124\": \"平阴县\", \"370126\": \"商河县\", \"370190\": \"高新区\", \"370202\": \"市南区\", \"370203\": \"市北区\", \"370211\": \"黄岛区\", \"370212\": \"崂山区\", \"370213\": \"李沧区\", \"370214\": \"城阳区\", \"370215\": \"即墨区\", \"370281\": \"胶州市\", \"370283\": \"平度市\", \"370285\": \"莱西市\", \"370290\": \"开发区\", \"370302\": \"淄川区\", \"370303\": \"张店区\", \"370304\": \"博山区\", \"370305\": \"临淄区\", \"370306\": \"周村区\", \"370321\": \"桓台县\", \"370322\": \"高青县\", \"370323\": \"沂源县\", \"370402\": \"市中区\", \"370403\": \"薛城区\", \"370404\": \"峄城区\", \"370405\": \"台儿庄区\", \"370406\": \"山亭区\", \"370481\": \"滕州市\", \"370502\": \"东营区\", \"370503\": \"河口区\", \"370505\": \"垦利区\", \"370522\": \"利津县\", \"370523\": \"广饶县\", \"370602\": \"芝罘区\", \"370611\": \"福山区\", \"370612\": \"牟平区\", \"370613\": \"莱山区\", \"370634\": \"长岛县\", \"370681\": \"龙口市\", \"370682\": \"莱阳市\", \"370683\": \"莱州市\", \"370684\": \"蓬莱市\", \"370685\": \"招远市\", \"370686\": \"栖霞市\", \"370687\": \"海阳市\", \"370690\": \"开发区\", \"370702\": \"潍城区\", \"370703\": \"寒亭区\", \"370704\": \"坊子区\", \"370705\": \"奎文区\", \"370724\": \"临朐县\", \"370725\": \"昌乐县\", \"370781\": \"青州市\", \"370782\": \"诸城市\", \"370783\": \"寿光市\", \"370784\": \"安丘市\", \"370785\": \"高密市\", \"370786\": \"昌邑市\", \"370790\": \"开发区\", \"370791\": \"高新区\", \"370811\": \"任城区\", \"370812\": \"兖州区\", \"370826\": \"微山县\", \"370827\": \"鱼台县\", \"370828\": \"金乡县\", \"370829\": \"嘉祥县\", \"370830\": \"汶上县\", \"370831\": \"泗水县\", \"370832\": \"梁山县\", \"370881\": \"曲阜市\", \"370883\": \"邹城市\", \"370890\": \"高新区\", \"370902\": \"泰山区\", \"370911\": \"岱岳区\", \"370921\": \"宁阳县\", \"370923\": \"东平县\", \"370982\": \"新泰市\", \"370983\": \"肥城市\", \"371002\": \"环翠区\", \"371003\": \"文登区\", \"371082\": \"荣成市\", \"371083\": \"乳山市\", \"371091\": \"经济技术开发区\", \"371102\": \"东港区\", \"371103\": \"岚山区\", \"371121\": \"五莲县\", \"371122\": \"莒县\", \"371202\": \"莱城区\", \"371203\": \"钢城区\", \"371302\": \"兰山区\", \"371311\": \"罗庄区\", \"371312\": \"河东区\", \"371321\": \"沂南县\", \"371322\": \"郯城县\", \"371323\": \"沂水县\", \"371324\": \"兰陵县\", \"371325\": \"费县\", \"371326\": \"平邑县\", \"371327\": \"莒南县\", \"371328\": \"蒙阴县\", \"371329\": \"临沭县\", \"371402\": \"德城区\", \"371403\": \"陵城区\", \"371422\": \"宁津县\", \"371423\": \"庆云县\", \"371424\": \"临邑县\", \"371425\": \"齐河县\", \"371426\": \"平原县\", \"371427\": \"夏津县\", \"371428\": \"武城县\", \"371481\": \"乐陵市\", \"371482\": \"禹城市\", \"371502\": \"东昌府区\", \"371521\": \"阳谷县\", \"371522\": \"莘县\", \"371523\": \"茌平县\", \"371524\": \"东阿县\", \"371525\": \"冠县\", \"371526\": \"高唐县\", \"371581\": \"临清市\", \"371602\": \"滨城区\", \"371603\": \"沾化区\", \"371621\": \"惠民县\", \"371622\": \"阳信县\", \"371623\": \"无棣县\", \"371625\": \"博兴县\", \"371681\": \"邹平市\", \"371702\": \"牡丹区\", \"371703\": \"定陶区\", \"371721\": \"曹县\", \"371722\": \"单县\", \"371723\": \"成武县\", \"371724\": \"巨野县\", \"371725\": \"郓城县\", \"371726\": \"鄄城县\", \"371728\": \"东明县\", \"410102\": \"中原区\", \"410103\": \"二七区\", \"410104\": \"管城回族区\", \"410105\": \"金水区\", \"410106\": \"上街区\", \"410108\": \"惠济区\", \"410122\": \"中牟县\", \"410181\": \"巩义市\", \"410182\": \"荥阳市\", \"410183\": \"新密市\", \"410184\": \"新郑市\", \"410185\": \"登封市\", \"410190\": \"高新技术开发区\", \"410191\": \"经济技术开发区\", \"410202\": \"龙亭区\", \"410203\": \"顺河回族区\", \"410204\": \"鼓楼区\", \"410205\": \"禹王台区\", \"410212\": \"祥符区\", \"410221\": \"杞县\", \"410222\": \"通许县\", \"410223\": \"尉氏县\", \"410225\": \"兰考县\", \"410302\": \"老城区\", \"410303\": \"西工区\", \"410304\": \"瀍河回族区\", \"410305\": \"涧西区\", \"410306\": \"吉利区\", \"410311\": \"洛龙区\", \"410322\": \"孟津县\", \"410323\": \"新安县\", \"410324\": \"栾川县\", \"410325\": \"嵩县\", \"410326\": \"汝阳县\", \"410327\": \"宜阳县\", \"410328\": \"洛宁县\", \"410329\": \"伊川县\", \"410381\": \"偃师市\", \"410402\": \"新华区\", \"410403\": \"卫东区\", \"410404\": \"石龙区\", \"410411\": \"湛河区\", \"410421\": \"宝丰县\", \"410422\": \"叶县\", \"410423\": \"鲁山县\", \"410425\": \"郏县\", \"410481\": \"舞钢市\", \"410482\": \"汝州市\", \"410502\": \"文峰区\", \"410503\": \"北关区\", \"410505\": \"殷都区\", \"410506\": \"龙安区\", \"410522\": \"安阳县\", \"410523\": \"汤阴县\", \"410526\": \"滑县\", \"410527\": \"内黄县\", \"410581\": \"林州市\", \"410590\": \"开发区\", \"410602\": \"鹤山区\", \"410603\": \"山城区\", \"410611\": \"淇滨区\", \"410621\": \"浚县\", \"410622\": \"淇县\", \"410702\": \"红旗区\", \"410703\": \"卫滨区\", \"410704\": \"凤泉区\", \"410711\": \"牧野区\", \"410721\": \"新乡县\", \"410724\": \"获嘉县\", \"410725\": \"原阳县\", \"410726\": \"延津县\", \"410727\": \"封丘县\", \"410728\": \"长垣县\", \"410781\": \"卫辉市\", \"410782\": \"辉县市\", \"410802\": \"解放区\", \"410803\": \"中站区\", \"410804\": \"马村区\", \"410811\": \"山阳区\", \"410821\": \"修武县\", \"410822\": \"博爱县\", \"410823\": \"武陟县\", \"410825\": \"温县\", \"410882\": \"沁阳市\", \"410883\": \"孟州市\", \"410902\": \"华龙区\", \"410922\": \"清丰县\", \"410923\": \"南乐县\", \"410926\": \"范县\", \"410927\": \"台前县\", \"410928\": \"濮阳县\", \"411002\": \"魏都区\", \"411003\": \"建安区\", \"411024\": \"鄢陵县\", \"411025\": \"襄城县\", \"411081\": \"禹州市\", \"411082\": \"长葛市\", \"411102\": \"源汇区\", \"411103\": \"郾城区\", \"411104\": \"召陵区\", \"411121\": \"舞阳县\", \"411122\": \"临颍县\", \"411202\": \"湖滨区\", \"411203\": \"陕州区\", \"411221\": \"渑池县\", \"411224\": \"卢氏县\", \"411281\": \"义马市\", \"411282\": \"灵宝市\", \"411302\": \"宛城区\", \"411303\": \"卧龙区\", \"411321\": \"南召县\", \"411322\": \"方城县\", \"411323\": \"西峡县\", \"411324\": \"镇平县\", \"411325\": \"内乡县\", \"411326\": \"淅川县\", \"411327\": \"社旗县\", \"411328\": \"唐河县\", \"411329\": \"新野县\", \"411330\": \"桐柏县\", \"411381\": \"邓州市\", \"411402\": \"梁园区\", \"411403\": \"睢阳区\", \"411421\": \"民权县\", \"411422\": \"睢县\", \"411423\": \"宁陵县\", \"411424\": \"柘城县\", \"411425\": \"虞城县\", \"411426\": \"夏邑县\", \"411481\": \"永城市\", \"411502\": \"浉河区\", \"411503\": \"平桥区\", \"411521\": \"罗山县\", \"411522\": \"光山县\", \"411523\": \"新县\", \"411524\": \"商城县\", \"411525\": \"固始县\", \"411526\": \"潢川县\", \"411527\": \"淮滨县\", \"411528\": \"息县\", \"411602\": \"川汇区\", \"411621\": \"扶沟县\", \"411622\": \"西华县\", \"411623\": \"商水县\", \"411624\": \"沈丘县\", \"411625\": \"郸城县\", \"411626\": \"淮阳县\", \"411627\": \"太康县\", \"411628\": \"鹿邑县\", \"411681\": \"项城市\", \"411690\": \"经济开发区\", \"411702\": \"驿城区\", \"411721\": \"西平县\", \"411722\": \"上蔡县\", \"411723\": \"平舆县\", \"411724\": \"正阳县\", \"411725\": \"确山县\", \"411726\": \"泌阳县\", \"411727\": \"汝南县\", \"411728\": \"遂平县\", \"411729\": \"新蔡县\", \"419001\": \"济源市\", \"420102\": \"江岸区\", \"420103\": \"江汉区\", \"420104\": \"硚口区\", \"420105\": \"汉阳区\", \"420106\": \"武昌区\", \"420107\": \"青山区\", \"420111\": \"洪山区\", \"420112\": \"东西湖区\", \"420113\": \"汉南区\", \"420114\": \"蔡甸区\", \"420115\": \"江夏区\", \"420116\": \"黄陂区\", \"420117\": \"新洲区\", \"420202\": \"黄石港区\", \"420203\": \"西塞山区\", \"420204\": \"下陆区\", \"420205\": \"铁山区\", \"420222\": \"阳新县\", \"420281\": \"大冶市\", \"420302\": \"茅箭区\", \"420303\": \"张湾区\", \"420304\": \"郧阳区\", \"420322\": \"郧西县\", \"420323\": \"竹山县\", \"420324\": \"竹溪县\", \"420325\": \"房县\", \"420381\": \"丹江口市\", \"420502\": \"西陵区\", \"420503\": \"伍家岗区\", \"420504\": \"点军区\", \"420505\": \"猇亭区\", \"420506\": \"夷陵区\", \"420525\": \"远安县\", \"420526\": \"兴山县\", \"420527\": \"秭归县\", \"420528\": \"长阳土家族自治县\", \"420529\": \"五峰土家族自治县\", \"420581\": \"宜都市\", \"420582\": \"当阳市\", \"420583\": \"枝江市\", \"420590\": \"经济开发区\", \"420602\": \"襄城区\", \"420606\": \"樊城区\", \"420607\": \"襄州区\", \"420624\": \"南漳县\", \"420625\": \"谷城县\", \"420626\": \"保康县\", \"420682\": \"老河口市\", \"420683\": \"枣阳市\", \"420684\": \"宜城市\", \"420702\": \"梁子湖区\", \"420703\": \"华容区\", \"420704\": \"鄂城区\", \"420802\": \"东宝区\", \"420804\": \"掇刀区\", \"420822\": \"沙洋县\", \"420881\": \"钟祥市\", \"420882\": \"京山市\", \"420902\": \"孝南区\", \"420921\": \"孝昌县\", \"420922\": \"大悟县\", \"420923\": \"云梦县\", \"420981\": \"应城市\", \"420982\": \"安陆市\", \"420984\": \"汉川市\", \"421002\": \"沙市区\", \"421003\": \"荆州区\", \"421022\": \"公安县\", \"421023\": \"监利县\", \"421024\": \"江陵县\", \"421081\": \"石首市\", \"421083\": \"洪湖市\", \"421087\": \"松滋市\", \"421102\": \"黄州区\", \"421121\": \"团风县\", \"421122\": \"红安县\", \"421123\": \"罗田县\", \"421124\": \"英山县\", \"421125\": \"浠水县\", \"421126\": \"蕲春县\", \"421127\": \"黄梅县\", \"421181\": \"麻城市\", \"421182\": \"武穴市\", \"421202\": \"咸安区\", \"421221\": \"嘉鱼县\", \"421222\": \"通城县\", \"421223\": \"崇阳县\", \"421224\": \"通山县\", \"421281\": \"赤壁市\", \"421303\": \"曾都区\", \"421321\": \"随县\", \"421381\": \"广水市\", \"422801\": \"恩施市\", \"422802\": \"利川市\", \"422822\": \"建始县\", \"422823\": \"巴东县\", \"422825\": \"宣恩县\", \"422826\": \"咸丰县\", \"422827\": \"来凤县\", \"422828\": \"鹤峰县\", \"429004\": \"仙桃市\", \"429005\": \"潜江市\", \"429006\": \"天门市\", \"429021\": \"神农架林区\", \"430102\": \"芙蓉区\", \"430103\": \"天心区\", \"430104\": \"岳麓区\", \"430105\": \"开福区\", \"430111\": \"雨花区\", \"430112\": \"望城区\", \"430121\": \"长沙县\", \"430181\": \"浏阳市\", \"430182\": \"宁乡市\", \"430202\": \"荷塘区\", \"430203\": \"芦淞区\", \"430204\": \"石峰区\", \"430211\": \"天元区\", \"430212\": \"渌口区\", \"430223\": \"攸县\", \"430224\": \"茶陵县\", \"430225\": \"炎陵县\", \"430281\": \"醴陵市\", \"430302\": \"雨湖区\", \"430304\": \"岳塘区\", \"430321\": \"湘潭县\", \"430381\": \"湘乡市\", \"430382\": \"韶山市\", \"430405\": \"珠晖区\", \"430406\": \"雁峰区\", \"430407\": \"石鼓区\", \"430408\": \"蒸湘区\", \"430412\": \"南岳区\", \"430421\": \"衡阳县\", \"430422\": \"衡南县\", \"430423\": \"衡山县\", \"430424\": \"衡东县\", \"430426\": \"祁东县\", \"430481\": \"耒阳市\", \"430482\": \"常宁市\", \"430502\": \"双清区\", \"430503\": \"大祥区\", \"430511\": \"北塔区\", \"430521\": \"邵东县\", \"430522\": \"新邵县\", \"430523\": \"邵阳县\", \"430524\": \"隆回县\", \"430525\": \"洞口县\", \"430527\": \"绥宁县\", \"430528\": \"新宁县\", \"430529\": \"城步苗族自治县\", \"430581\": \"武冈市\", \"430602\": \"岳阳楼区\", \"430603\": \"云溪区\", \"430611\": \"君山区\", \"430621\": \"岳阳县\", \"430623\": \"华容县\", \"430624\": \"湘阴县\", \"430626\": \"平江县\", \"430681\": \"汨罗市\", \"430682\": \"临湘市\", \"430702\": \"武陵区\", \"430703\": \"鼎城区\", \"430721\": \"安乡县\", \"430722\": \"汉寿县\", \"430723\": \"澧县\", \"430724\": \"临澧县\", \"430725\": \"桃源县\", \"430726\": \"石门县\", \"430781\": \"津市市\", \"430802\": \"永定区\", \"430811\": \"武陵源区\", \"430821\": \"慈利县\", \"430822\": \"桑植县\", \"430902\": \"资阳区\", \"430903\": \"赫山区\", \"430921\": \"南县\", \"430922\": \"桃江县\", \"430923\": \"安化县\", \"430981\": \"沅江市\", \"431002\": \"北湖区\", \"431003\": \"苏仙区\", \"431021\": \"桂阳县\", \"431022\": \"宜章县\", \"431023\": \"永兴县\", \"431024\": \"嘉禾县\", \"431025\": \"临武县\", \"431026\": \"汝城县\", \"431027\": \"桂东县\", \"431028\": \"安仁县\", \"431081\": \"资兴市\", \"431102\": \"零陵区\", \"431103\": \"冷水滩区\", \"431121\": \"祁阳县\", \"431122\": \"东安县\", \"431123\": \"双牌县\", \"431124\": \"道县\", \"431125\": \"江永县\", \"431126\": \"宁远县\", \"431127\": \"蓝山县\", \"431128\": \"新田县\", \"431129\": \"江华瑶族自治县\", \"431202\": \"鹤城区\", \"431221\": \"中方县\", \"431222\": \"沅陵县\", \"431223\": \"辰溪县\", \"431224\": \"溆浦县\", \"431225\": \"会同县\", \"431226\": \"麻阳苗族自治县\", \"431227\": \"新晃侗族自治县\", \"431228\": \"芷江侗族自治县\", \"431229\": \"靖州苗族侗族自治县\", \"431230\": \"通道侗族自治县\", \"431281\": \"洪江市\", \"431302\": \"娄星区\", \"431321\": \"双峰县\", \"431322\": \"新化县\", \"431381\": \"冷水江市\", \"431382\": \"涟源市\", \"433101\": \"吉首市\", \"433122\": \"泸溪县\", \"433123\": \"凤凰县\", \"433124\": \"花垣县\", \"433125\": \"保靖县\", \"433126\": \"古丈县\", \"433127\": \"永顺县\", \"433130\": \"龙山县\", \"440103\": \"荔湾区\", \"440104\": \"越秀区\", \"440105\": \"海珠区\", \"440106\": \"天河区\", \"440111\": \"白云区\", \"440112\": \"黄埔区\", \"440113\": \"番禺区\", \"440114\": \"花都区\", \"440115\": \"南沙区\", \"440117\": \"从化区\", \"440118\": \"增城区\", \"440203\": \"武江区\", \"440204\": \"浈江区\", \"440205\": \"曲江区\", \"440222\": \"始兴县\", \"440224\": \"仁化县\", \"440229\": \"翁源县\", \"440232\": \"乳源瑶族自治县\", \"440233\": \"新丰县\", \"440281\": \"乐昌市\", \"440282\": \"南雄市\", \"440303\": \"罗湖区\", \"440304\": \"福田区\", \"440305\": \"南山区\", \"440306\": \"宝安区\", \"440307\": \"龙岗区\", \"440308\": \"盐田区\", \"440309\": \"龙华区\", \"440310\": \"坪山区\", \"440311\": \"光明区\", \"440402\": \"香洲区\", \"440403\": \"斗门区\", \"440404\": \"金湾区\", \"440507\": \"龙湖区\", \"440511\": \"金平区\", \"440512\": \"濠江区\", \"440513\": \"潮阳区\", \"440514\": \"潮南区\", \"440515\": \"澄海区\", \"440523\": \"南澳县\", \"440604\": \"禅城区\", \"440605\": \"南海区\", \"440606\": \"顺德区\", \"440607\": \"三水区\", \"440608\": \"高明区\", \"440703\": \"蓬江区\", \"440704\": \"江海区\", \"440705\": \"新会区\", \"440781\": \"台山市\", \"440783\": \"开平市\", \"440784\": \"鹤山市\", \"440785\": \"恩平市\", \"440802\": \"赤坎区\", \"440803\": \"霞山区\", \"440804\": \"坡头区\", \"440811\": \"麻章区\", \"440823\": \"遂溪县\", \"440825\": \"徐闻县\", \"440881\": \"廉江市\", \"440882\": \"雷州市\", \"440883\": \"吴川市\", \"440890\": \"经济技术开发区\", \"440902\": \"茂南区\", \"440904\": \"电白区\", \"440981\": \"高州市\", \"440982\": \"化州市\", \"440983\": \"信宜市\", \"441202\": \"端州区\", \"441203\": \"鼎湖区\", \"441204\": \"高要区\", \"441223\": \"广宁县\", \"441224\": \"怀集县\", \"441225\": \"封开县\", \"441226\": \"德庆县\", \"441284\": \"四会市\", \"441302\": \"惠城区\", \"441303\": \"惠阳区\", \"441322\": \"博罗县\", \"441323\": \"惠东县\", \"441324\": \"龙门县\", \"441402\": \"梅江区\", \"441403\": \"梅县区\", \"441422\": \"大埔县\", \"441423\": \"丰顺县\", \"441424\": \"五华县\", \"441426\": \"平远县\", \"441427\": \"蕉岭县\", \"441481\": \"兴宁市\", \"441502\": \"城区\", \"441521\": \"海丰县\", \"441523\": \"陆河县\", \"441581\": \"陆丰市\", \"441602\": \"源城区\", \"441621\": \"紫金县\", \"441622\": \"龙川县\", \"441623\": \"连平县\", \"441624\": \"和平县\", \"441625\": \"东源县\", \"441702\": \"江城区\", \"441704\": \"阳东区\", \"441721\": \"阳西县\", \"441781\": \"阳春市\", \"441802\": \"清城区\", \"441803\": \"清新区\", \"441821\": \"佛冈县\", \"441823\": \"阳山县\", \"441825\": \"连山壮族瑶族自治县\", \"441826\": \"连南瑶族自治县\", \"441881\": \"英德市\", \"441882\": \"连州市\", \"441901\": \"中堂镇\", \"441903\": \"南城街道办事处\", \"441904\": \"长安镇\", \"441905\": \"东坑镇\", \"441906\": \"樟木头镇\", \"441907\": \"莞城街道办事处\", \"441908\": \"石龙镇\", \"441909\": \"桥头镇\", \"441910\": \"万江街道办事处\", \"441911\": \"麻涌镇\", \"441912\": \"虎门镇\", \"441913\": \"谢岗镇\", \"441914\": \"石碣镇\", \"441915\": \"茶山镇\", \"441916\": \"东城街道办事处\", \"441917\": \"洪梅镇\", \"441918\": \"道滘镇\", \"441919\": \"高埗镇\", \"441920\": \"企石镇\", \"441921\": \"凤岗镇\", \"441922\": \"大岭山镇\", \"441923\": \"松山湖管委会\", \"441924\": \"清溪镇\", \"441925\": \"望牛墩镇\", \"441926\": \"厚街镇\", \"441927\": \"常平镇\", \"441928\": \"寮步镇\", \"441929\": \"石排镇\", \"441930\": \"横沥镇\", \"441931\": \"塘厦镇\", \"441932\": \"黄江镇\", \"441933\": \"大朗镇\", \"441934\": \"东莞港\", \"441935\": \"东莞生态园\", \"441990\": \"沙田镇\", \"442001\": \"南头镇\", \"442002\": \"神湾镇\", \"442003\": \"东凤镇\", \"442004\": \"五桂山街道办事处\", \"442005\": \"黄圃镇\", \"442006\": \"小榄镇\", \"442007\": \"石岐区街道办事处\", \"442008\": \"横栏镇\", \"442009\": \"三角镇\", \"442010\": \"三乡镇\", \"442011\": \"港口镇\", \"442012\": \"沙溪镇\", \"442013\": \"板芙镇\", \"442015\": \"东升镇\", \"442016\": \"阜沙镇\", \"442017\": \"民众镇\", \"442018\": \"东区街道办事处\", \"442019\": \"火炬开发区街道办事处\", \"442020\": \"西区街道办事处\", \"442021\": \"南区街道办事处\", \"442022\": \"古镇镇\", \"442023\": \"坦洲镇\", \"442024\": \"大涌镇\", \"442025\": \"南朗镇\", \"445102\": \"湘桥区\", \"445103\": \"潮安区\", \"445122\": \"饶平县\", \"445202\": \"榕城区\", \"445203\": \"揭东区\", \"445222\": \"揭西县\", \"445224\": \"惠来县\", \"445281\": \"普宁市\", \"445302\": \"云城区\", \"445303\": \"云安区\", \"445321\": \"新兴县\", \"445322\": \"郁南县\", \"445381\": \"罗定市\", \"450102\": \"兴宁区\", \"450103\": \"青秀区\", \"450105\": \"江南区\", \"450107\": \"西乡塘区\", \"450108\": \"良庆区\", \"450109\": \"邕宁区\", \"450110\": \"武鸣区\", \"450123\": \"隆安县\", \"450124\": \"马山县\", \"450125\": \"上林县\", \"450126\": \"宾阳县\", \"450127\": \"横县\", \"450202\": \"城中区\", \"450203\": \"鱼峰区\", \"450204\": \"柳南区\", \"450205\": \"柳北区\", \"450206\": \"柳江区\", \"450222\": \"柳城县\", \"450223\": \"鹿寨县\", \"450224\": \"融安县\", \"450225\": \"融水苗族自治县\", \"450226\": \"三江侗族自治县\", \"450302\": \"秀峰区\", \"450303\": \"叠彩区\", \"450304\": \"象山区\", \"450305\": \"七星区\", \"450311\": \"雁山区\", \"450312\": \"临桂区\", \"450321\": \"阳朔县\", \"450323\": \"灵川县\", \"450324\": \"全州县\", \"450325\": \"兴安县\", \"450326\": \"永福县\", \"450327\": \"灌阳县\", \"450328\": \"龙胜各族自治县\", \"450329\": \"资源县\", \"450330\": \"平乐县\", \"450332\": \"恭城瑶族自治县\", \"450381\": \"荔浦市\", \"450403\": \"万秀区\", \"450405\": \"长洲区\", \"450406\": \"龙圩区\", \"450421\": \"苍梧县\", \"450422\": \"藤县\", \"450423\": \"蒙山县\", \"450481\": \"岑溪市\", \"450502\": \"海城区\", \"450503\": \"银海区\", \"450512\": \"铁山港区\", \"450521\": \"合浦县\", \"450602\": \"港口区\", \"450603\": \"防城区\", \"450621\": \"上思县\", \"450681\": \"东兴市\", \"450702\": \"钦南区\", \"450703\": \"钦北区\", \"450721\": \"灵山县\", \"450722\": \"浦北县\", \"450802\": \"港北区\", \"450803\": \"港南区\", \"450804\": \"覃塘区\", \"450821\": \"平南县\", \"450881\": \"桂平市\", \"450902\": \"玉州区\", \"450903\": \"福绵区\", \"450921\": \"容县\", \"450922\": \"陆川县\", \"450923\": \"博白县\", \"450924\": \"兴业县\", \"450981\": \"北流市\", \"451002\": \"右江区\", \"451021\": \"田阳县\", \"451022\": \"田东县\", \"451023\": \"平果县\", \"451024\": \"德保县\", \"451026\": \"那坡县\", \"451027\": \"凌云县\", \"451028\": \"乐业县\", \"451029\": \"田林县\", \"451030\": \"西林县\", \"451031\": \"隆林各族自治县\", \"451081\": \"靖西市\", \"451102\": \"八步区\", \"451103\": \"平桂区\", \"451121\": \"昭平县\", \"451122\": \"钟山县\", \"451123\": \"富川瑶族自治县\", \"451202\": \"金城江区\", \"451203\": \"宜州区\", \"451221\": \"南丹县\", \"451222\": \"天峨县\", \"451223\": \"凤山县\", \"451224\": \"东兰县\", \"451225\": \"罗城仫佬族自治县\", \"451226\": \"环江毛南族自治县\", \"451227\": \"巴马瑶族自治县\", \"451228\": \"都安瑶族自治县\", \"451229\": \"大化瑶族自治县\", \"451302\": \"兴宾区\", \"451321\": \"忻城县\", \"451322\": \"象州县\", \"451323\": \"武宣县\", \"451324\": \"金秀瑶族自治县\", \"451381\": \"合山市\", \"451402\": \"江州区\", \"451421\": \"扶绥县\", \"451422\": \"宁明县\", \"451423\": \"龙州县\", \"451424\": \"大新县\", \"451425\": \"天等县\", \"451481\": \"凭祥市\", \"460105\": \"秀英区\", \"460106\": \"龙华区\", \"460107\": \"琼山区\", \"460108\": \"美兰区\", \"460202\": \"海棠区\", \"460203\": \"吉阳区\", \"460204\": \"天涯区\", \"460205\": \"崖州区\", \"460321\": \"西沙群岛\", \"460322\": \"南沙群岛\", \"460323\": \"中沙群岛的岛礁及其海域\", \"460401\": \"那大镇\", \"460402\": \"和庆镇\", \"460403\": \"南丰镇\", \"460404\": \"大成镇\", \"460405\": \"雅星镇\", \"460406\": \"兰洋镇\", \"460407\": \"光村镇\", \"460408\": \"木棠镇\", \"460409\": \"海头镇\", \"460410\": \"峨蔓镇\", \"460411\": \"王五镇\", \"460412\": \"白马井镇\", \"460413\": \"中和镇\", \"460414\": \"排浦镇\", \"460415\": \"东成镇\", \"460416\": \"新州镇\", \"460417\": \"洋浦经济开发区\", \"460418\": \"华南热作学院\", \"469001\": \"五指山市\", \"469002\": \"琼海市\", \"469005\": \"文昌市\", \"469006\": \"万宁市\", \"469007\": \"东方市\", \"469021\": \"定安县\", \"469022\": \"屯昌县\", \"469023\": \"澄迈县\", \"469024\": \"临高县\", \"469025\": \"白沙黎族自治县\", \"469026\": \"昌江黎族自治县\", \"469027\": \"乐东黎族自治县\", \"469028\": \"陵水黎族自治县\", \"469029\": \"保亭黎族苗族自治县\", \"469030\": \"琼中黎族苗族自治县\", \"500101\": \"万州区\", \"500102\": \"涪陵区\", \"500103\": \"渝中区\", \"500104\": \"大渡口区\", \"500105\": \"江北区\", \"500106\": \"沙坪坝区\", \"500107\": \"九龙坡区\", \"500108\": \"南岸区\", \"500109\": \"北碚区\", \"500110\": \"綦江区\", \"500111\": \"大足区\", \"500112\": \"渝北区\", \"500113\": \"巴南区\", \"500114\": \"黔江区\", \"500115\": \"长寿区\", \"500116\": \"江津区\", \"500117\": \"合川区\", \"500118\": \"永川区\", \"500119\": \"南川区\", \"500120\": \"璧山区\", \"500151\": \"铜梁区\", \"500152\": \"潼南区\", \"500153\": \"荣昌区\", \"500154\": \"开州区\", \"500155\": \"梁平区\", \"500156\": \"武隆区\", \"500229\": \"城口县\", \"500230\": \"丰都县\", \"500231\": \"垫江县\", \"500233\": \"忠县\", \"500235\": \"云阳县\", \"500236\": \"奉节县\", \"500237\": \"巫山县\", \"500238\": \"巫溪县\", \"500240\": \"石柱土家族自治县\", \"500241\": \"秀山土家族苗族自治县\", \"500242\": \"酉阳土家族苗族自治县\", \"500243\": \"彭水苗族土家族自治县\", \"510104\": \"锦江区\", \"510105\": \"青羊区\", \"510106\": \"金牛区\", \"510107\": \"武侯区\", \"510108\": \"成华区\", \"510112\": \"龙泉驿区\", \"510113\": \"青白江区\", \"510114\": \"新都区\", \"510115\": \"温江区\", \"510116\": \"双流区\", \"510117\": \"郫都区\", \"510121\": \"金堂县\", \"510129\": \"大邑县\", \"510131\": \"蒲江县\", \"510132\": \"新津县\", \"510181\": \"都江堰市\", \"510182\": \"彭州市\", \"510183\": \"邛崃市\", \"510184\": \"崇州市\", \"510185\": \"简阳市\", \"510191\": \"高新区\", \"510302\": \"自流井区\", \"510303\": \"贡井区\", \"510304\": \"大安区\", \"510311\": \"沿滩区\", \"510321\": \"荣县\", \"510322\": \"富顺县\", \"510402\": \"东区\", \"510403\": \"西区\", \"510411\": \"仁和区\", \"510421\": \"米易县\", \"510422\": \"盐边县\", \"510502\": \"江阳区\", \"510503\": \"纳溪区\", \"510504\": \"龙马潭区\", \"510521\": \"泸县\", \"510522\": \"合江县\", \"510524\": \"叙永县\", \"510525\": \"古蔺县\", \"510603\": \"旌阳区\", \"510604\": \"罗江区\", \"510623\": \"中江县\", \"510681\": \"广汉市\", \"510682\": \"什邡市\", \"510683\": \"绵竹市\", \"510703\": \"涪城区\", \"510704\": \"游仙区\", \"510705\": \"安州区\", \"510722\": \"三台县\", \"510723\": \"盐亭县\", \"510725\": \"梓潼县\", \"510726\": \"北川羌族自治县\", \"510727\": \"平武县\", \"510781\": \"江油市\", \"510791\": \"高新区\", \"510802\": \"利州区\", \"510811\": \"昭化区\", \"510812\": \"朝天区\", \"510821\": \"旺苍县\", \"510822\": \"青川县\", \"510823\": \"剑阁县\", \"510824\": \"苍溪县\", \"510903\": \"船山区\", \"510904\": \"安居区\", \"510921\": \"蓬溪县\", \"510922\": \"射洪县\", \"510923\": \"大英县\", \"511002\": \"市中区\", \"511011\": \"东兴区\", \"511024\": \"威远县\", \"511025\": \"资中县\", \"511083\": \"隆昌市\", \"511102\": \"市中区\", \"511111\": \"沙湾区\", \"511112\": \"五通桥区\", \"511113\": \"金口河区\", \"511123\": \"犍为县\", \"511124\": \"井研县\", \"511126\": \"夹江县\", \"511129\": \"沐川县\", \"511132\": \"峨边彝族自治县\", \"511133\": \"马边彝族自治县\", \"511181\": \"峨眉山市\", \"511302\": \"顺庆区\", \"511303\": \"高坪区\", \"511304\": \"嘉陵区\", \"511321\": \"南部县\", \"511322\": \"营山县\", \"511323\": \"蓬安县\", \"511324\": \"仪陇县\", \"511325\": \"西充县\", \"511381\": \"阆中市\", \"511402\": \"东坡区\", \"511403\": \"彭山区\", \"511421\": \"仁寿县\", \"511423\": \"洪雅县\", \"511424\": \"丹棱县\", \"511425\": \"青神县\", \"511502\": \"翠屏区\", \"511503\": \"南溪区\", \"511504\": \"叙州区\", \"511523\": \"江安县\", \"511524\": \"长宁县\", \"511525\": \"高县\", \"511526\": \"珙县\", \"511527\": \"筠连县\", \"511528\": \"兴文县\", \"511529\": \"屏山县\", \"511602\": \"广安区\", \"511603\": \"前锋区\", \"511621\": \"岳池县\", \"511622\": \"武胜县\", \"511623\": \"邻水县\", \"511681\": \"华蓥市\", \"511702\": \"通川区\", \"511703\": \"达川区\", \"511722\": \"宣汉县\", \"511723\": \"开江县\", \"511724\": \"大竹县\", \"511725\": \"渠县\", \"511781\": \"万源市\", \"511802\": \"雨城区\", \"511803\": \"名山区\", \"511822\": \"荥经县\", \"511823\": \"汉源县\", \"511824\": \"石棉县\", \"511825\": \"天全县\", \"511826\": \"芦山县\", \"511827\": \"宝兴县\", \"511902\": \"巴州区\", \"511903\": \"恩阳区\", \"511921\": \"通江县\", \"511922\": \"南江县\", \"511923\": \"平昌县\", \"512002\": \"雁江区\", \"512021\": \"安岳县\", \"512022\": \"乐至县\", \"513201\": \"马尔康市\", \"513221\": \"汶川县\", \"513222\": \"理县\", \"513223\": \"茂县\", \"513224\": \"松潘县\", \"513225\": \"九寨沟县\", \"513226\": \"金川县\", \"513227\": \"小金县\", \"513228\": \"黑水县\", \"513230\": \"壤塘县\", \"513231\": \"阿坝县\", \"513232\": \"若尔盖县\", \"513233\": \"红原县\", \"513301\": \"康定市\", \"513322\": \"泸定县\", \"513323\": \"丹巴县\", \"513324\": \"九龙县\", \"513325\": \"雅江县\", \"513326\": \"道孚县\", \"513327\": \"炉霍县\", \"513328\": \"甘孜县\", \"513329\": \"新龙县\", \"513330\": \"德格县\", \"513331\": \"白玉县\", \"513332\": \"石渠县\", \"513333\": \"色达县\", \"513334\": \"理塘县\", \"513335\": \"巴塘县\", \"513336\": \"乡城县\", \"513337\": \"稻城县\", \"513338\": \"得荣县\", \"513401\": \"西昌市\", \"513422\": \"木里藏族自治县\", \"513423\": \"盐源县\", \"513424\": \"德昌县\", \"513425\": \"会理县\", \"513426\": \"会东县\", \"513427\": \"宁南县\", \"513428\": \"普格县\", \"513429\": \"布拖县\", \"513430\": \"金阳县\", \"513431\": \"昭觉县\", \"513432\": \"喜德县\", \"513433\": \"冕宁县\", \"513434\": \"越西县\", \"513435\": \"甘洛县\", \"513436\": \"美姑县\", \"513437\": \"雷波县\", \"520102\": \"南明区\", \"520103\": \"云岩区\", \"520111\": \"花溪区\", \"520112\": \"乌当区\", \"520113\": \"白云区\", \"520115\": \"观山湖区\", \"520121\": \"开阳县\", \"520122\": \"息烽县\", \"520123\": \"修文县\", \"520181\": \"清镇市\", \"520201\": \"钟山区\", \"520203\": \"六枝特区\", \"520221\": \"水城县\", \"520281\": \"盘州市\", \"520302\": \"红花岗区\", \"520303\": \"汇川区\", \"520304\": \"播州区\", \"520322\": \"桐梓县\", \"520323\": \"绥阳县\", \"520324\": \"正安县\", \"520325\": \"道真仡佬族苗族自治县\", \"520326\": \"务川仡佬族苗族自治县\", \"520327\": \"凤冈县\", \"520328\": \"湄潭县\", \"520329\": \"余庆县\", \"520330\": \"习水县\", \"520381\": \"赤水市\", \"520382\": \"仁怀市\", \"520402\": \"西秀区\", \"520403\": \"平坝区\", \"520422\": \"普定县\", \"520423\": \"镇宁布依族苗族自治县\", \"520424\": \"关岭布依族苗族自治县\", \"520425\": \"紫云苗族布依族自治县\", \"520502\": \"七星关区\", \"520521\": \"大方县\", \"520522\": \"黔西县\", \"520523\": \"金沙县\", \"520524\": \"织金县\", \"520525\": \"纳雍县\", \"520526\": \"威宁彝族回族苗族自治县\", \"520527\": \"赫章县\", \"520602\": \"碧江区\", \"520603\": \"万山区\", \"520621\": \"江口县\", \"520622\": \"玉屏侗族自治县\", \"520623\": \"石阡县\", \"520624\": \"思南县\", \"520625\": \"印江土家族苗族自治县\", \"520626\": \"德江县\", \"520627\": \"沿河土家族自治县\", \"520628\": \"松桃苗族自治县\", \"522301\": \"兴义市\", \"522302\": \"兴仁市\", \"522323\": \"普安县\", \"522324\": \"晴隆县\", \"522325\": \"贞丰县\", \"522326\": \"望谟县\", \"522327\": \"册亨县\", \"522328\": \"安龙县\", \"522601\": \"凯里市\", \"522622\": \"黄平县\", \"522623\": \"施秉县\", \"522624\": \"三穗县\", \"522625\": \"镇远县\", \"522626\": \"岑巩县\", \"522627\": \"天柱县\", \"522628\": \"锦屏县\", \"522629\": \"剑河县\", \"522630\": \"台江县\", \"522631\": \"黎平县\", \"522632\": \"榕江县\", \"522633\": \"从江县\", \"522634\": \"雷山县\", \"522635\": \"麻江县\", \"522636\": \"丹寨县\", \"522701\": \"都匀市\", \"522702\": \"福泉市\", \"522722\": \"荔波县\", \"522723\": \"贵定县\", \"522725\": \"瓮安县\", \"522726\": \"独山县\", \"522727\": \"平塘县\", \"522728\": \"罗甸县\", \"522729\": \"长顺县\", \"522730\": \"龙里县\", \"522731\": \"惠水县\", \"522732\": \"三都水族自治县\", \"530102\": \"五华区\", \"530103\": \"盘龙区\", \"530111\": \"官渡区\", \"530112\": \"西山区\", \"530113\": \"东川区\", \"530114\": \"呈贡区\", \"530115\": \"晋宁区\", \"530124\": \"富民县\", \"530125\": \"宜良县\", \"530126\": \"石林彝族自治县\", \"530127\": \"嵩明县\", \"530128\": \"禄劝彝族苗族自治县\", \"530129\": \"寻甸回族彝族自治县\", \"530181\": \"安宁市\", \"530302\": \"麒麟区\", \"530303\": \"沾益区\", \"530304\": \"马龙区\", \"530322\": \"陆良县\", \"530323\": \"师宗县\", \"530324\": \"罗平县\", \"530325\": \"富源县\", \"530326\": \"会泽县\", \"530381\": \"宣威市\", \"530402\": \"红塔区\", \"530403\": \"江川区\", \"530422\": \"澄江县\", \"530423\": \"通海县\", \"530424\": \"华宁县\", \"530425\": \"易门县\", \"530426\": \"峨山彝族自治县\", \"530427\": \"新平彝族傣族自治县\", \"530428\": \"元江哈尼族彝族傣族自治县\", \"530502\": \"隆阳区\", \"530521\": \"施甸县\", \"530523\": \"龙陵县\", \"530524\": \"昌宁县\", \"530581\": \"腾冲市\", \"530602\": \"昭阳区\", \"530621\": \"鲁甸县\", \"530622\": \"巧家县\", \"530623\": \"盐津县\", \"530624\": \"大关县\", \"530625\": \"永善县\", \"530626\": \"绥江县\", \"530627\": \"镇雄县\", \"530628\": \"彝良县\", \"530629\": \"威信县\", \"530681\": \"水富市\", \"530702\": \"古城区\", \"530721\": \"玉龙纳西族自治县\", \"530722\": \"永胜县\", \"530723\": \"华坪县\", \"530724\": \"宁蒗彝族自治县\", \"530802\": \"思茅区\", \"530821\": \"宁洱哈尼族彝族自治县\", \"530822\": \"墨江哈尼族自治县\", \"530823\": \"景东彝族自治县\", \"530824\": \"景谷傣族彝族自治县\", \"530825\": \"镇沅彝族哈尼族拉祜族自治县\", \"530826\": \"江城哈尼族彝族自治县\", \"530827\": \"孟连傣族拉祜族佤族自治县\", \"530828\": \"澜沧拉祜族自治县\", \"530829\": \"西盟佤族自治县\", \"530902\": \"临翔区\", \"530921\": \"凤庆县\", \"530922\": \"云县\", \"530923\": \"永德县\", \"530924\": \"镇康县\", \"530925\": \"双江拉祜族佤族布朗族傣族自治县\", \"530926\": \"耿马傣族佤族自治县\", \"530927\": \"沧源佤族自治县\", \"532301\": \"楚雄市\", \"532322\": \"双柏县\", \"532323\": \"牟定县\", \"532324\": \"南华县\", \"532325\": \"姚安县\", \"532326\": \"大姚县\", \"532327\": \"永仁县\", \"532328\": \"元谋县\", \"532329\": \"武定县\", \"532331\": \"禄丰县\", \"532501\": \"个旧市\", \"532502\": \"开远市\", \"532503\": \"蒙自市\", \"532504\": \"弥勒市\", \"532523\": \"屏边苗族自治县\", \"532524\": \"建水县\", \"532525\": \"石屏县\", \"532527\": \"泸西县\", \"532528\": \"元阳县\", \"532529\": \"红河县\", \"532530\": \"金平苗族瑶族傣族自治县\", \"532531\": \"绿春县\", \"532532\": \"河口瑶族自治县\", \"532601\": \"文山市\", \"532622\": \"砚山县\", \"532623\": \"西畴县\", \"532624\": \"麻栗坡县\", \"532625\": \"马关县\", \"532626\": \"丘北县\", \"532627\": \"广南县\", \"532628\": \"富宁县\", \"532801\": \"景洪市\", \"532822\": \"勐海县\", \"532823\": \"勐腊县\", \"532901\": \"大理市\", \"532922\": \"漾濞彝族自治县\", \"532923\": \"祥云县\", \"532924\": \"宾川县\", \"532925\": \"弥渡县\", \"532926\": \"南涧彝族自治县\", \"532927\": \"巍山彝族回族自治县\", \"532928\": \"永平县\", \"532929\": \"云龙县\", \"532930\": \"洱源县\", \"532931\": \"剑川县\", \"532932\": \"鹤庆县\", \"533102\": \"瑞丽市\", \"533103\": \"芒市\", \"533122\": \"梁河县\", \"533123\": \"盈江县\", \"533124\": \"陇川县\", \"533301\": \"泸水市\", \"533323\": \"福贡县\", \"533324\": \"贡山独龙族怒族自治县\", \"533325\": \"兰坪白族普米族自治县\", \"533401\": \"香格里拉市\", \"533422\": \"德钦县\", \"533423\": \"维西傈僳族自治县\", \"540102\": \"城关区\", \"540103\": \"堆龙德庆区\", \"540104\": \"达孜区\", \"540121\": \"林周县\", \"540122\": \"当雄县\", \"540123\": \"尼木县\", \"540124\": \"曲水县\", \"540127\": \"墨竹工卡县\", \"540202\": \"桑珠孜区\", \"540221\": \"南木林县\", \"540222\": \"江孜县\", \"540223\": \"定日县\", \"540224\": \"萨迦县\", \"540225\": \"拉孜县\", \"540226\": \"昂仁县\", \"540227\": \"谢通门县\", \"540228\": \"白朗县\", \"540229\": \"仁布县\", \"540230\": \"康马县\", \"540231\": \"定结县\", \"540232\": \"仲巴县\", \"540233\": \"亚东县\", \"540234\": \"吉隆县\", \"540235\": \"聂拉木县\", \"540236\": \"萨嘎县\", \"540237\": \"岗巴县\", \"540302\": \"卡若区\", \"540321\": \"江达县\", \"540322\": \"贡觉县\", \"540323\": \"类乌齐县\", \"540324\": \"丁青县\", \"540325\": \"察雅县\", \"540326\": \"八宿县\", \"540327\": \"左贡县\", \"540328\": \"芒康县\", \"540329\": \"洛隆县\", \"540330\": \"边坝县\", \"540402\": \"巴宜区\", \"540421\": \"工布江达县\", \"540422\": \"米林县\", \"540423\": \"墨脱县\", \"540424\": \"波密县\", \"540425\": \"察隅县\", \"540426\": \"朗县\", \"540502\": \"乃东区\", \"540521\": \"扎囊县\", \"540522\": \"贡嘎县\", \"540523\": \"桑日县\", \"540524\": \"琼结县\", \"540525\": \"曲松县\", \"540526\": \"措美县\", \"540527\": \"洛扎县\", \"540528\": \"加查县\", \"540529\": \"隆子县\", \"540530\": \"错那县\", \"540531\": \"浪卡子县\", \"540602\": \"色尼区\", \"540621\": \"嘉黎县\", \"540622\": \"比如县\", \"540623\": \"聂荣县\", \"540624\": \"安多县\", \"540625\": \"申扎县\", \"540626\": \"索县\", \"540627\": \"班戈县\", \"540628\": \"巴青县\", \"540629\": \"尼玛县\", \"540630\": \"双湖县\", \"542521\": \"普兰县\", \"542522\": \"札达县\", \"542523\": \"噶尔县\", \"542524\": \"日土县\", \"542525\": \"革吉县\", \"542526\": \"改则县\", \"542527\": \"措勤县\", \"610102\": \"新城区\", \"610103\": \"碑林区\", \"610104\": \"莲湖区\", \"610111\": \"灞桥区\", \"610112\": \"未央区\", \"610113\": \"雁塔区\", \"610114\": \"阎良区\", \"610115\": \"临潼区\", \"610116\": \"长安区\", \"610117\": \"高陵区\", \"610118\": \"鄠邑区\", \"610122\": \"蓝田县\", \"610124\": \"周至县\", \"610202\": \"王益区\", \"610203\": \"印台区\", \"610204\": \"耀州区\", \"610222\": \"宜君县\", \"610302\": \"渭滨区\", \"610303\": \"金台区\", \"610304\": \"陈仓区\", \"610322\": \"凤翔县\", \"610323\": \"岐山县\", \"610324\": \"扶风县\", \"610326\": \"眉县\", \"610327\": \"陇县\", \"610328\": \"千阳县\", \"610329\": \"麟游县\", \"610330\": \"凤县\", \"610331\": \"太白县\", \"610402\": \"秦都区\", \"610403\": \"杨陵区\", \"610404\": \"渭城区\", \"610422\": \"三原县\", \"610423\": \"泾阳县\", \"610424\": \"乾县\", \"610425\": \"礼泉县\", \"610426\": \"永寿县\", \"610428\": \"长武县\", \"610429\": \"旬邑县\", \"610430\": \"淳化县\", \"610431\": \"武功县\", \"610481\": \"兴平市\", \"610482\": \"彬州市\", \"610502\": \"临渭区\", \"610503\": \"华州区\", \"610522\": \"潼关县\", \"610523\": \"大荔县\", \"610524\": \"合阳县\", \"610525\": \"澄城县\", \"610526\": \"蒲城县\", \"610527\": \"白水县\", \"610528\": \"富平县\", \"610581\": \"韩城市\", \"610582\": \"华阴市\", \"610602\": \"宝塔区\", \"610603\": \"安塞区\", \"610621\": \"延长县\", \"610622\": \"延川县\", \"610623\": \"子长县\", \"610625\": \"志丹县\", \"610626\": \"吴起县\", \"610627\": \"甘泉县\", \"610628\": \"富县\", \"610629\": \"洛川县\", \"610630\": \"宜川县\", \"610631\": \"黄龙县\", \"610632\": \"黄陵县\", \"610702\": \"汉台区\", \"610703\": \"南郑区\", \"610722\": \"城固县\", \"610723\": \"洋县\", \"610724\": \"西乡县\", \"610725\": \"勉县\", \"610726\": \"宁强县\", \"610727\": \"略阳县\", \"610728\": \"镇巴县\", \"610729\": \"留坝县\", \"610730\": \"佛坪县\", \"610802\": \"榆阳区\", \"610803\": \"横山区\", \"610822\": \"府谷县\", \"610824\": \"靖边县\", \"610825\": \"定边县\", \"610826\": \"绥德县\", \"610827\": \"米脂县\", \"610828\": \"佳县\", \"610829\": \"吴堡县\", \"610830\": \"清涧县\", \"610831\": \"子洲县\", \"610881\": \"神木市\", \"610902\": \"汉滨区\", \"610921\": \"汉阴县\", \"610922\": \"石泉县\", \"610923\": \"宁陕县\", \"610924\": \"紫阳县\", \"610925\": \"岚皋县\", \"610926\": \"平利县\", \"610927\": \"镇坪县\", \"610928\": \"旬阳县\", \"610929\": \"白河县\", \"611002\": \"商州区\", \"611021\": \"洛南县\", \"611022\": \"丹凤县\", \"611023\": \"商南县\", \"611024\": \"山阳县\", \"611025\": \"镇安县\", \"611026\": \"柞水县\", \"620102\": \"城关区\", \"620103\": \"七里河区\", \"620104\": \"西固区\", \"620105\": \"安宁区\", \"620111\": \"红古区\", \"620121\": \"永登县\", \"620122\": \"皋兰县\", \"620123\": \"榆中县\", \"620201\": \"市辖区\", \"620290\": \"雄关区\", \"620291\": \"长城区\", \"620292\": \"镜铁区\", \"620293\": \"新城镇\", \"620294\": \"峪泉镇\", \"620295\": \"文殊镇\", \"620302\": \"金川区\", \"620321\": \"永昌县\", \"620402\": \"白银区\", \"620403\": \"平川区\", \"620421\": \"靖远县\", \"620422\": \"会宁县\", \"620423\": \"景泰县\", \"620502\": \"秦州区\", \"620503\": \"麦积区\", \"620521\": \"清水县\", \"620522\": \"秦安县\", \"620523\": \"甘谷县\", \"620524\": \"武山县\", \"620525\": \"张家川回族自治县\", \"620602\": \"凉州区\", \"620621\": \"民勤县\", \"620622\": \"古浪县\", \"620623\": \"天祝藏族自治县\", \"620702\": \"甘州区\", \"620721\": \"肃南裕固族自治县\", \"620722\": \"民乐县\", \"620723\": \"临泽县\", \"620724\": \"高台县\", \"620725\": \"山丹县\", \"620802\": \"崆峒区\", \"620821\": \"泾川县\", \"620822\": \"灵台县\", \"620823\": \"崇信县\", \"620825\": \"庄浪县\", \"620826\": \"静宁县\", \"620881\": \"华亭市\", \"620902\": \"肃州区\", \"620921\": \"金塔县\", \"620922\": \"瓜州县\", \"620923\": \"肃北蒙古族自治县\", \"620924\": \"阿克塞哈萨克族自治县\", \"620981\": \"玉门市\", \"620982\": \"敦煌市\", \"621002\": \"西峰区\", \"621021\": \"庆城县\", \"621022\": \"环县\", \"621023\": \"华池县\", \"621024\": \"合水县\", \"621025\": \"正宁县\", \"621026\": \"宁县\", \"621027\": \"镇原县\", \"621102\": \"安定区\", \"621121\": \"通渭县\", \"621122\": \"陇西县\", \"621123\": \"渭源县\", \"621124\": \"临洮县\", \"621125\": \"漳县\", \"621126\": \"岷县\", \"621202\": \"武都区\", \"621221\": \"成县\", \"621222\": \"文县\", \"621223\": \"宕昌县\", \"621224\": \"康县\", \"621225\": \"西和县\", \"621226\": \"礼县\", \"621227\": \"徽县\", \"621228\": \"两当县\", \"622901\": \"临夏市\", \"622921\": \"临夏县\", \"622922\": \"康乐县\", \"622923\": \"永靖县\", \"622924\": \"广河县\", \"622925\": \"和政县\", \"622926\": \"东乡族自治县\", \"622927\": \"积石山保安族东乡族撒拉族自治县\", \"623001\": \"合作市\", \"623021\": \"临潭县\", \"623022\": \"卓尼县\", \"623023\": \"舟曲县\", \"623024\": \"迭部县\", \"623025\": \"玛曲县\", \"623026\": \"碌曲县\", \"623027\": \"夏河县\", \"630102\": \"城东区\", \"630103\": \"城中区\", \"630104\": \"城西区\", \"630105\": \"城北区\", \"630121\": \"大通回族土族自治县\", \"630122\": \"湟中县\", \"630123\": \"湟源县\", \"630202\": \"乐都区\", \"630203\": \"平安区\", \"630222\": \"民和回族土族自治县\", \"630223\": \"互助土族自治县\", \"630224\": \"化隆回族自治县\", \"630225\": \"循化撒拉族自治县\", \"632221\": \"门源回族自治县\", \"632222\": \"祁连县\", \"632223\": \"海晏县\", \"632224\": \"刚察县\", \"632321\": \"同仁县\", \"632322\": \"尖扎县\", \"632323\": \"泽库县\", \"632324\": \"河南蒙古族自治县\", \"632521\": \"共和县\", \"632522\": \"同德县\", \"632523\": \"贵德县\", \"632524\": \"兴海县\", \"632525\": \"贵南县\", \"632621\": \"玛沁县\", \"632622\": \"班玛县\", \"632623\": \"甘德县\", \"632624\": \"达日县\", \"632625\": \"久治县\", \"632626\": \"玛多县\", \"632701\": \"玉树市\", \"632722\": \"杂多县\", \"632723\": \"称多县\", \"632724\": \"治多县\", \"632725\": \"囊谦县\", \"632726\": \"曲麻莱县\", \"632801\": \"格尔木市\", \"632802\": \"德令哈市\", \"632803\": \"茫崖市\", \"632821\": \"乌兰县\", \"632822\": \"都兰县\", \"632823\": \"天峻县\", \"640104\": \"兴庆区\", \"640105\": \"西夏区\", \"640106\": \"金凤区\", \"640121\": \"永宁县\", \"640122\": \"贺兰县\", \"640181\": \"灵武市\", \"640202\": \"大武口区\", \"640205\": \"惠农区\", \"640221\": \"平罗县\", \"640302\": \"利通区\", \"640303\": \"红寺堡区\", \"640323\": \"盐池县\", \"640324\": \"同心县\", \"640381\": \"青铜峡市\", \"640402\": \"原州区\", \"640422\": \"西吉县\", \"640423\": \"隆德县\", \"640424\": \"泾源县\", \"640425\": \"彭阳县\", \"640502\": \"沙坡头区\", \"640521\": \"中宁县\", \"640522\": \"海原县\", \"650102\": \"天山区\", \"650103\": \"沙依巴克区\", \"650104\": \"新市区\", \"650105\": \"水磨沟区\", \"650106\": \"头屯河区\", \"650107\": \"达坂城区\", \"650109\": \"米东区\", \"650121\": \"乌鲁木齐县\", \"650202\": \"独山子区\", \"650203\": \"克拉玛依区\", \"650204\": \"白碱滩区\", \"650205\": \"乌尔禾区\", \"650402\": \"高昌区\", \"650421\": \"鄯善县\", \"650422\": \"托克逊县\", \"650502\": \"伊州区\", \"650521\": \"巴里坤哈萨克自治县\", \"650522\": \"伊吾县\", \"652301\": \"昌吉市\", \"652302\": \"阜康市\", \"652323\": \"呼图壁县\", \"652324\": \"玛纳斯县\", \"652325\": \"奇台县\", \"652327\": \"吉木萨尔县\", \"652328\": \"木垒哈萨克自治县\", \"652701\": \"博乐市\", \"652702\": \"阿拉山口市\", \"652722\": \"精河县\", \"652723\": \"温泉县\", \"652801\": \"库尔勒市\", \"652822\": \"轮台县\", \"652823\": \"尉犁县\", \"652824\": \"若羌县\", \"652825\": \"且末县\", \"652826\": \"焉耆回族自治县\", \"652827\": \"和静县\", \"652828\": \"和硕县\", \"652829\": \"博湖县\", \"652901\": \"阿克苏市\", \"652922\": \"温宿县\", \"652923\": \"库车县\", \"652924\": \"沙雅县\", \"652925\": \"新和县\", \"652926\": \"拜城县\", \"652927\": \"乌什县\", \"652928\": \"阿瓦提县\", \"652929\": \"柯坪县\", \"653001\": \"阿图什市\", \"653022\": \"阿克陶县\", \"653023\": \"阿合奇县\", \"653024\": \"乌恰县\", \"653101\": \"喀什市\", \"653121\": \"疏附县\", \"653122\": \"疏勒县\", \"653123\": \"英吉沙县\", \"653124\": \"泽普县\", \"653125\": \"莎车县\", \"653126\": \"叶城县\", \"653127\": \"麦盖提县\", \"653128\": \"岳普湖县\", \"653129\": \"伽师县\", \"653130\": \"巴楚县\", \"653131\": \"塔什库尔干塔吉克自治县\", \"653201\": \"和田市\", \"653221\": \"和田县\", \"653222\": \"墨玉县\", \"653223\": \"皮山县\", \"653224\": \"洛浦县\", \"653225\": \"策勒县\", \"653226\": \"于田县\", \"653227\": \"民丰县\", \"654002\": \"伊宁市\", \"654003\": \"奎屯市\", \"654004\": \"霍尔果斯市\", \"654021\": \"伊宁县\", \"654022\": \"察布查尔锡伯自治县\", \"654023\": \"霍城县\", \"654024\": \"巩留县\", \"654025\": \"新源县\", \"654026\": \"昭苏县\", \"654027\": \"特克斯县\", \"654028\": \"尼勒克县\", \"654201\": \"塔城市\", \"654202\": \"乌苏市\", \"654221\": \"额敏县\", \"654223\": \"沙湾县\", \"654224\": \"托里县\", \"654225\": \"裕民县\", \"654226\": \"和布克赛尔蒙古自治县\", \"654301\": \"阿勒泰市\", \"654321\": \"布尔津县\", \"654322\": \"富蕴县\", \"654323\": \"福海县\", \"654324\": \"哈巴河县\", \"654325\": \"青河县\", \"654326\": \"吉木乃县\", \"659001\": \"石河子市\", \"659002\": \"阿拉尔市\", \"659003\": \"图木舒克市\", \"659004\": \"五家渠市\", \"659005\": \"北屯市\", \"659006\": \"铁门关市\", \"659007\": \"双河市\", \"659008\": \"可克达拉市\", \"659009\": \"昆玉市\", \"710101\": \"中正区\", \"710102\": \"大同区\", \"710103\": \"中山区\", \"710104\": \"松山区\", \"710105\": \"大安区\", \"710106\": \"万华区\", \"710107\": \"信义区\", \"710108\": \"士林区\", \"710109\": \"北投区\", \"710110\": \"内湖区\", \"710111\": \"南港区\", \"710112\": \"文山区\", \"710199\": \"其它区\", \"710201\": \"新兴区\", \"710202\": \"前金区\", \"710203\": \"芩雅区\", \"710204\": \"盐埕区\", \"710205\": \"鼓山区\", \"710206\": \"旗津区\", \"710207\": \"前镇区\", \"710208\": \"三民区\", \"710209\": \"左营区\", \"710210\": \"楠梓区\", \"710211\": \"小港区\", \"710241\": \"苓雅区\", \"710242\": \"仁武区\", \"710243\": \"大社区\", \"710244\": \"冈山区\", \"710245\": \"路竹区\", \"710246\": \"阿莲区\", \"710247\": \"田寮区\", \"710248\": \"燕巢区\", \"710249\": \"桥头区\", \"710250\": \"梓官区\", \"710251\": \"弥陀区\", \"710252\": \"永安区\", \"710253\": \"湖内区\", \"710254\": \"凤山区\", \"710255\": \"大寮区\", \"710256\": \"林园区\", \"710257\": \"鸟松区\", \"710258\": \"大树区\", \"710259\": \"旗山区\", \"710260\": \"美浓区\", \"710261\": \"六龟区\", \"710262\": \"内门区\", \"710263\": \"杉林区\", \"710264\": \"甲仙区\", \"710265\": \"桃源区\", \"710266\": \"那玛夏区\", \"710267\": \"茂林区\", \"710268\": \"茄萣区\", \"710299\": \"其它区\", \"710301\": \"中西区\", \"710302\": \"东区\", \"710303\": \"南区\", \"710304\": \"北区\", \"710305\": \"安平区\", \"710306\": \"安南区\", \"710339\": \"永康区\", \"710340\": \"归仁区\", \"710341\": \"新化区\", \"710342\": \"左镇区\", \"710343\": \"玉井区\", \"710344\": \"楠西区\", \"710345\": \"南化区\", \"710346\": \"仁德区\", \"710347\": \"关庙区\", \"710348\": \"龙崎区\", \"710349\": \"官田区\", \"710350\": \"麻豆区\", \"710351\": \"佳里区\", \"710352\": \"西港区\", \"710353\": \"七股区\", \"710354\": \"将军区\", \"710355\": \"学甲区\", \"710356\": \"北门区\", \"710357\": \"新营区\", \"710358\": \"后壁区\", \"710359\": \"白河区\", \"710360\": \"东山区\", \"710361\": \"六甲区\", \"710362\": \"下营区\", \"710363\": \"柳营区\", \"710364\": \"盐水区\", \"710365\": \"善化区\", \"710366\": \"大内区\", \"710367\": \"山上区\", \"710368\": \"新市区\", \"710369\": \"安定区\", \"710399\": \"其它区\", \"710401\": \"中区\", \"710402\": \"东区\", \"710403\": \"南区\", \"710404\": \"西区\", \"710405\": \"北区\", \"710406\": \"北屯区\", \"710407\": \"西屯区\", \"710408\": \"南屯区\", \"710431\": \"太平区\", \"710432\": \"大里区\", \"710433\": \"雾峰区\", \"710434\": \"乌日区\", \"710435\": \"丰原区\", \"710436\": \"后里区\", \"710437\": \"石冈区\", \"710438\": \"东势区\", \"710439\": \"和平区\", \"710440\": \"新社区\", \"710441\": \"潭子区\", \"710442\": \"大雅区\", \"710443\": \"神冈区\", \"710444\": \"大肚区\", \"710445\": \"沙鹿区\", \"710446\": \"龙井区\", \"710447\": \"梧栖区\", \"710448\": \"清水区\", \"710449\": \"大甲区\", \"710450\": \"外埔区\", \"710451\": \"大安区\", \"710499\": \"其它区\", \"710507\": \"金沙镇\", \"710508\": \"金湖镇\", \"710509\": \"金宁乡\", \"710510\": \"金城镇\", \"710511\": \"烈屿乡\", \"710512\": \"乌坵乡\", \"710614\": \"南投市\", \"710615\": \"中寮乡\", \"710616\": \"草屯镇\", \"710617\": \"国姓乡\", \"710618\": \"埔里镇\", \"710619\": \"仁爱乡\", \"710620\": \"名间乡\", \"710621\": \"集集镇\", \"710622\": \"水里乡\", \"710623\": \"鱼池乡\", \"710624\": \"信义乡\", \"710625\": \"竹山镇\", \"710626\": \"鹿谷乡\", \"710701\": \"仁爱区\", \"710702\": \"信义区\", \"710703\": \"中正区\", \"710704\": \"中山区\", \"710705\": \"安乐区\", \"710706\": \"暖暖区\", \"710707\": \"七堵区\", \"710799\": \"其它区\", \"710801\": \"东区\", \"710802\": \"北区\", \"710803\": \"香山区\", \"710899\": \"其它区\", \"710901\": \"东区\", \"710902\": \"西区\", \"710999\": \"其它区\", \"711130\": \"万里区\", \"711132\": \"板桥区\", \"711133\": \"汐止区\", \"711134\": \"深坑区\", \"711135\": \"石碇区\", \"711136\": \"瑞芳区\", \"711137\": \"平溪区\", \"711138\": \"双溪区\", \"711139\": \"贡寮区\", \"711140\": \"新店区\", \"711141\": \"坪林区\", \"711142\": \"乌来区\", \"711143\": \"永和区\", \"711144\": \"中和区\", \"711145\": \"土城区\", \"711146\": \"三峡区\", \"711147\": \"树林区\", \"711148\": \"莺歌区\", \"711149\": \"三重区\", \"711150\": \"新庄区\", \"711151\": \"泰山区\", \"711152\": \"林口区\", \"711153\": \"芦洲区\", \"711154\": \"五股区\", \"711155\": \"八里区\", \"711156\": \"淡水区\", \"711157\": \"三芝区\", \"711158\": \"石门区\", \"711287\": \"宜兰市\", \"711288\": \"头城镇\", \"711289\": \"礁溪乡\", \"711290\": \"壮围乡\", \"711291\": \"员山乡\", \"711292\": \"罗东镇\", \"711293\": \"三星乡\", \"711294\": \"大同乡\", \"711295\": \"五结乡\", \"711296\": \"冬山乡\", \"711297\": \"苏澳镇\", \"711298\": \"南澳乡\", \"711299\": \"钓鱼台\", \"711387\": \"竹北市\", \"711388\": \"湖口乡\", \"711389\": \"新丰乡\", \"711390\": \"新埔镇\", \"711391\": \"关西镇\", \"711392\": \"芎林乡\", \"711393\": \"宝山乡\", \"711394\": \"竹东镇\", \"711395\": \"五峰乡\", \"711396\": \"横山乡\", \"711397\": \"尖石乡\", \"711398\": \"北埔乡\", \"711399\": \"峨眉乡\", \"711414\": \"中坜区\", \"711415\": \"平镇区\", \"711417\": \"杨梅区\", \"711418\": \"新屋区\", \"711419\": \"观音区\", \"711420\": \"桃园区\", \"711421\": \"龟山区\", \"711422\": \"八德区\", \"711423\": \"大溪区\", \"711425\": \"大园区\", \"711426\": \"芦竹区\", \"711487\": \"中坜市\", \"711488\": \"平镇市\", \"711489\": \"龙潭乡\", \"711490\": \"杨梅市\", \"711491\": \"新屋乡\", \"711492\": \"观音乡\", \"711493\": \"桃园市\", \"711494\": \"龟山乡\", \"711495\": \"八德市\", \"711496\": \"大溪镇\", \"711497\": \"复兴乡\", \"711498\": \"大园乡\", \"711499\": \"芦竹乡\", \"711520\": \"头份市\", \"711582\": \"竹南镇\", \"711583\": \"头份镇\", \"711584\": \"三湾乡\", \"711585\": \"南庄乡\", \"711586\": \"狮潭乡\", \"711587\": \"后龙镇\", \"711588\": \"通霄镇\", \"711589\": \"苑里镇\", \"711590\": \"苗栗市\", \"711591\": \"造桥乡\", \"711592\": \"头屋乡\", \"711593\": \"公馆乡\", \"711594\": \"大湖乡\", \"711595\": \"泰安乡\", \"711596\": \"铜锣乡\", \"711597\": \"三义乡\", \"711598\": \"西湖乡\", \"711599\": \"卓兰镇\", \"711736\": \"员林市\", \"711774\": \"彰化市\", \"711775\": \"芬园乡\", \"711776\": \"花坛乡\", \"711777\": \"秀水乡\", \"711778\": \"鹿港镇\", \"711779\": \"福兴乡\", \"711780\": \"线西乡\", \"711781\": \"和美镇\", \"711782\": \"伸港乡\", \"711783\": \"员林镇\", \"711784\": \"社头乡\", \"711785\": \"永靖乡\", \"711786\": \"埔心乡\", \"711787\": \"溪湖镇\", \"711788\": \"大村乡\", \"711789\": \"埔盐乡\", \"711790\": \"田中镇\", \"711791\": \"北斗镇\", \"711792\": \"田尾乡\", \"711793\": \"埤头乡\", \"711794\": \"溪州乡\", \"711795\": \"竹塘乡\", \"711796\": \"二林镇\", \"711797\": \"大城乡\", \"711798\": \"芳苑乡\", \"711799\": \"二水乡\", \"711982\": \"番路乡\", \"711983\": \"梅山乡\", \"711984\": \"竹崎乡\", \"711985\": \"阿里山乡\", \"711986\": \"中埔乡\", \"711987\": \"大埔乡\", \"711988\": \"水上乡\", \"711989\": \"鹿草乡\", \"711990\": \"太保市\", \"711991\": \"朴子市\", \"711992\": \"东石乡\", \"711993\": \"六脚乡\", \"711994\": \"新港乡\", \"711995\": \"民雄乡\", \"711996\": \"大林镇\", \"711997\": \"溪口乡\", \"711998\": \"义竹乡\", \"711999\": \"布袋镇\", \"712180\": \"斗南镇\", \"712181\": \"大埤乡\", \"712182\": \"虎尾镇\", \"712183\": \"土库镇\", \"712184\": \"褒忠乡\", \"712185\": \"东势乡\", \"712186\": \"台西乡\", \"712187\": \"仑背乡\", \"712188\": \"麦寮乡\", \"712189\": \"斗六市\", \"712190\": \"林内乡\", \"712191\": \"古坑乡\", \"712192\": \"莿桐乡\", \"712193\": \"西螺镇\", \"712194\": \"二仑乡\", \"712195\": \"北港镇\", \"712196\": \"水林乡\", \"712197\": \"口湖乡\", \"712198\": \"四湖乡\", \"712199\": \"元长乡\", \"712451\": \"崁顶乡\", \"712467\": \"屏东市\", \"712468\": \"三地门乡\", \"712469\": \"雾台乡\", \"712470\": \"玛家乡\", \"712471\": \"九如乡\", \"712472\": \"里港乡\", \"712473\": \"高树乡\", \"712474\": \"盐埔乡\", \"712475\": \"长治乡\", \"712476\": \"麟洛乡\", \"712477\": \"竹田乡\", \"712478\": \"内埔乡\", \"712479\": \"万丹乡\", \"712480\": \"潮州镇\", \"712481\": \"泰武乡\", \"712482\": \"来义乡\", \"712483\": \"万峦乡\", \"712484\": \"莰顶乡\", \"712485\": \"新埤乡\", \"712486\": \"南州乡\", \"712487\": \"林边乡\", \"712488\": \"东港镇\", \"712489\": \"琉球乡\", \"712490\": \"佳冬乡\", \"712491\": \"新园乡\", \"712492\": \"枋寮乡\", \"712493\": \"枋山乡\", \"712494\": \"春日乡\", \"712495\": \"狮子乡\", \"712496\": \"车城乡\", \"712497\": \"牡丹乡\", \"712498\": \"恒春镇\", \"712499\": \"满州乡\", \"712584\": \"台东市\", \"712585\": \"绿岛乡\", \"712586\": \"兰屿乡\", \"712587\": \"延平乡\", \"712588\": \"卑南乡\", \"712589\": \"鹿野乡\", \"712590\": \"关山镇\", \"712591\": \"海端乡\", \"712592\": \"池上乡\", \"712593\": \"东河乡\", \"712594\": \"成功镇\", \"712595\": \"长滨乡\", \"712596\": \"金峰乡\", \"712597\": \"大武乡\", \"712598\": \"达仁乡\", \"712599\": \"太麻里乡\", \"712686\": \"花莲市\", \"712687\": \"新城乡\", \"712688\": \"太鲁阁\", \"712689\": \"秀林乡\", \"712690\": \"吉安乡\", \"712691\": \"寿丰乡\", \"712692\": \"凤林镇\", \"712693\": \"光复乡\", \"712694\": \"丰滨乡\", \"712695\": \"瑞穗乡\", \"712696\": \"万荣乡\", \"712697\": \"玉里镇\", \"712698\": \"卓溪乡\", \"712699\": \"富里乡\", \"712794\": \"马公市\", \"712795\": \"西屿乡\", \"712796\": \"望安乡\", \"712797\": \"七美乡\", \"712798\": \"白沙乡\", \"712799\": \"湖西乡\", \"712896\": \"南竿乡\", \"712897\": \"北竿乡\", \"712898\": \"东引乡\", \"712899\": \"莒光乡\", \"810101\": \"中西区\", \"810102\": \"湾仔区\", \"810103\": \"东区\", \"810104\": \"南区\", \"810201\": \"九龙城区\", \"810202\": \"油尖旺区\", \"810203\": \"深水埗区\", \"810204\": \"黄大仙区\", \"810205\": \"观塘区\", \"810301\": \"北区\", \"810302\": \"大埔区\", \"810303\": \"沙田区\", \"810304\": \"西贡区\", \"810305\": \"元朗区\", \"810306\": \"屯门区\", \"810307\": \"荃湾区\", \"810308\": \"葵青区\", \"810309\": \"离岛区\", \"820101\": \"澳门半岛\", \"820201\": \"离岛\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///180\n");

/***/ }),

/***/ 19:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!*********************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/common/fetch.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* \n                                                                                                      @url 请求路径\n                                                                                                      @data 请求参数\n                                                                                                      @method 请求方法\n                                                                                                      @ShowLoading 是否显示加载提示\n                                                                                                      @ShowMsg 是否显示提示语\n                                                                                                      */\n// const baseURL = \"http://www.yijianlian.com/index.php/api/\"; //本地服务器\nvar baseURL = \"https://yjl.tao.li4.cn/index.php/api/\"; //测试服务器\nvar _default = {\n  Fetch: function Fetch(opt) {\n    var TOKEN = uni.getStorageSync('TOKEN');\n    // console.log(TOKEN)\n    opt = opt || {};\n    opt.debug = opt.debug || false;\n    opt.url = opt.url || '';\n    opt.data = opt.data || null;\n    opt.method = opt.method || 'POST';\n    opt.header = opt.header || {\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      'Content-Type': 'application/json;charset=UTF-8',\n      'Accept': 'application/json' };\n\n    if (TOKEN) {\n      opt.header.Token = TOKEN;\n    }\n    opt.success = opt.success || function () {};\n    opt.fail = opt.fail || function () {\n      if (opt.ShowLoading) {\n        setTimeout(function () {\n          uni.hideLoading();\n        }, 1500);\n\n      }\n      uni.stopPullDownRefresh();\n      uni.showToast({\n        icon: 'none',\n        title: '请稍后重试' });\n\n    };\n    opt.complete = opt.complete || function () {\n      setTimeout(function () {\n        uni.hideLoading();\n      }, 1500);\n      uni.stopPullDownRefresh();\n    };\n    if (opt.debug) {\n      console.log(__f__(opt.data, \" at common/fetch.js:48\"));\n    }\n\n    uni.request({\n      url: baseURL + opt.url,\n      data: opt.data,\n      method: opt.method,\n      header: opt.header,\n      dataType: 'json',\n      success: function success(res) {\n        if (opt.debug) {\n          console.log(__f__(res, \" at common/fetch.js:59\"));\n        }\n\n        if (res.statusCode === 200) {\n          if (res.data.code === 200) {\n            opt.success(res.data.data);\n          } else if (res.data.code === 300) {\n            uni.closeSocket();\n            uni.showModal({\n              title: '提示',\n              content: '登录失效',\n              cancelText: '返回首页',\n              confirmText: '重新登录',\n              success: function success(ret) {\n                uni.removeStorage({\n                  key: 'TOKEN',\n                  success: function success(res) {\n                    if (ret.confirm) {\n                      uni.navigateTo({\n                        url: '/pages/login/login' });\n\n\n                    } else if (ret.cancel) {\n                      uni.reLaunch({\n                        url: '/pages/index/index' });\n\n                    }\n\n                  } });\n\n\n              } });\n\n\n          } else if (res.data.code === 201) {\n\n\n\n            uni.navigateTo({\n              url: \"/pages/wxLogin/wxLogin\" });\n\n          } else {\n            if (res.data.msg) {\n              console.log(__f__(res.data.msg, \" at common/fetch.js:102\"));\n              uni.showToast({\n                title: res.data.msg,\n                icon: 'none' });\n\n            }\n          }\n\n        } else {\n          uni.showToast({\n            title: '服务器错误，请稍后重试',\n            icon: 'none' });\n\n\n        }\n      },\n      fail: function fail() {\n        opt.fail();\n      },\n      complete: function complete() {\n        opt.complete();\n      } });\n\n  },\n  UploadFile: function UploadFile(opt) {\n    var TOKEN = uni.getStorageSync('TOKEN');\n    var Lang = uni.getStorageSync('lang');\n    opt = opt || {};\n    opt.debug = opt.debug || false;\n    opt.url = opt.url || '';\n    opt.header = opt.header || {\n      'Accept': 'application/json',\n      'X-Version': 'V1',\n      'XX-token': TOKEN };\n\n    opt.filePath = opt.filePath || null; //要上传文件资源的路径。   \n    opt.name = opt.name || null; //文件对应的 key , 开发者在服务器端通过这个 key 可以获取到文件二进制内容 \n    opt.filePath = opt.filePath || null;\n    opt.formData = opt.formData || null;\n    opt.success = opt.success || function () {};\n    uni.showLoading({\n      title: \"上传中...\" });\n\n\n    uni.uploadFile({\n      header: opt.header,\n      url: baseURL + opt.url,\n      filePath: opt.filePath,\n      name: opt.name,\n      formData: opt.formData,\n      success: function success(res) {\n        var data = JSON.parse(res.data);\n        if (opt.debug) {\n          console.log(__f__(data, \" at common/fetch.js:155\"));\n        }\n        if (res.statusCode === 200) {\n          uni.hideLoading();\n          if (data.code == 200) {\n            opt.success(data.data);\n          } else if (data.code == 300) {\n            uni.closeSocket();\n            uni.showModal({\n              title: '提示',\n              content: '登录失效',\n              cancelText: '返回首页',\n              confirmText: '重新登录',\n              success: function success(ret) {\n                uni.removeStorage({\n                  key: 'TOKEN',\n                  success: function success(res) {\n                    if (ret.confirm) {\n                      uni.navigateTo({\n                        url: '/pages/login/login' });\n\n\n                    } else if (ret.cancel) {\n                      uni.reLaunch({\n                        url: '/pages/index/index' });\n\n                    }\n\n                  } });\n\n\n              } });\n\n          } else {\n            uni.showToast({\n              title: data.msg,\n              icon: 'none' });\n\n          }\n        } else {\n          uni.showToast({\n            title: '未知错误请稍后重试',\n            icon: 'none' });\n\n        }\n      },\n      fail: function fail() {\n        uni.showToast({\n          icon: 'none',\n          title: '请稍后重试' });\n\n      } });\n\n\n\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 14)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 21:
/*!********************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/store/index.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 12));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectDestructuringEmpty(obj) {if (obj == null) throw new TypeError(\"Cannot destructure undefined\");}\n\n_vue.default.use(_vuex.default);\n\nvar store = new _vuex.default.Store({\n  state: {\n    isLogin: uni.getStorageSync(\"TOKEN\"),\n    userInfo: null,\n    city: uni.getStorageSync('city') || \"定位中\",\n    uList: uni.getStorageSync('UList') || [],\n    msgNum: 0,\n    count: 1,\n    wxInfo: null,\n    shareMsg: {} },\n\n  mutations: {\n    setShareMsg: function setShareMsg(state, obj) {\n      state.shareMsg = obj;\n    },\n    setWxInfo: function setWxInfo(state, info) {\n      state.wxInfo = info;\n    },\n    setCount: function setCount(state, num) {\n      state.count = num;\n    },\n    setLogin: function setLogin(state) {\n      state.isLogin = uni.getStorageSync(\"TOKEN\");\n    },\n    setLogout: function setLogout(state) {\n      state.isLogin = false;\n    },\n    setInfo: function setInfo(state, info) {\n      state.userInfo = info;\n    },\n    setCity: function setCity(state, city) {\n      state.city = city;\n    },\n    addUlist: function addUlist(state, user) {\n      if (state.uList.length === 0) {\n        state.uList.push(user);\n      } else {\n        var add = true;var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n          for (var _iterator = state.uList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var item = _step.value;\n            if (item.id === user.id) {\n              add = false;\n            }\n          }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n        if (add) {\n          state.uList.push(user);\n        }\n      }\n      uni.setStorageSync('UList', state.uList);\n    },\n    delUlist: function delUlist(state, i) {\n      state.uList.splice(i, 1);\n    },\n    updateUlist: function updateUlist(state, uList) {\n      state.uList = uList;\n    },\n    setMsgNum: function setMsgNum(state, num) {\n      state.msgNum = num;\n\n      if (num > 0) {\n        uni.setTabBarBadge({\n          index: 1,\n          text: num + '' });\n\n      } else if (num > 99) {\n        uni.setTabBarBadge({\n          index: 1,\n          text: '99+' });\n\n      } else {\n        uni.removeTabBarBadge({\n          index: 1 });\n\n      }\n    } },\n\n  actions: {\n    navFilter: function navFilter(_ref, e) {_objectDestructuringEmpty(_ref);var\n\n      url =\n      e.currentTarget.dataset.url;\n      var token = uni.getStorageSync(\"TOKEN\") || false;\n      if (token) {\n        uni.navigateTo({\n          url: url });\n\n      } else {\n        uni.showModal({\n          title: \"提示\",\n          content: '请先登录！',\n          confirmText: '立刻登录',\n          success: function success(res) {\n            if (res.confirm) {\n              uni.navigateTo({\n                url: '/pages/login/login' });\n\n            }\n          } });\n\n      }\n    } } });var _default =\n\n\n\nstore;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiVnVleCIsInN0b3JlIiwiU3RvcmUiLCJzdGF0ZSIsImlzTG9naW4iLCJ1bmkiLCJnZXRTdG9yYWdlU3luYyIsInVzZXJJbmZvIiwiY2l0eSIsInVMaXN0IiwibXNnTnVtIiwiY291bnQiLCJ3eEluZm8iLCJzaGFyZU1zZyIsIm11dGF0aW9ucyIsInNldFNoYXJlTXNnIiwib2JqIiwic2V0V3hJbmZvIiwiaW5mbyIsInNldENvdW50IiwibnVtIiwic2V0TG9naW4iLCJzZXRMb2dvdXQiLCJzZXRJbmZvIiwic2V0Q2l0eSIsImFkZFVsaXN0IiwidXNlciIsImxlbmd0aCIsInB1c2giLCJhZGQiLCJpdGVtIiwiaWQiLCJzZXRTdG9yYWdlU3luYyIsImRlbFVsaXN0IiwiaSIsInNwbGljZSIsInVwZGF0ZVVsaXN0Iiwic2V0TXNnTnVtIiwic2V0VGFiQmFyQmFkZ2UiLCJpbmRleCIsInRleHQiLCJyZW1vdmVUYWJCYXJCYWRnZSIsImFjdGlvbnMiLCJuYXZGaWx0ZXIiLCJlIiwidXJsIiwiY3VycmVudFRhcmdldCIsImRhdGFzZXQiLCJ0b2tlbiIsIm5hdmlnYXRlVG8iLCJzaG93TW9kYWwiLCJ0aXRsZSIsImNvbnRlbnQiLCJjb25maXJtVGV4dCIsInN1Y2Nlc3MiLCJyZXMiLCJjb25maXJtIl0sIm1hcHBpbmdzIjoia0lBQUE7QUFDQSx3RTs7QUFFQUEsYUFBSUMsR0FBSixDQUFRQyxhQUFSOztBQUVBLElBQU1DLEtBQUssR0FBRyxJQUFJRCxjQUFLRSxLQUFULENBQWU7QUFDNUJDLE9BQUssRUFBRTtBQUNOQyxXQUFPLEVBQUVDLEdBQUcsQ0FBQ0MsY0FBSixDQUFtQixPQUFuQixDQURIO0FBRU5DLFlBQVEsRUFBRSxJQUZKO0FBR05DLFFBQUksRUFBRUgsR0FBRyxDQUFDQyxjQUFKLENBQW1CLE1BQW5CLEtBQTRCLEtBSDVCO0FBSU5HLFNBQUssRUFBRUosR0FBRyxDQUFDQyxjQUFKLENBQW1CLE9BQW5CLEtBQStCLEVBSmhDO0FBS05JLFVBQU0sRUFBQyxDQUxEO0FBTU5DLFNBQUssRUFBQyxDQU5BO0FBT05DLFVBQU0sRUFBQyxJQVBEO0FBUU5DLFlBQVEsRUFBQyxFQVJILEVBRHFCOztBQVc1QkMsV0FBUyxFQUFFO0FBQ1ZDLGVBRFUsdUJBQ0VaLEtBREYsRUFDUWEsR0FEUixFQUNZO0FBQ3JCYixXQUFLLENBQUNVLFFBQU4sR0FBZUcsR0FBZjtBQUNBLEtBSFM7QUFJVkMsYUFKVSxxQkFJQWQsS0FKQSxFQUlNZSxJQUpOLEVBSVc7QUFDcEJmLFdBQUssQ0FBQ1MsTUFBTixHQUFhTSxJQUFiO0FBQ0EsS0FOUztBQU9WQyxZQVBVLG9CQU9EaEIsS0FQQyxFQU9LaUIsR0FQTCxFQU9TO0FBQ2xCakIsV0FBSyxDQUFDUSxLQUFOLEdBQVlTLEdBQVo7QUFDQSxLQVRTO0FBVVZDLFlBVlUsb0JBVURsQixLQVZDLEVBVU07QUFDZkEsV0FBSyxDQUFDQyxPQUFOLEdBQWdCQyxHQUFHLENBQUNDLGNBQUosQ0FBbUIsT0FBbkIsQ0FBaEI7QUFDQSxLQVpTO0FBYVZnQixhQWJVLHFCQWFBbkIsS0FiQSxFQWFPO0FBQ2hCQSxXQUFLLENBQUNDLE9BQU4sR0FBZ0IsS0FBaEI7QUFDQSxLQWZTO0FBZ0JWbUIsV0FoQlUsbUJBZ0JGcEIsS0FoQkUsRUFnQktlLElBaEJMLEVBZ0JXO0FBQ3BCZixXQUFLLENBQUNJLFFBQU4sR0FBaUJXLElBQWpCO0FBQ0EsS0FsQlM7QUFtQlZNLFdBbkJVLG1CQW1CRnJCLEtBbkJFLEVBbUJLSyxJQW5CTCxFQW1CVztBQUNwQkwsV0FBSyxDQUFDSyxJQUFOLEdBQWFBLElBQWI7QUFDQSxLQXJCUztBQXNCVmlCLFlBdEJVLG9CQXNCRHRCLEtBdEJDLEVBc0JNdUIsSUF0Qk4sRUFzQlk7QUFDckIsVUFBSXZCLEtBQUssQ0FBQ00sS0FBTixDQUFZa0IsTUFBWixLQUF1QixDQUEzQixFQUE4QjtBQUM3QnhCLGFBQUssQ0FBQ00sS0FBTixDQUFZbUIsSUFBWixDQUFpQkYsSUFBakI7QUFDQSxPQUZELE1BRU87QUFDTixZQUFJRyxHQUFHLEdBQUcsSUFBVixDQURNO0FBRU4sK0JBQWlCMUIsS0FBSyxDQUFDTSxLQUF2Qiw4SEFBOEIsS0FBckJxQixJQUFxQjtBQUM3QixnQkFBSUEsSUFBSSxDQUFDQyxFQUFMLEtBQVlMLElBQUksQ0FBQ0ssRUFBckIsRUFBeUI7QUFDeEJGLGlCQUFHLEdBQUcsS0FBTjtBQUNBO0FBQ0QsV0FOSztBQU9OLFlBQUlBLEdBQUosRUFBUztBQUNSMUIsZUFBSyxDQUFDTSxLQUFOLENBQVltQixJQUFaLENBQWlCRixJQUFqQjtBQUNBO0FBQ0Q7QUFDRHJCLFNBQUcsQ0FBQzJCLGNBQUosQ0FBbUIsT0FBbkIsRUFBNEI3QixLQUFLLENBQUNNLEtBQWxDO0FBQ0EsS0FyQ1M7QUFzQ1Z3QixZQXRDVSxvQkFzQ0Q5QixLQXRDQyxFQXNDTStCLENBdENOLEVBc0NTO0FBQ2xCL0IsV0FBSyxDQUFDTSxLQUFOLENBQVkwQixNQUFaLENBQW1CRCxDQUFuQixFQUFzQixDQUF0QjtBQUNBLEtBeENTO0FBeUNWRSxlQXpDVSx1QkF5Q0VqQyxLQXpDRixFQXlDUU0sS0F6Q1IsRUF5Q2M7QUFDdkJOLFdBQUssQ0FBQ00sS0FBTixHQUFZQSxLQUFaO0FBQ0EsS0EzQ1M7QUE0Q1Y0QixhQTVDVSxxQkE0Q0FsQyxLQTVDQSxFQTRDTWlCLEdBNUNOLEVBNENVO0FBQ25CakIsV0FBSyxDQUFDTyxNQUFOLEdBQWFVLEdBQWI7O0FBRUEsVUFBSUEsR0FBRyxHQUFHLENBQVYsRUFBYTtBQUNaZixXQUFHLENBQUNpQyxjQUFKLENBQW1CO0FBQ2xCQyxlQUFLLEVBQUUsQ0FEVztBQUVsQkMsY0FBSSxFQUFFcEIsR0FBRyxHQUFHLEVBRk0sRUFBbkI7O0FBSUEsT0FMRCxNQUtPLElBQUlBLEdBQUcsR0FBRyxFQUFWLEVBQWM7QUFDcEJmLFdBQUcsQ0FBQ2lDLGNBQUosQ0FBbUI7QUFDbEJDLGVBQUssRUFBRSxDQURXO0FBRWxCQyxjQUFJLEVBQUUsS0FGWSxFQUFuQjs7QUFJQSxPQUxNLE1BS0Y7QUFDSm5DLFdBQUcsQ0FBQ29DLGlCQUFKLENBQXNCO0FBQ3JCRixlQUFLLEVBQUMsQ0FEZSxFQUF0Qjs7QUFHQTtBQUNELEtBOURTLEVBWGlCOztBQTJFNUJHLFNBQU8sRUFBRTtBQUNSQyxhQURRLDJCQUNNQyxDQUROLEVBQ1M7O0FBRWZDLFNBRmU7QUFHWkQsT0FBQyxDQUFDRSxhQUFGLENBQWdCQyxPQUhKLENBRWZGLEdBRmU7QUFJaEIsVUFBSUcsS0FBSyxHQUFHM0MsR0FBRyxDQUFDQyxjQUFKLENBQW1CLE9BQW5CLEtBQStCLEtBQTNDO0FBQ0EsVUFBSTBDLEtBQUosRUFBVztBQUNWM0MsV0FBRyxDQUFDNEMsVUFBSixDQUFlO0FBQ2RKLGFBQUcsRUFBRUEsR0FEUyxFQUFmOztBQUdBLE9BSkQsTUFJTztBQUNOeEMsV0FBRyxDQUFDNkMsU0FBSixDQUFjO0FBQ2JDLGVBQUssRUFBRSxJQURNO0FBRWJDLGlCQUFPLEVBQUUsT0FGSTtBQUdiQyxxQkFBVyxFQUFFLE1BSEE7QUFJYkMsaUJBSmEsbUJBSUxDLEdBSkssRUFJQTtBQUNaLGdCQUFJQSxHQUFHLENBQUNDLE9BQVIsRUFBaUI7QUFDaEJuRCxpQkFBRyxDQUFDNEMsVUFBSixDQUFlO0FBQ2RKLG1CQUFHLEVBQUUsb0JBRFMsRUFBZjs7QUFHQTtBQUNELFdBVlksRUFBZDs7QUFZQTtBQUNELEtBeEJPLEVBM0VtQixFQUFmLENBQWQsQzs7OztBQXVHZTVDLEsiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBWdWV4IGZyb20gJ3Z1ZXgnXG5cblZ1ZS51c2UoVnVleClcblxuY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7XG5cdHN0YXRlOiB7XG5cdFx0aXNMb2dpbjogdW5pLmdldFN0b3JhZ2VTeW5jKFwiVE9LRU5cIiksXG5cdFx0dXNlckluZm86IG51bGwsXG5cdFx0Y2l0eTogdW5pLmdldFN0b3JhZ2VTeW5jKCdjaXR5Jyl8fFwi5a6a5L2N5LitXCIsXG5cdFx0dUxpc3Q6IHVuaS5nZXRTdG9yYWdlU3luYygnVUxpc3QnKSB8fCBbXSxcblx0XHRtc2dOdW06MCxcblx0XHRjb3VudDoxLFxuXHRcdHd4SW5mbzpudWxsLFxuXHRcdHNoYXJlTXNnOnt9XG5cdH0sXG5cdG11dGF0aW9uczoge1xuXHRcdHNldFNoYXJlTXNnKHN0YXRlLG9iail7XG5cdFx0XHRzdGF0ZS5zaGFyZU1zZz1vYmpcblx0XHR9LFxuXHRcdHNldFd4SW5mbyhzdGF0ZSxpbmZvKXtcblx0XHRcdHN0YXRlLnd4SW5mbz1pbmZvXG5cdFx0fSxcblx0XHRzZXRDb3VudChzdGF0ZSxudW0pe1xuXHRcdFx0c3RhdGUuY291bnQ9bnVtXG5cdFx0fSxcblx0XHRzZXRMb2dpbihzdGF0ZSkge1xuXHRcdFx0c3RhdGUuaXNMb2dpbiA9IHVuaS5nZXRTdG9yYWdlU3luYyhcIlRPS0VOXCIpXG5cdFx0fSxcblx0XHRzZXRMb2dvdXQoc3RhdGUpIHtcblx0XHRcdHN0YXRlLmlzTG9naW4gPSBmYWxzZVxuXHRcdH0sXG5cdFx0c2V0SW5mbyhzdGF0ZSwgaW5mbykge1xuXHRcdFx0c3RhdGUudXNlckluZm8gPSBpbmZvXG5cdFx0fSxcblx0XHRzZXRDaXR5KHN0YXRlLCBjaXR5KSB7XG5cdFx0XHRzdGF0ZS5jaXR5ID0gY2l0eVxuXHRcdH0sXG5cdFx0YWRkVWxpc3Qoc3RhdGUsIHVzZXIpIHtcblx0XHRcdGlmIChzdGF0ZS51TGlzdC5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0c3RhdGUudUxpc3QucHVzaCh1c2VyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBhZGQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKGxldCBpdGVtIG9mIHN0YXRlLnVMaXN0KSB7XG5cdFx0XHRcdFx0aWYgKGl0ZW0uaWQgPT09IHVzZXIuaWQpIHtcblx0XHRcdFx0XHRcdGFkZCA9IGZhbHNlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhZGQpIHtcblx0XHRcdFx0XHRzdGF0ZS51TGlzdC5wdXNoKHVzZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR1bmkuc2V0U3RvcmFnZVN5bmMoJ1VMaXN0Jywgc3RhdGUudUxpc3QpO1xuXHRcdH0sXG5cdFx0ZGVsVWxpc3Qoc3RhdGUsIGkpIHtcblx0XHRcdHN0YXRlLnVMaXN0LnNwbGljZShpLCAxKTtcblx0XHR9LFxuXHRcdHVwZGF0ZVVsaXN0KHN0YXRlLHVMaXN0KXtcblx0XHRcdHN0YXRlLnVMaXN0PXVMaXN0XG5cdFx0fSxcblx0XHRzZXRNc2dOdW0oc3RhdGUsbnVtKXtcblx0XHRcdHN0YXRlLm1zZ051bT1udW07XG5cdFx0XHRcblx0XHRcdGlmIChudW0gPiAwKSB7XG5cdFx0XHRcdHVuaS5zZXRUYWJCYXJCYWRnZSh7XG5cdFx0XHRcdFx0aW5kZXg6IDEsXG5cdFx0XHRcdFx0dGV4dDogbnVtICsgJydcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKG51bSA+IDk5KSB7XG5cdFx0XHRcdHVuaS5zZXRUYWJCYXJCYWRnZSh7XG5cdFx0XHRcdFx0aW5kZXg6IDEsXG5cdFx0XHRcdFx0dGV4dDogJzk5Kydcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0dW5pLnJlbW92ZVRhYkJhckJhZGdlKHtcblx0XHRcdFx0XHRpbmRleDoxXG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRhY3Rpb25zOiB7XG5cdFx0bmF2RmlsdGVyKHt9LCBlKSB7XG5cdFx0XHRsZXQge1xuXHRcdFx0XHR1cmxcblx0XHRcdH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcblx0XHRcdGxldCB0b2tlbiA9IHVuaS5nZXRTdG9yYWdlU3luYyhcIlRPS0VOXCIpIHx8IGZhbHNlO1xuXHRcdFx0aWYgKHRva2VuKSB7XG5cdFx0XHRcdHVuaS5uYXZpZ2F0ZVRvKHtcblx0XHRcdFx0XHR1cmw6IHVybFxuXHRcdFx0XHR9KVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dW5pLnNob3dNb2RhbCh7XG5cdFx0XHRcdFx0dGl0bGU6IFwi5o+Q56S6XCIsXG5cdFx0XHRcdFx0Y29udGVudDogJ+ivt+WFiOeZu+W9le+8gScsXG5cdFx0XHRcdFx0Y29uZmlybVRleHQ6ICfnq4vliLvnmbvlvZUnLFxuXHRcdFx0XHRcdHN1Y2Nlc3MocmVzKSB7XG5cdFx0XHRcdFx0XHRpZiAocmVzLmNvbmZpcm0pIHtcblx0XHRcdFx0XHRcdFx0dW5pLm5hdmlnYXRlVG8oe1xuXHRcdFx0XHRcdFx0XHRcdHVybDogJy9wYWdlcy9sb2dpbi9sb2dpbidcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBzdG9yZVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),

/***/ 28:
/*!***********************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/static/banner.png ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"static/img/banner.0de27d67.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzdGF0aWMvaW1nL2Jhbm5lci4wZGUyN2Q2Ny5wbmdcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 37:
/*!*********************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/common/commonMessageZhCn.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.commonMessage = void 0;var commonMessage = {\n  'location.getting': '定位中',\n  'location.city.getting': '正在定位城市',\n  'location.county.getting': '正在获取区县',\n\n  'location.city.fail': '定位失败，请重试',\n  'location.county.fail': '请求区县失败，请重试' };exports.commonMessage = commonMessage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2NvbW1vbk1lc3NhZ2VaaENuLmpzIl0sIm5hbWVzIjpbImNvbW1vbk1lc3NhZ2UiXSwibWFwcGluZ3MiOiI2RkFBTyxJQUFNQSxhQUFhLEdBQUc7QUFDM0Isc0JBQW9CLEtBRE87QUFFM0IsMkJBQXlCLFFBRkU7QUFHM0IsNkJBQTJCLFFBSEE7O0FBSzNCLHdCQUFzQixVQUxLO0FBTTNCLDBCQUF3QixZQU5HLEVBQXRCLEMiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgY29tbW9uTWVzc2FnZSA9IHtcbiAgJ2xvY2F0aW9uLmdldHRpbmcnOiAn5a6a5L2N5LitJyxcbiAgJ2xvY2F0aW9uLmNpdHkuZ2V0dGluZyc6ICfmraPlnKjlrprkvY3ln47luIInLFxuICAnbG9jYXRpb24uY291bnR5LmdldHRpbmcnOiAn5q2j5Zyo6I635Y+W5Yy65Y6/JyxcblxuICAnbG9jYXRpb24uY2l0eS5mYWlsJzogJ+WumuS9jeWksei0pe+8jOivt+mHjeivlScsXG4gICdsb2NhdGlvbi5jb3VudHkuZmFpbCc6ICfor7fmsYLljLrljr/lpLHotKXvvIzor7fph43or5UnLFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n");

/***/ }),

/***/ 370:
/*!******************************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/components/u-parse/libs/html2json.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _wxDiscode = _interopRequireDefault(__webpack_require__(/*! ./wxDiscode */ 371));\nvar _htmlparser = _interopRequireDefault(__webpack_require__(/*! ./htmlparser */ 372));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**\n                                                                                                                                                                 * html2Json 改造来自: https://github.com/Jxck/html2json\n                                                                                                                                                                 *\n                                                                                                                                                                 *\n                                                                                                                                                                 * author: Di (微信小程序开发工程师)\n                                                                                                                                                                 * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\n                                                                                                                                                                 *               垂直微信小程序开发交流社区\n                                                                                                                                                                 *\n                                                                                                                                                                 * github地址: https://github.com/icindy/wxParse\n                                                                                                                                                                 *\n                                                                                                                                                                 * for: 微信小程序富文本解析\n                                                                                                                                                                 * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\n                                                                                                                                                                 */function makeMap(str) {var obj = {};var items = str.split(',');for (var i = 0; i < items.length; i += 1) {obj[items[i]] = true;}return obj;} // Block Elements - HTML 5\nvar block = makeMap('br,code,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video'); // Inline Elements - HTML 5\nvar inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var');\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');\n\nfunction removeDOCTYPE(html) {\n  var isDocument = /<body.*>([^]*)<\\/body>/.test(html);\n  return isDocument ? RegExp.$1 : html;\n}\n\nfunction trimHtml(html) {\n  return html.\n  replace(/<!--.*?-->/gi, '').\n  replace(/\\/\\*.*?\\*\\//gi, '').\n  replace(/[ ]+</gi, '<').\n  replace(/<script[^]*<\\/script>/gi, '').\n  replace(/<style[^]*<\\/style>/gi, '');\n}\n\nfunction getScreenInfo() {\n  var screen = {};\n  wx.getSystemInfo({\n    success: function success(res) {\n      screen.width = res.windowWidth;\n      screen.height = res.windowHeight;\n    } });\n\n  return screen;\n}\n\nfunction html2json(html, customHandler, imageProp, host) {\n  // 处理字符串\n  html = removeDOCTYPE(html);\n  html = trimHtml(html);\n  html = _wxDiscode.default.strDiscode(html);\n  // 生成node节点\n  var bufArray = [];\n  var results = {\n    nodes: [],\n    imageUrls: [] };\n\n\n  var screen = getScreenInfo();\n  function Node(tag) {\n    this.node = 'element';\n    this.tag = tag;\n\n    this.$screen = screen;\n  }\n\n  (0, _htmlparser.default)(html, {\n    start: function start(tag, attrs, unary) {\n      // node for this element\n      var node = new Node(tag);\n\n      if (bufArray.length !== 0) {\n        var parent = bufArray[0];\n        if (parent.nodes === undefined) {\n          parent.nodes = [];\n        }\n      }\n\n      if (block[tag]) {\n        node.tagType = 'block';\n      } else if (inline[tag]) {\n        node.tagType = 'inline';\n      } else if (closeSelf[tag]) {\n        node.tagType = 'closeSelf';\n      }\n\n      node.attr = attrs.reduce(function (pre, attr) {var\n        name = attr.name;var\n        value = attr.value;\n        if (name === 'class') {\n          node.classStr = value;\n        }\n        // has multi attibutes\n        // make it array of attribute\n        if (name === 'style') {\n          node.styleStr = value;\n        }\n        if (value.match(/ /)) {\n          value = value.split(' ');\n        }\n\n        // if attr already exists\n        // merge it\n        if (pre[name]) {\n          if (Array.isArray(pre[name])) {\n            // already array, push to last\n            pre[name].push(value);\n          } else {\n            // single value, make it array\n            pre[name] = [pre[name], value];\n          }\n        } else {\n          // not exist, put it\n          pre[name] = value;\n        }\n\n        return pre;\n      }, {});\n\n      // 优化样式相关属性\n      if (node.classStr) {\n        node.classStr += \" \".concat(node.tag);\n      } else {\n        node.classStr = node.tag;\n      }\n      if (node.tagType === 'inline') {\n        node.classStr += ' inline';\n      }\n\n      // 对img添加额外数据\n      if (node.tag === 'img') {\n        var imgUrl = node.attr.src;\n        imgUrl = _wxDiscode.default.urlToHttpUrl(imgUrl, imageProp.domain);\n        Object.assign(node.attr, imageProp, {\n          src: imgUrl || '' });\n\n        if (imgUrl) {\n          results.imageUrls.push(imgUrl);\n        }\n      }\n\n      // 处理a标签属性\n      if (node.tag === 'a') {\n        node.attr.href = node.attr.href || '';\n      }\n\n      // 处理font标签样式属性\n      if (node.tag === 'font') {\n        var fontSize = [\n        'x-small',\n        'small',\n        'medium',\n        'large',\n        'x-large',\n        'xx-large',\n        '-webkit-xxx-large'];\n\n        var styleAttrs = {\n          color: 'color',\n          face: 'font-family',\n          size: 'font-size' };\n\n        if (!node.styleStr) node.styleStr = '';\n        Object.keys(styleAttrs).forEach(function (key) {\n          if (node.attr[key]) {\n            var value = key === 'size' ? fontSize[node.attr[key] - 1] : node.attr[key];\n            node.styleStr += \"\".concat(styleAttrs[key], \": \").concat(value, \";\");\n          }\n        });\n      }\n\n      // 临时记录source资源\n      if (node.tag === 'source') {\n        results.source = node.attr.src;\n      }\n\n      if (customHandler.start) {\n        customHandler.start(node, results);\n      }\n\n      if (unary) {\n        // if this tag doesn't have end tag\n        // like <img src=\"hoge.png\"/>\n        // add to parents\n        var _parent = bufArray[0] || results;\n        if (_parent.nodes === undefined) {\n          _parent.nodes = [];\n        }\n        _parent.nodes.push(node);\n      } else {\n        bufArray.unshift(node);\n      }\n    },\n    end: function end(tag) {\n      // merge into parent tag\n      var node = bufArray.shift();\n      if (node.tag !== tag) {\n        console.error(__f__('invalid state: mismatch end tag', \" at components/u-parse/libs/html2json.js:211\"));\n      }\n\n      // 当有缓存source资源时于于video补上src资源\n      if (node.tag === 'video' && results.source) {\n        node.attr.src = results.source;\n        delete results.source;\n      }\n\n      if (customHandler.end) {\n        customHandler.end(node, results);\n      }\n\n      if (bufArray.length === 0) {\n        results.nodes.push(node);\n      } else {\n        var parent = bufArray[0];\n        if (!parent.nodes) {\n          parent.nodes = [];\n        }\n        parent.nodes.push(node);\n      }\n    },\n    chars: function chars(text) {\n      if (!text.trim()) return;\n\n      var node = {\n        node: 'text',\n        text: text };\n\n\n      if (customHandler.chars) {\n        customHandler.chars(node, results);\n      }\n\n      if (bufArray.length === 0) {\n        results.nodes.push(node);\n      } else {\n        var parent = bufArray[0];\n        if (parent.nodes === undefined) {\n          parent.nodes = [];\n        }\n        parent.nodes.push(node);\n      }\n    } });\n\n\n  return results;\n}var _default =\n\nhtml2json;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 14)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///370\n");

/***/ }),

/***/ 371:
/*!******************************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/components/u-parse/libs/wxDiscode.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; // HTML 支持的数学符号\nfunction strNumDiscode(str) {\n  str = str.replace(/&forall;/g, '∀');\n  str = str.replace(/&part;/g, '∂');\n  str = str.replace(/&exist;/g, '∃');\n  str = str.replace(/&empty;/g, '∅');\n  str = str.replace(/&nabla;/g, '∇');\n  str = str.replace(/&isin;/g, '∈');\n  str = str.replace(/&notin;/g, '∉');\n  str = str.replace(/&ni;/g, '∋');\n  str = str.replace(/&prod;/g, '∏');\n  str = str.replace(/&sum;/g, '∑');\n  str = str.replace(/&minus;/g, '−');\n  str = str.replace(/&lowast;/g, '∗');\n  str = str.replace(/&radic;/g, '√');\n  str = str.replace(/&prop;/g, '∝');\n  str = str.replace(/&infin;/g, '∞');\n  str = str.replace(/&ang;/g, '∠');\n  str = str.replace(/&and;/g, '∧');\n  str = str.replace(/&or;/g, '∨');\n  str = str.replace(/&cap;/g, '∩');\n  str = str.replace(/&cup;/g, '∪');\n  str = str.replace(/&int;/g, '∫');\n  str = str.replace(/&there4;/g, '∴');\n  str = str.replace(/&sim;/g, '∼');\n  str = str.replace(/&cong;/g, '≅');\n  str = str.replace(/&asymp;/g, '≈');\n  str = str.replace(/&ne;/g, '≠');\n  str = str.replace(/&le;/g, '≤');\n  str = str.replace(/&ge;/g, '≥');\n  str = str.replace(/&sub;/g, '⊂');\n  str = str.replace(/&sup;/g, '⊃');\n  str = str.replace(/&nsub;/g, '⊄');\n  str = str.replace(/&sube;/g, '⊆');\n  str = str.replace(/&supe;/g, '⊇');\n  str = str.replace(/&oplus;/g, '⊕');\n  str = str.replace(/&otimes;/g, '⊗');\n  str = str.replace(/&perp;/g, '⊥');\n  str = str.replace(/&sdot;/g, '⋅');\n  return str;\n}\n\n// HTML 支持的希腊字母\nfunction strGreeceDiscode(str) {\n  str = str.replace(/&Alpha;/g, 'Α');\n  str = str.replace(/&Beta;/g, 'Β');\n  str = str.replace(/&Gamma;/g, 'Γ');\n  str = str.replace(/&Delta;/g, 'Δ');\n  str = str.replace(/&Epsilon;/g, 'Ε');\n  str = str.replace(/&Zeta;/g, 'Ζ');\n  str = str.replace(/&Eta;/g, 'Η');\n  str = str.replace(/&Theta;/g, 'Θ');\n  str = str.replace(/&Iota;/g, 'Ι');\n  str = str.replace(/&Kappa;/g, 'Κ');\n  str = str.replace(/&Lambda;/g, 'Λ');\n  str = str.replace(/&Mu;/g, 'Μ');\n  str = str.replace(/&Nu;/g, 'Ν');\n  str = str.replace(/&Xi;/g, 'Ν');\n  str = str.replace(/&Omicron;/g, 'Ο');\n  str = str.replace(/&Pi;/g, 'Π');\n  str = str.replace(/&Rho;/g, 'Ρ');\n  str = str.replace(/&Sigma;/g, 'Σ');\n  str = str.replace(/&Tau;/g, 'Τ');\n  str = str.replace(/&Upsilon;/g, 'Υ');\n  str = str.replace(/&Phi;/g, 'Φ');\n  str = str.replace(/&Chi;/g, 'Χ');\n  str = str.replace(/&Psi;/g, 'Ψ');\n  str = str.replace(/&Omega;/g, 'Ω');\n\n  str = str.replace(/&alpha;/g, 'α');\n  str = str.replace(/&beta;/g, 'β');\n  str = str.replace(/&gamma;/g, 'γ');\n  str = str.replace(/&delta;/g, 'δ');\n  str = str.replace(/&epsilon;/g, 'ε');\n  str = str.replace(/&zeta;/g, 'ζ');\n  str = str.replace(/&eta;/g, 'η');\n  str = str.replace(/&theta;/g, 'θ');\n  str = str.replace(/&iota;/g, 'ι');\n  str = str.replace(/&kappa;/g, 'κ');\n  str = str.replace(/&lambda;/g, 'λ');\n  str = str.replace(/&mu;/g, 'μ');\n  str = str.replace(/&nu;/g, 'ν');\n  str = str.replace(/&xi;/g, 'ξ');\n  str = str.replace(/&omicron;/g, 'ο');\n  str = str.replace(/&pi;/g, 'π');\n  str = str.replace(/&rho;/g, 'ρ');\n  str = str.replace(/&sigmaf;/g, 'ς');\n  str = str.replace(/&sigma;/g, 'σ');\n  str = str.replace(/&tau;/g, 'τ');\n  str = str.replace(/&upsilon;/g, 'υ');\n  str = str.replace(/&phi;/g, 'φ');\n  str = str.replace(/&chi;/g, 'χ');\n  str = str.replace(/&psi;/g, 'ψ');\n  str = str.replace(/&omega;/g, 'ω');\n  str = str.replace(/&thetasym;/g, 'ϑ');\n  str = str.replace(/&upsih;/g, 'ϒ');\n  str = str.replace(/&piv;/g, 'ϖ');\n  str = str.replace(/&middot;/g, '·');\n  return str;\n}\n\nfunction strcharacterDiscode(str) {\n  // 加入常用解析\n  str = str.replace(/&nbsp;/g, ' ');\n  str = str.replace(/&ensp;/g, ' ');\n  str = str.replace(/&emsp;/g, '　');\n  str = str.replace(/&quot;/g, \"'\");\n  str = str.replace(/&amp;/g, '&');\n  str = str.replace(/&lt;/g, '<');\n  str = str.replace(/&gt;/g, '>');\n  str = str.replace(/&#8226;/g, '•');\n\n  return str;\n}\n\n// HTML 支持的其他实体\nfunction strOtherDiscode(str) {\n  str = str.replace(/&OElig;/g, 'Œ');\n  str = str.replace(/&oelig;/g, 'œ');\n  str = str.replace(/&Scaron;/g, 'Š');\n  str = str.replace(/&scaron;/g, 'š');\n  str = str.replace(/&Yuml;/g, 'Ÿ');\n  str = str.replace(/&fnof;/g, 'ƒ');\n  str = str.replace(/&circ;/g, 'ˆ');\n  str = str.replace(/&tilde;/g, '˜');\n  str = str.replace(/&ensp;/g, '');\n  str = str.replace(/&emsp;/g, '');\n  str = str.replace(/&thinsp;/g, '');\n  str = str.replace(/&zwnj;/g, '');\n  str = str.replace(/&zwj;/g, '');\n  str = str.replace(/&lrm;/g, '');\n  str = str.replace(/&rlm;/g, '');\n  str = str.replace(/&ndash;/g, '–');\n  str = str.replace(/&mdash;/g, '—');\n  str = str.replace(/&lsquo;/g, '‘');\n  str = str.replace(/&rsquo;/g, '’');\n  str = str.replace(/&sbquo;/g, '‚');\n  str = str.replace(/&ldquo;/g, '“');\n  str = str.replace(/&rdquo;/g, '”');\n  str = str.replace(/&bdquo;/g, '„');\n  str = str.replace(/&dagger;/g, '†');\n  str = str.replace(/&Dagger;/g, '‡');\n  str = str.replace(/&bull;/g, '•');\n  str = str.replace(/&hellip;/g, '…');\n  str = str.replace(/&permil;/g, '‰');\n  str = str.replace(/&prime;/g, '′');\n  str = str.replace(/&Prime;/g, '″');\n  str = str.replace(/&lsaquo;/g, '‹');\n  str = str.replace(/&rsaquo;/g, '›');\n  str = str.replace(/&oline;/g, '‾');\n  str = str.replace(/&euro;/g, '€');\n  str = str.replace(/&trade;/g, '™');\n\n  str = str.replace(/&larr;/g, '←');\n  str = str.replace(/&uarr;/g, '↑');\n  str = str.replace(/&rarr;/g, '→');\n  str = str.replace(/&darr;/g, '↓');\n  str = str.replace(/&harr;/g, '↔');\n  str = str.replace(/&crarr;/g, '↵');\n  str = str.replace(/&lceil;/g, '⌈');\n  str = str.replace(/&rceil;/g, '⌉');\n\n  str = str.replace(/&lfloor;/g, '⌊');\n  str = str.replace(/&rfloor;/g, '⌋');\n  str = str.replace(/&loz;/g, '◊');\n  str = str.replace(/&spades;/g, '♠');\n  str = str.replace(/&clubs;/g, '♣');\n  str = str.replace(/&hearts;/g, '♥');\n\n  str = str.replace(/&diams;/g, '♦');\n  str = str.replace(/&#39;/g, \"'\");\n  return str;\n}\n\nfunction strDiscode(str) {\n  str = strNumDiscode(str);\n  str = strGreeceDiscode(str);\n  str = strcharacterDiscode(str);\n  str = strOtherDiscode(str);\n  return str;\n}\n\nfunction urlToHttpUrl(url, domain) {\n  if (/^\\/\\//.test(url)) {\n    return \"https:\".concat(url);\n  } else if (/^\\//.test(url)) {\n    return \"https://\".concat(domain).concat(url);\n  }\n  return url;\n}var _default =\n\n{\n  strDiscode: strDiscode,\n  urlToHttpUrl: urlToHttpUrl };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///371\n");

/***/ }),

/***/ 372:
/*!*******************************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/components/u-parse/libs/htmlparser.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /**\n                                                                                                      *\n                                                                                                      * htmlParser改造自: https://github.com/blowsie/Pure-JavaScript-HTML5-Parser\n                                                                                                      *\n                                                                                                      * author: Di (微信小程序开发工程师)\n                                                                                                      * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\n                                                                                                      *               垂直微信小程序开发交流社区\n                                                                                                      *\n                                                                                                      * github地址: https://github.com/icindy/wxParse\n                                                                                                      *\n                                                                                                      * for: 微信小程序富文本解析\n                                                                                                      * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\n                                                                                                      */\n// Regular Expressions for parsing tags and attributes\n\nvar startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z0-9_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nvar endTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nvar attr = /([a-zA-Z0-9_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n\nfunction makeMap(str) {\n  var obj = {};\n  var items = str.split(',');\n  for (var i = 0; i < items.length; i += 1) {obj[items[i]] = true;}\n  return obj;\n}\n\n// Empty Elements - HTML 5\nvar empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr');\n\n// Block Elements - HTML 5\nvar block = makeMap('address,code,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video');\n\n// Inline Elements - HTML 5\nvar inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var');\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');\n\n// Attributes that have their values filled in disabled=\"disabled\"\nvar fillAttrs = makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');\n\nfunction HTMLParser(html, handler) {\n  var index;\n  var chars;\n  var match;\n  var last = html;\n  var stack = [];\n\n  stack.last = function () {return stack[stack.length - 1];};\n\n  function parseEndTag(tag, tagName) {\n    // If no tag name is provided, clean shop\n    var pos;\n    if (!tagName) {\n      pos = 0;\n    } else {\n      // Find the closest opened tag of the same type\n      tagName = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos -= 1) {\n        if (stack[pos] === tagName) break;\n      }\n    }\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i -= 1) {\n        if (handler.end) handler.end(stack[i]);\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n    }\n  }\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = tagName.toLowerCase();\n\n    if (block[tagName]) {\n      while (stack.last() && inline[stack.last()]) {\n        parseEndTag('', stack.last());\n      }\n    }\n\n    if (closeSelf[tagName] && stack.last() === tagName) {\n      parseEndTag('', tagName);\n    }\n\n    unary = empty[tagName] || !!unary;\n\n    if (!unary) stack.push(tagName);\n\n    if (handler.start) {\n      var attrs = [];\n\n      rest.replace(attr, function genAttr(matches, name) {\n        var value = arguments[2] || arguments[3] || arguments[4] || (fillAttrs[name] ? name : '');\n\n        attrs.push({\n          name: name,\n          value: value,\n          escaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\"') // \"\n        });\n      });\n\n      if (handler.start) {\n        handler.start(tagName, attrs, unary);\n      }\n    }\n  }\n\n  while (html) {\n    chars = true;\n\n    if (html.indexOf('</') === 0) {\n      match = html.match(endTag);\n\n      if (match) {\n        html = html.substring(match[0].length);\n        match[0].replace(endTag, parseEndTag);\n        chars = false;\n      }\n\n      // start tag\n    } else if (html.indexOf('<') === 0) {\n      match = html.match(startTag);\n\n      if (match) {\n        html = html.substring(match[0].length);\n        match[0].replace(startTag, parseStartTag);\n        chars = false;\n      }\n    }\n\n    if (chars) {\n      index = html.indexOf('<');\n      var text = '';\n      while (index === 0) {\n        text += '<';\n        html = html.substring(1);\n        index = html.indexOf('<');\n      }\n      text += index < 0 ? html : html.substring(0, index);\n      html = index < 0 ? '' : html.substring(index);\n\n      if (handler.chars) handler.chars(text);\n    }\n\n    if (html === last) throw new Error(\"Parse Error: \".concat(html));\n    last = html;\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n}var _default =\n\nHTMLParser;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///372\n");

/***/ }),

/***/ 38:
/*!*****************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/common/autoPredictor.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.AutoPredictor = void 0;var _citydata = __webpack_require__(/*! ./citydata */ 15);\nvar _util = _interopRequireDefault(__webpack_require__(/*! ./util */ 13));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\n\nisNotEmpty = _util.default.isNotEmpty,isChinese = _util.default.isChinese,getSlicedName = _util.default.getSlicedName;\n\n/*\n                                                                                                                       * AutoPredictor 实例一定有两个对外的接口：\n                                                                                                                       * 1. 接收 输入框输入的值\n                                                                                                                       * 2. 返回 最终匹配到的数组\n                                                                                                                       */var\nAutoPredictor = /*#__PURE__*/function () {\n  function AutoPredictor(inputContent) {_classCallCheck(this, AutoPredictor);\n    this.content = inputContent.toLowerCase();\n  }\n\n  // 输入框自动联想搜索\n  _createClass(AutoPredictor, [{ key: \"associativeSearch\", value: function associativeSearch() {\n      // search\n      var tempList = this.searchList(this.content);\n      // get final list to show\n      var resultList = this.showList(tempList);\n      return resultList;\n    } }, { key: \"searchList\", value: function searchList(\n\n    str) {var _this = this;\n      var targetCity;\n      return _citydata.CITY_LIST.filter(\n      function (city) {\n        targetCity = _this.getTargetCity(str, city);\n        return targetCity && targetCity == str;\n      });\n\n    } }, { key: \"getTargetCity\", value: function getTargetCity(\n\n    str, cityObj) {\n      if (isChinese(str)) {\n        var slicedChineseName = getSlicedName(cityObj, 'city', str.length);\n        return slicedChineseName;\n      } else {\n        var slicedPinyinName = getSlicedName(cityObj, 'short', str.length).toLowerCase();\n        return slicedPinyinName;\n      }\n      // 在城市数据中，添加简拼到“shorter”属性，就可以实现简拼搜索\n      // getSlicedName(cityObj, 'shorter', str.length).toLowerCase()\n    } }, { key: \"showList\", value: function showList(\n\n    array) {\n      return isNotEmpty(array) ? array.map(function (item) {return { city: item.city, code: item.code };}) : _citydata.CITY_NOT_FOUND;\n    } }]);return AutoPredictor;}();exports.AutoPredictor = AutoPredictor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2F1dG9QcmVkaWN0b3IuanMiXSwibmFtZXMiOlsiaXNOb3RFbXB0eSIsInV0aWxzIiwiaXNDaGluZXNlIiwiZ2V0U2xpY2VkTmFtZSIsIkF1dG9QcmVkaWN0b3IiLCJpbnB1dENvbnRlbnQiLCJjb250ZW50IiwidG9Mb3dlckNhc2UiLCJ0ZW1wTGlzdCIsInNlYXJjaExpc3QiLCJyZXN1bHRMaXN0Iiwic2hvd0xpc3QiLCJzdHIiLCJ0YXJnZXRDaXR5IiwiQ0lUWV9MSVNUIiwiZmlsdGVyIiwiY2l0eSIsImdldFRhcmdldENpdHkiLCJjaXR5T2JqIiwic2xpY2VkQ2hpbmVzZU5hbWUiLCJsZW5ndGgiLCJzbGljZWRQaW55aW5OYW1lIiwiYXJyYXkiLCJtYXAiLCJpdGVtIiwiY29kZSIsIkNJVFlfTk9UX0ZPVU5EIl0sIm1hcHBpbmdzIjoiNkZBQUE7QUFDQSwwRTs7QUFFUUEsVSxHQUF5Q0MsYSxDQUF6Q0QsVSxDQUFZRSxTLEdBQTZCRCxhLENBQTdCQyxTLENBQVdDLGEsR0FBa0JGLGEsQ0FBbEJFLGE7O0FBRS9COzs7OztBQUthQyxhO0FBQ1gseUJBQVlDLFlBQVosRUFBMEI7QUFDeEIsU0FBS0MsT0FBTCxHQUFlRCxZQUFZLENBQUNFLFdBQWIsRUFBZjtBQUNEOztBQUVEOytGQUNvQjtBQUNsQjtBQUNBLFVBQUlDLFFBQVEsR0FBRyxLQUFLQyxVQUFMLENBQWdCLEtBQUtILE9BQXJCLENBQWY7QUFDQTtBQUNBLFVBQUlJLFVBQVUsR0FBRyxLQUFLQyxRQUFMLENBQWNILFFBQWQsQ0FBakI7QUFDQSxhQUFPRSxVQUFQO0FBQ0QsSzs7QUFFVUUsTyxFQUFLO0FBQ2QsVUFBSUMsVUFBSjtBQUNBLGFBQU9DLG9CQUFVQyxNQUFWO0FBQ0wsZ0JBQUFDLElBQUksRUFBSTtBQUNOSCxrQkFBVSxHQUFHLEtBQUksQ0FBQ0ksYUFBTCxDQUFtQkwsR0FBbkIsRUFBd0JJLElBQXhCLENBQWI7QUFDQSxlQUFRSCxVQUFVLElBQUlBLFVBQVUsSUFBSUQsR0FBcEM7QUFDRCxPQUpJLENBQVA7O0FBTUQsSzs7QUFFYUEsTyxFQUFLTSxPLEVBQVM7QUFDMUIsVUFBSWhCLFNBQVMsQ0FBQ1UsR0FBRCxDQUFiLEVBQW9CO0FBQ2xCLFlBQU1PLGlCQUFpQixHQUFHaEIsYUFBYSxDQUFDZSxPQUFELEVBQVUsTUFBVixFQUFrQk4sR0FBRyxDQUFDUSxNQUF0QixDQUF2QztBQUNBLGVBQU9ELGlCQUFQO0FBQ0QsT0FIRCxNQUdPO0FBQ0wsWUFBTUUsZ0JBQWdCLEdBQUdsQixhQUFhLENBQUNlLE9BQUQsRUFBVSxPQUFWLEVBQW1CTixHQUFHLENBQUNRLE1BQXZCLENBQWIsQ0FBNENiLFdBQTVDLEVBQXpCO0FBQ0EsZUFBT2MsZ0JBQVA7QUFDRDtBQUNEO0FBQ0E7QUFDRCxLOztBQUVRQyxTLEVBQU87QUFDZCxhQUFPdEIsVUFBVSxDQUFDc0IsS0FBRCxDQUFWLEdBQW9CQSxLQUFLLENBQUNDLEdBQU4sQ0FBVSxVQUFBQyxJQUFJLFVBQUssRUFBRVIsSUFBSSxFQUFFUSxJQUFJLENBQUNSLElBQWIsRUFBbUJTLElBQUksRUFBRUQsSUFBSSxDQUFDQyxJQUE5QixFQUFMLEVBQWQsQ0FBcEIsR0FBZ0ZDLHdCQUF2RjtBQUNELEsiLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDSVRZX0xJU1QsIENJVFlfTk9UX0ZPVU5EIH0gZnJvbSAnLi9jaXR5ZGF0YSdcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWwnXG5cbmNvbnN0IHsgaXNOb3RFbXB0eSwgaXNDaGluZXNlLCBnZXRTbGljZWROYW1lIH0gPSB1dGlscztcblxuLypcbiogQXV0b1ByZWRpY3RvciDlrp7kvovkuIDlrprmnInkuKTkuKrlr7nlpJbnmoTmjqXlj6PvvJpcbiogMS4g5o6l5pS2IOi+k+WFpeahhui+k+WFpeeahOWAvFxuKiAyLiDov5Tlm54g5pyA57uI5Yy56YWN5Yiw55qE5pWw57uEXG4qL1xuZXhwb3J0IGNsYXNzIEF1dG9QcmVkaWN0b3Ige1xuICBjb25zdHJ1Y3RvcihpbnB1dENvbnRlbnQpIHtcbiAgICB0aGlzLmNvbnRlbnQgPSBpbnB1dENvbnRlbnQudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgLy8g6L6T5YWl5qGG6Ieq5Yqo6IGU5oOz5pCc57SiXG4gIGFzc29jaWF0aXZlU2VhcmNoKCkge1xuICAgIC8vIHNlYXJjaFxuICAgIGxldCB0ZW1wTGlzdCA9IHRoaXMuc2VhcmNoTGlzdCh0aGlzLmNvbnRlbnQpXG4gICAgLy8gZ2V0IGZpbmFsIGxpc3QgdG8gc2hvd1xuICAgIGxldCByZXN1bHRMaXN0ID0gdGhpcy5zaG93TGlzdCh0ZW1wTGlzdClcbiAgICByZXR1cm4gcmVzdWx0TGlzdFxuICB9XG5cbiAgc2VhcmNoTGlzdChzdHIpIHtcbiAgICBsZXQgdGFyZ2V0Q2l0eVxuICAgIHJldHVybiBDSVRZX0xJU1QuZmlsdGVyKFxuICAgICAgY2l0eSA9PiB7XG4gICAgICAgIHRhcmdldENpdHkgPSB0aGlzLmdldFRhcmdldENpdHkoc3RyLCBjaXR5KVxuICAgICAgICByZXR1cm4gKHRhcmdldENpdHkgJiYgdGFyZ2V0Q2l0eSA9PSBzdHIpXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgZ2V0VGFyZ2V0Q2l0eShzdHIsIGNpdHlPYmopIHtcbiAgICBpZiAoaXNDaGluZXNlKHN0cikpIHtcbiAgICAgIGNvbnN0IHNsaWNlZENoaW5lc2VOYW1lID0gZ2V0U2xpY2VkTmFtZShjaXR5T2JqLCAnY2l0eScsIHN0ci5sZW5ndGgpXG4gICAgICByZXR1cm4gc2xpY2VkQ2hpbmVzZU5hbWVcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2xpY2VkUGlueWluTmFtZSA9IGdldFNsaWNlZE5hbWUoY2l0eU9iaiwgJ3Nob3J0Jywgc3RyLmxlbmd0aCkudG9Mb3dlckNhc2UoKVxuICAgICAgcmV0dXJuIHNsaWNlZFBpbnlpbk5hbWVcbiAgICB9XG4gICAgLy8g5Zyo5Z+O5biC5pWw5o2u5Lit77yM5re75Yqg566A5ou85Yiw4oCcc2hvcnRlcuKAneWxnuaAp++8jOWwseWPr+S7peWunueOsOeugOaLvOaQnOe0olxuICAgIC8vIGdldFNsaWNlZE5hbWUoY2l0eU9iaiwgJ3Nob3J0ZXInLCBzdHIubGVuZ3RoKS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBzaG93TGlzdChhcnJheSkge1xuICAgIHJldHVybiBpc05vdEVtcHR5KGFycmF5KSA/IGFycmF5Lm1hcChpdGVtID0+ICh7IGNpdHk6IGl0ZW0uY2l0eSwgY29kZTogaXRlbS5jb2RlIH0pKSA6IENJVFlfTk9UX0ZPVU5EXG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///38\n");

/***/ }),

/***/ 385:
/*!*************************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/components/tki-qrcode/qrcode.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var QRCode = {};\n(function () {\n  /**\n               * 获取单个字符的utf8编码\n               * unicode BMP平面约65535个字符\n               * @param {num} code\n               * return {array}\n               */\n  function unicodeFormat8(code) {\n    // 1 byte\n    var c0, c1, c2;\n    if (code < 128) {\n      return [code];\n      // 2 bytes\n    } else if (code < 2048) {\n      c0 = 192 + (code >> 6);\n      c1 = 128 + (code & 63);\n      return [c0, c1];\n      // 3 bytes\n    } else {\n      c0 = 224 + (code >> 12);\n      c1 = 128 + (code >> 6 & 63);\n      c2 = 128 + (code & 63);\n      return [c0, c1, c2];\n    }\n  }\n  /**\n     * 获取字符串的utf8编码字节串\n     * @param {string} string\n     * @return {array}\n     */\n  function getUTF8Bytes(string) {\n    var utf8codes = [];\n    for (var i = 0; i < string.length; i++) {\n      var code = string.charCodeAt(i);\n      var utf8 = unicodeFormat8(code);\n      for (var j = 0; j < utf8.length; j++) {\n        utf8codes.push(utf8[j]);\n      }\n    }\n    return utf8codes;\n  }\n  /**\n     * 二维码算法实现\n     * @param {string} data              要编码的信息字符串\n     * @param {num} errorCorrectLevel 纠错等级\n     */\n  function QRCodeAlg(data, errorCorrectLevel) {\n    this.typeNumber = -1; //版本\n    this.errorCorrectLevel = errorCorrectLevel;\n    this.modules = null; //二维矩阵，存放最终结果\n    this.moduleCount = 0; //矩阵大小\n    this.dataCache = null; //数据缓存\n    this.rsBlocks = null; //版本数据信息\n    this.totalDataCount = -1; //可使用的数据量\n    this.data = data;\n    this.utf8bytes = getUTF8Bytes(data);\n    this.make();\n  }\n  QRCodeAlg.prototype = {\n    constructor: QRCodeAlg,\n    /**\n                             * 获取二维码矩阵大小\n                             * @return {num} 矩阵大小\n                             */\n    getModuleCount: function getModuleCount() {\n      return this.moduleCount;\n    },\n    /**\n        * 编码\n        */\n    make: function make() {\n      this.getRightType();\n      this.dataCache = this.createData();\n      this.createQrcode();\n    },\n    /**\n        * 设置二位矩阵功能图形\n        * @param  {bool} test 表示是否在寻找最好掩膜阶段\n        * @param  {num} maskPattern 掩膜的版本\n        */\n    makeImpl: function makeImpl(maskPattern) {\n      this.moduleCount = this.typeNumber * 4 + 17;\n      this.modules = new Array(this.moduleCount);\n      for (var row = 0; row < this.moduleCount; row++) {\n        this.modules[row] = new Array(this.moduleCount);\n      }\n      this.setupPositionProbePattern(0, 0);\n      this.setupPositionProbePattern(this.moduleCount - 7, 0);\n      this.setupPositionProbePattern(0, this.moduleCount - 7);\n      this.setupPositionAdjustPattern();\n      this.setupTimingPattern();\n      this.setupTypeInfo(true, maskPattern);\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(true);\n      }\n      this.mapData(this.dataCache, maskPattern);\n    },\n    /**\n        * 设置二维码的位置探测图形\n        * @param  {num} row 探测图形的中心横坐标\n        * @param  {num} col 探测图形的中心纵坐标\n        */\n    setupPositionProbePattern: function setupPositionProbePattern(row, col) {\n      for (var r = -1; r <= 7; r++) {\n        if (row + r <= -1 || this.moduleCount <= row + r) continue;\n        for (var c = -1; c <= 7; c++) {\n          if (col + c <= -1 || this.moduleCount <= col + c) continue;\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    },\n    /**\n        * 创建二维码\n        * @return {[type]} [description]\n        */\n    createQrcode: function createQrcode() {\n      var minLostPoint = 0;\n      var pattern = 0;\n      var bestModules = null;\n      for (var i = 0; i < 8; i++) {\n        this.makeImpl(i);\n        var lostPoint = QRUtil.getLostPoint(this);\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n          bestModules = this.modules;\n        }\n      }\n      this.modules = bestModules;\n      this.setupTypeInfo(false, pattern);\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(false);\n      }\n    },\n    /**\n        * 设置定位图形\n        * @return {[type]} [description]\n        */\n    setupTimingPattern: function setupTimingPattern() {\n      for (var r = 8; r < this.moduleCount - 8; r++) {\n        if (this.modules[r][6] != null) {\n          continue;\n        }\n        this.modules[r][6] = r % 2 == 0;\n        if (this.modules[6][r] != null) {\n          continue;\n        }\n        this.modules[6][r] = r % 2 == 0;\n      }\n    },\n    /**\n        * 设置矫正图形\n        * @return {[type]} [description]\n        */\n    setupPositionAdjustPattern: function setupPositionAdjustPattern() {\n      var pos = QRUtil.getPatternPosition(this.typeNumber);\n      for (var i = 0; i < pos.length; i++) {\n        for (var j = 0; j < pos.length; j++) {\n          var row = pos[i];\n          var col = pos[j];\n          if (this.modules[row][col] != null) {\n            continue;\n          }\n          for (var r = -2; r <= 2; r++) {\n            for (var c = -2; c <= 2; c++) {\n              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                this.modules[row + r][col + c] = true;\n              } else {\n                this.modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    },\n    /**\n        * 设置版本信息（7以上版本才有）\n        * @param  {bool} test 是否处于判断最佳掩膜阶段\n        * @return {[type]}      [description]\n        */\n    setupTypeNumber: function setupTypeNumber(test) {\n      var bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n      for (var i = 0; i < 18; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    },\n    /**\n        * 设置格式信息（纠错等级和掩膜版本）\n        * @param  {bool} test\n        * @param  {num} maskPattern 掩膜版本\n        * @return {}\n        */\n    setupTypeInfo: function setupTypeInfo(test, maskPattern) {\n      var data = QRErrorCorrectLevel[this.errorCorrectLevel] << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n      // vertical\n      for (var i = 0; i < 15; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 6) {\n          this.modules[i][8] = mod;\n        } else if (i < 8) {\n          this.modules[i + 1][8] = mod;\n        } else {\n          this.modules[this.moduleCount - 15 + i][8] = mod;\n        }\n        // horizontal\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 8) {\n          this.modules[8][this.moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          this.modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          this.modules[8][15 - i - 1] = mod;\n        }\n      }\n      // fixed module\n      this.modules[this.moduleCount - 8][8] = !test;\n    },\n    /**\n        * 数据编码\n        * @return {[type]} [description]\n        */\n    createData: function createData() {\n      var buffer = new QRBitBuffer();\n      var lengthBits = this.typeNumber > 9 ? 16 : 8;\n      buffer.put(4, 4); //添加模式\n      buffer.put(this.utf8bytes.length, lengthBits);\n      for (var i = 0, l = this.utf8bytes.length; i < l; i++) {\n        buffer.put(this.utf8bytes[i], 8);\n      }\n      if (buffer.length + 4 <= this.totalDataCount * 8) {\n        buffer.put(0, 4);\n      }\n      // padding\n      while (buffer.length % 8 != 0) {\n        buffer.putBit(false);\n      }\n      // padding\n      while (true) {\n        if (buffer.length >= this.totalDataCount * 8) {\n          break;\n        }\n        buffer.put(QRCodeAlg.PAD0, 8);\n        if (buffer.length >= this.totalDataCount * 8) {\n          break;\n        }\n        buffer.put(QRCodeAlg.PAD1, 8);\n      }\n      return this.createBytes(buffer);\n    },\n    /**\n        * 纠错码编码\n        * @param  {buffer} buffer 数据编码\n        * @return {[type]}\n        */\n    createBytes: function createBytes(buffer) {\n      var offset = 0;\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n      var length = this.rsBlock.length / 3;\n      var rsBlocks = new Array();\n      for (var i = 0; i < length; i++) {\n        var count = this.rsBlock[i * 3 + 0];\n        var totalCount = this.rsBlock[i * 3 + 1];\n        var dataCount = this.rsBlock[i * 3 + 2];\n        for (var j = 0; j < count; j++) {\n          rsBlocks.push([dataCount, totalCount]);\n        }\n      }\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n      for (var r = 0; r < rsBlocks.length; r++) {\n        var dcCount = rsBlocks[r][0];\n        var ecCount = rsBlocks[r][1] - dcCount;\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n        dcdata[r] = new Array(dcCount);\n        for (var i = 0; i < dcdata[r].length; i++) {\n          dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n        }\n        offset += dcCount;\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n        for (var i = 0; i < ecdata[r].length; i++) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n        }\n      }\n      var data = new Array(this.totalDataCount);\n      var index = 0;\n      for (var i = 0; i < maxDcCount; i++) {\n        for (var r = 0; r < rsBlocks.length; r++) {\n          if (i < dcdata[r].length) {\n            data[index++] = dcdata[r][i];\n          }\n        }\n      }\n      for (var i = 0; i < maxEcCount; i++) {\n        for (var r = 0; r < rsBlocks.length; r++) {\n          if (i < ecdata[r].length) {\n            data[index++] = ecdata[r][i];\n          }\n        }\n      }\n      return data;\n\n    },\n    /**\n        * 布置模块，构建最终信息\n        * @param  {} data\n        * @param  {} maskPattern\n        * @return {}\n        */\n    mapData: function mapData(data, maskPattern) {\n      var inc = -1;\n      var row = this.moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n        if (col == 6) col--;\n        while (true) {\n          for (var c = 0; c < 2; c++) {\n            if (this.modules[row][col - c] == null) {\n              var dark = false;\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n              var mask = QRUtil.getMask(maskPattern, row, col - c);\n              if (mask) {\n                dark = !dark;\n              }\n              this.modules[row][col - c] = dark;\n              bitIndex--;\n              if (bitIndex == -1) {\n                byteIndex++;\n                bitIndex = 7;\n              }\n            }\n          }\n          row += inc;\n          if (row < 0 || this.moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    } };\n\n  /**\n          * 填充字段\n          */\n  QRCodeAlg.PAD0 = 0xEC;\n  QRCodeAlg.PAD1 = 0x11;\n  //---------------------------------------------------------------------\n  // 纠错等级对应的编码\n  //---------------------------------------------------------------------\n  var QRErrorCorrectLevel = [1, 0, 3, 2];\n  //---------------------------------------------------------------------\n  // 掩膜版本\n  //---------------------------------------------------------------------\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7 };\n\n  //---------------------------------------------------------------------\n  // 工具类\n  //---------------------------------------------------------------------\n  var QRUtil = {\n    /*\n                 每个版本矫正图形的位置\n                  */\n    PATTERN_POSITION_TABLE: [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170]],\n\n    G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n    G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n    G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n    /*\n                                                             BCH编码格式信息\n                                                              */\n    getBCHTypeInfo: function getBCHTypeInfo(data) {\n      var d = data << 10;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n        d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n      }\n      return (data << 10 | d) ^ QRUtil.G15_MASK;\n    },\n    /*\n       BCH编码版本信息\n        */\n    getBCHTypeNumber: function getBCHTypeNumber(data) {\n      var d = data << 12;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n        d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n      }\n      return data << 12 | d;\n    },\n    /*\n       获取BCH位信息\n        */\n    getBCHDigit: function getBCHDigit(data) {\n      var digit = 0;\n      while (data != 0) {\n        digit++;\n        data >>>= 1;\n      }\n      return digit;\n    },\n    /*\n       获取版本对应的矫正图形位置\n        */\n    getPatternPosition: function getPatternPosition(typeNumber) {\n      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n    /*\n       掩膜算法\n        */\n    getMask: function getMask(maskPattern, i, j) {\n      switch (maskPattern) {\n        case QRMaskPattern.PATTERN000:\n          return (i + j) % 2 == 0;\n        case QRMaskPattern.PATTERN001:\n          return i % 2 == 0;\n        case QRMaskPattern.PATTERN010:\n          return j % 3 == 0;\n        case QRMaskPattern.PATTERN011:\n          return (i + j) % 3 == 0;\n        case QRMaskPattern.PATTERN100:\n          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n        case QRMaskPattern.PATTERN101:\n          return i * j % 2 + i * j % 3 == 0;\n        case QRMaskPattern.PATTERN110:\n          return (i * j % 2 + i * j % 3) % 2 == 0;\n        case QRMaskPattern.PATTERN111:\n          return (i * j % 3 + (i + j) % 2) % 2 == 0;\n        default:\n          throw new Error(\"bad maskPattern:\" + maskPattern);}\n\n    },\n    /*\n       获取RS的纠错多项式\n        */\n    getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n      var a = new QRPolynomial([1], 0);\n      for (var i = 0; i < errorCorrectLength; i++) {\n        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\n      }\n      return a;\n    },\n    /*\n       获取评价\n        */\n    getLostPoint: function getLostPoint(qrCode) {\n      var moduleCount = qrCode.getModuleCount(),\n      lostPoint = 0,\n      darkCount = 0;\n      for (var row = 0; row < moduleCount; row++) {\n        var sameCount = 0;\n        var head = qrCode.modules[row][0];\n        for (var col = 0; col < moduleCount; col++) {\n          var current = qrCode.modules[row][col];\n          //level 3 评价\n          if (col < moduleCount - 6) {\n            if (current && !qrCode.modules[row][col + 1] && qrCode.modules[row][col + 2] && qrCode.modules[row][col + 3] && qrCode.modules[row][col + 4] && !qrCode.modules[row][col + 5] && qrCode.modules[row][col + 6]) {\n              if (col < moduleCount - 10) {\n                if (qrCode.modules[row][col + 7] && qrCode.modules[row][col + 8] && qrCode.modules[row][col + 9] && qrCode.modules[row][col + 10]) {\n                  lostPoint += 40;\n                }\n              } else if (col > 3) {\n                if (qrCode.modules[row][col - 1] && qrCode.modules[row][col - 2] && qrCode.modules[row][col - 3] && qrCode.modules[row][col - 4]) {\n                  lostPoint += 40;\n                }\n              }\n            }\n          }\n          //level 2 评价\n          if (row < moduleCount - 1 && col < moduleCount - 1) {\n            var count = 0;\n            if (current) count++;\n            if (qrCode.modules[row + 1][col]) count++;\n            if (qrCode.modules[row][col + 1]) count++;\n            if (qrCode.modules[row + 1][col + 1]) count++;\n            if (count == 0 || count == 4) {\n              lostPoint += 3;\n            }\n          }\n          //level 1 评价\n          if (head ^ current) {\n            sameCount++;\n          } else {\n            head = current;\n            if (sameCount >= 5) {\n              lostPoint += 3 + sameCount - 5;\n            }\n            sameCount = 1;\n          }\n          //level 4 评价\n          if (current) {\n            darkCount++;\n          }\n        }\n      }\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var head = qrCode.modules[0][col];\n        for (var row = 0; row < moduleCount; row++) {\n          var current = qrCode.modules[row][col];\n          //level 3 评价\n          if (row < moduleCount - 6) {\n            if (current && !qrCode.modules[row + 1][col] && qrCode.modules[row + 2][col] && qrCode.modules[row + 3][col] && qrCode.modules[row + 4][col] && !qrCode.modules[row + 5][col] && qrCode.modules[row + 6][col]) {\n              if (row < moduleCount - 10) {\n                if (qrCode.modules[row + 7][col] && qrCode.modules[row + 8][col] && qrCode.modules[row + 9][col] && qrCode.modules[row + 10][col]) {\n                  lostPoint += 40;\n                }\n              } else if (row > 3) {\n                if (qrCode.modules[row - 1][col] && qrCode.modules[row - 2][col] && qrCode.modules[row - 3][col] && qrCode.modules[row - 4][col]) {\n                  lostPoint += 40;\n                }\n              }\n            }\n          }\n          //level 1 评价\n          if (head ^ current) {\n            sameCount++;\n          } else {\n            head = current;\n            if (sameCount >= 5) {\n              lostPoint += 3 + sameCount - 5;\n            }\n            sameCount = 1;\n          }\n        }\n      }\n      // LEVEL4\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n      return lostPoint;\n    } };\n\n\n  //---------------------------------------------------------------------\n  // QRMath使用的数学工具\n  //---------------------------------------------------------------------\n  var QRMath = {\n    /*\n                 将n转化为a^m\n                  */\n    glog: function glog(n) {\n      if (n < 1) {\n        throw new Error(\"glog(\" + n + \")\");\n      }\n      return QRMath.LOG_TABLE[n];\n    },\n    /*\n       将a^m转化为n\n        */\n    gexp: function gexp(n) {\n      while (n < 0) {\n        n += 255;\n      }\n      while (n >= 256) {\n        n -= 255;\n      }\n      return QRMath.EXP_TABLE[n];\n    },\n    EXP_TABLE: new Array(256),\n    LOG_TABLE: new Array(256) };\n\n\n  for (var i = 0; i < 8; i++) {\n    QRMath.EXP_TABLE[i] = 1 << i;\n  }\n  for (var i = 8; i < 256; i++) {\n    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n  }\n  for (var i = 0; i < 255; i++) {\n    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n  }\n  //---------------------------------------------------------------------\n  // QRPolynomial 多项式\n  //---------------------------------------------------------------------\n  /**\n   * 多项式类\n   * @param {Array} num   系数\n   * @param {num} shift a^shift\n   */\n  function QRPolynomial(num, shift) {\n    if (num.length == undefined) {\n      throw new Error(num.length + \"/\" + shift);\n    }\n    var offset = 0;\n    while (offset < num.length && num[offset] == 0) {\n      offset++;\n    }\n    this.num = new Array(num.length - offset + shift);\n    for (var i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset];\n    }\n  }\n  QRPolynomial.prototype = {\n    get: function get(index) {\n      return this.num[index];\n    },\n    getLength: function getLength() {\n      return this.num.length;\n    },\n    /**\n        * 多项式乘法\n        * @param  {QRPolynomial} e 被乘多项式\n        * @return {[type]}   [description]\n        */\n    multiply: function multiply(e) {\n      var num = new Array(this.getLength() + e.getLength() - 1);\n      for (var i = 0; i < this.getLength(); i++) {\n        for (var j = 0; j < e.getLength(); j++) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n        }\n      }\n      return new QRPolynomial(num, 0);\n    },\n    /**\n        * 多项式模运算\n        * @param  {QRPolynomial} e 模多项式\n        * @return {}\n        */\n    mod: function mod(e) {\n      var tl = this.getLength(),\n      el = e.getLength();\n      if (tl - el < 0) {\n        return this;\n      }\n      var num = new Array(tl);\n      for (var i = 0; i < tl; i++) {\n        num[i] = this.get(i);\n      }\n      while (num.length >= el) {\n        var ratio = QRMath.glog(num[0]) - QRMath.glog(e.get(0));\n\n        for (var i = 0; i < e.getLength(); i++) {\n          num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n        }\n        while (num[0] == 0) {\n          num.shift();\n        }\n      }\n      return new QRPolynomial(num, 0);\n    } };\n\n\n  //---------------------------------------------------------------------\n  // RS_BLOCK_TABLE\n  //---------------------------------------------------------------------\n  /*\n  二维码各个版本信息[块数, 每块中的数据块数, 每块中的信息块数]\n   */\n  var RS_BLOCK_TABLE = [\n  // L\n  // M\n  // Q\n  // H\n  // 1\n  [1, 26, 19],\n  [1, 26, 16],\n  [1, 26, 13],\n  [1, 26, 9],\n\n  // 2\n  [1, 44, 34],\n  [1, 44, 28],\n  [1, 44, 22],\n  [1, 44, 16],\n\n  // 3\n  [1, 70, 55],\n  [1, 70, 44],\n  [2, 35, 17],\n  [2, 35, 13],\n\n  // 4\n  [1, 100, 80],\n  [2, 50, 32],\n  [2, 50, 24],\n  [4, 25, 9],\n\n  // 5\n  [1, 134, 108],\n  [2, 67, 43],\n  [2, 33, 15, 2, 34, 16],\n  [2, 33, 11, 2, 34, 12],\n\n  // 6\n  [2, 86, 68],\n  [4, 43, 27],\n  [4, 43, 19],\n  [4, 43, 15],\n\n  // 7\n  [2, 98, 78],\n  [4, 49, 31],\n  [2, 32, 14, 4, 33, 15],\n  [4, 39, 13, 1, 40, 14],\n\n  // 8\n  [2, 121, 97],\n  [2, 60, 38, 2, 61, 39],\n  [4, 40, 18, 2, 41, 19],\n  [4, 40, 14, 2, 41, 15],\n\n  // 9\n  [2, 146, 116],\n  [3, 58, 36, 2, 59, 37],\n  [4, 36, 16, 4, 37, 17],\n  [4, 36, 12, 4, 37, 13],\n\n  // 10\n  [2, 86, 68, 2, 87, 69],\n  [4, 69, 43, 1, 70, 44],\n  [6, 43, 19, 2, 44, 20],\n  [6, 43, 15, 2, 44, 16],\n\n  // 11\n  [4, 101, 81],\n  [1, 80, 50, 4, 81, 51],\n  [4, 50, 22, 4, 51, 23],\n  [3, 36, 12, 8, 37, 13],\n\n  // 12\n  [2, 116, 92, 2, 117, 93],\n  [6, 58, 36, 2, 59, 37],\n  [4, 46, 20, 6, 47, 21],\n  [7, 42, 14, 4, 43, 15],\n\n  // 13\n  [4, 133, 107],\n  [8, 59, 37, 1, 60, 38],\n  [8, 44, 20, 4, 45, 21],\n  [12, 33, 11, 4, 34, 12],\n\n  // 14\n  [3, 145, 115, 1, 146, 116],\n  [4, 64, 40, 5, 65, 41],\n  [11, 36, 16, 5, 37, 17],\n  [11, 36, 12, 5, 37, 13],\n\n  // 15\n  [5, 109, 87, 1, 110, 88],\n  [5, 65, 41, 5, 66, 42],\n  [5, 54, 24, 7, 55, 25],\n  [11, 36, 12],\n\n  // 16\n  [5, 122, 98, 1, 123, 99],\n  [7, 73, 45, 3, 74, 46],\n  [15, 43, 19, 2, 44, 20],\n  [3, 45, 15, 13, 46, 16],\n\n  // 17\n  [1, 135, 107, 5, 136, 108],\n  [10, 74, 46, 1, 75, 47],\n  [1, 50, 22, 15, 51, 23],\n  [2, 42, 14, 17, 43, 15],\n\n  // 18\n  [5, 150, 120, 1, 151, 121],\n  [9, 69, 43, 4, 70, 44],\n  [17, 50, 22, 1, 51, 23],\n  [2, 42, 14, 19, 43, 15],\n\n  // 19\n  [3, 141, 113, 4, 142, 114],\n  [3, 70, 44, 11, 71, 45],\n  [17, 47, 21, 4, 48, 22],\n  [9, 39, 13, 16, 40, 14],\n\n  // 20\n  [3, 135, 107, 5, 136, 108],\n  [3, 67, 41, 13, 68, 42],\n  [15, 54, 24, 5, 55, 25],\n  [15, 43, 15, 10, 44, 16],\n\n  // 21\n  [4, 144, 116, 4, 145, 117],\n  [17, 68, 42],\n  [17, 50, 22, 6, 51, 23],\n  [19, 46, 16, 6, 47, 17],\n\n  // 22\n  [2, 139, 111, 7, 140, 112],\n  [17, 74, 46],\n  [7, 54, 24, 16, 55, 25],\n  [34, 37, 13],\n\n  // 23\n  [4, 151, 121, 5, 152, 122],\n  [4, 75, 47, 14, 76, 48],\n  [11, 54, 24, 14, 55, 25],\n  [16, 45, 15, 14, 46, 16],\n\n  // 24\n  [6, 147, 117, 4, 148, 118],\n  [6, 73, 45, 14, 74, 46],\n  [11, 54, 24, 16, 55, 25],\n  [30, 46, 16, 2, 47, 17],\n\n  // 25\n  [8, 132, 106, 4, 133, 107],\n  [8, 75, 47, 13, 76, 48],\n  [7, 54, 24, 22, 55, 25],\n  [22, 45, 15, 13, 46, 16],\n\n  // 26\n  [10, 142, 114, 2, 143, 115],\n  [19, 74, 46, 4, 75, 47],\n  [28, 50, 22, 6, 51, 23],\n  [33, 46, 16, 4, 47, 17],\n\n  // 27\n  [8, 152, 122, 4, 153, 123],\n  [22, 73, 45, 3, 74, 46],\n  [8, 53, 23, 26, 54, 24],\n  [12, 45, 15, 28, 46, 16],\n\n  // 28\n  [3, 147, 117, 10, 148, 118],\n  [3, 73, 45, 23, 74, 46],\n  [4, 54, 24, 31, 55, 25],\n  [11, 45, 15, 31, 46, 16],\n\n  // 29\n  [7, 146, 116, 7, 147, 117],\n  [21, 73, 45, 7, 74, 46],\n  [1, 53, 23, 37, 54, 24],\n  [19, 45, 15, 26, 46, 16],\n\n  // 30\n  [5, 145, 115, 10, 146, 116],\n  [19, 75, 47, 10, 76, 48],\n  [15, 54, 24, 25, 55, 25],\n  [23, 45, 15, 25, 46, 16],\n\n  // 31\n  [13, 145, 115, 3, 146, 116],\n  [2, 74, 46, 29, 75, 47],\n  [42, 54, 24, 1, 55, 25],\n  [23, 45, 15, 28, 46, 16],\n\n  // 32\n  [17, 145, 115],\n  [10, 74, 46, 23, 75, 47],\n  [10, 54, 24, 35, 55, 25],\n  [19, 45, 15, 35, 46, 16],\n\n  // 33\n  [17, 145, 115, 1, 146, 116],\n  [14, 74, 46, 21, 75, 47],\n  [29, 54, 24, 19, 55, 25],\n  [11, 45, 15, 46, 46, 16],\n\n  // 34\n  [13, 145, 115, 6, 146, 116],\n  [14, 74, 46, 23, 75, 47],\n  [44, 54, 24, 7, 55, 25],\n  [59, 46, 16, 1, 47, 17],\n\n  // 35\n  [12, 151, 121, 7, 152, 122],\n  [12, 75, 47, 26, 76, 48],\n  [39, 54, 24, 14, 55, 25],\n  [22, 45, 15, 41, 46, 16],\n\n  // 36\n  [6, 151, 121, 14, 152, 122],\n  [6, 75, 47, 34, 76, 48],\n  [46, 54, 24, 10, 55, 25],\n  [2, 45, 15, 64, 46, 16],\n\n  // 37\n  [17, 152, 122, 4, 153, 123],\n  [29, 74, 46, 14, 75, 47],\n  [49, 54, 24, 10, 55, 25],\n  [24, 45, 15, 46, 46, 16],\n\n  // 38\n  [4, 152, 122, 18, 153, 123],\n  [13, 74, 46, 32, 75, 47],\n  [48, 54, 24, 14, 55, 25],\n  [42, 45, 15, 32, 46, 16],\n\n  // 39\n  [20, 147, 117, 4, 148, 118],\n  [40, 75, 47, 7, 76, 48],\n  [43, 54, 24, 22, 55, 25],\n  [10, 45, 15, 67, 46, 16],\n\n  // 40\n  [19, 148, 118, 6, 149, 119],\n  [18, 75, 47, 31, 76, 48],\n  [34, 54, 24, 34, 55, 25],\n  [20, 45, 15, 61, 46, 16]];\n\n\n  /**\n                              * 根据数据获取对应版本\n                              * @return {[type]} [description]\n                              */\n  QRCodeAlg.prototype.getRightType = function () {\n    for (var typeNumber = 1; typeNumber < 41; typeNumber++) {\n      var rsBlock = RS_BLOCK_TABLE[(typeNumber - 1) * 4 + this.errorCorrectLevel];\n      if (rsBlock == undefined) {\n        throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + this.errorCorrectLevel);\n      }\n      var length = rsBlock.length / 3;\n      var totalDataCount = 0;\n      for (var i = 0; i < length; i++) {\n        var count = rsBlock[i * 3 + 0];\n        var dataCount = rsBlock[i * 3 + 2];\n        totalDataCount += dataCount * count;\n      }\n      var lengthBytes = typeNumber > 9 ? 2 : 1;\n      if (this.utf8bytes.length + lengthBytes < totalDataCount || typeNumber == 40) {\n        this.typeNumber = typeNumber;\n        this.rsBlock = rsBlock;\n        this.totalDataCount = totalDataCount;\n        break;\n      }\n    }\n  };\n\n  //---------------------------------------------------------------------\n  // QRBitBuffer\n  //---------------------------------------------------------------------\n  function QRBitBuffer() {\n    this.buffer = new Array();\n    this.length = 0;\n  }\n  QRBitBuffer.prototype = {\n    get: function get(index) {\n      var bufIndex = Math.floor(index / 8);\n      return this.buffer[bufIndex] >>> 7 - index % 8 & 1;\n    },\n    put: function put(num, length) {\n      for (var i = 0; i < length; i++) {\n        this.putBit(num >>> length - i - 1 & 1);\n      }\n    },\n    putBit: function putBit(bit) {\n      var bufIndex = Math.floor(this.length / 8);\n      if (this.buffer.length <= bufIndex) {\n        this.buffer.push(0);\n      }\n      if (bit) {\n        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n      }\n      this.length++;\n    } };\n\n\n\n\n  // xzedit\n  var qrcodeAlgObjCache = [];\n  /**\n                               * 二维码构造函数，主要用于绘制\n                               * @param  {参数列表} opt 传递参数\n                               * @return {}\n                               */\n  QRCode = function QRCode(opt) {\n    //设置默认参数\n    this.options = {\n      text: '',\n      size: 256,\n      correctLevel: 3,\n      background: '#ffffff',\n      foreground: '#000000',\n      pdground: '#000000',\n      image: '',\n      imageSize: 30,\n      canvasId: opt.canvasId,\n      context: opt.context,\n      usingComponents: opt.usingComponents,\n      showLoading: opt.showLoading,\n      loadingText: opt.loadingText };\n\n    if (typeof opt === 'string') {// 只编码ASCII字符串\n      opt = {\n        text: opt };\n\n    }\n    if (opt) {\n      for (var i in opt) {\n        this.options[i] = opt[i];\n      }\n    }\n    //使用QRCodeAlg创建二维码结构\n    var qrCodeAlg = null;\n    for (var i = 0, l = qrcodeAlgObjCache.length; i < l; i++) {\n      if (qrcodeAlgObjCache[i].text == this.options.text && qrcodeAlgObjCache[i].text.correctLevel == this.options.correctLevel) {\n        qrCodeAlg = qrcodeAlgObjCache[i].obj;\n        break;\n      }\n    }\n    if (i == l) {\n      qrCodeAlg = new QRCodeAlg(this.options.text, this.options.correctLevel);\n      qrcodeAlgObjCache.push({\n        text: this.options.text,\n        correctLevel: this.options.correctLevel,\n        obj: qrCodeAlg });\n\n    }\n    /**\n       * 计算矩阵点的前景色\n       * @param {Obj} config\n       * @param {Number} config.row 点x坐标\n       * @param {Number} config.col 点y坐标\n       * @param {Number} config.count 矩阵大小\n       * @param {Number} config.options 组件的options\n       * @return {String}\n       */\n    var getForeGround = function getForeGround(config) {\n      var options = config.options;\n      if (options.pdground && (\n      config.row > 1 && config.row < 5 && config.col > 1 && config.col < 5 ||\n      config.row > config.count - 6 && config.row < config.count - 2 && config.col > 1 && config.col < 5 ||\n      config.row > 1 && config.row < 5 && config.col > config.count - 6 && config.col < config.count - 2))\n      {\n        return options.pdground;\n      }\n      return options.foreground;\n    };\n    // 创建canvas\n    var createCanvas = function createCanvas(options) {\n      if (options.showLoading) {\n        uni.showLoading({\n          title: options.loadingText,\n          mask: true });\n\n      }\n      var ctx = uni.createCanvasContext(options.canvasId, options.context);\n      var count = qrCodeAlg.getModuleCount();\n      var ratioSize = options.size;\n      var ratioImgSize = options.imageSize;\n      //计算每个点的长宽\n      var tileW = (ratioSize / count).toPrecision(4);\n      var tileH = (ratioSize / count).toPrecision(4);\n      //绘制\n      for (var row = 0; row < count; row++) {\n        for (var col = 0; col < count; col++) {\n          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);\n          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);\n          var foreground = getForeGround({\n            row: row,\n            col: col,\n            count: count,\n            options: options });\n\n          ctx.setFillStyle(qrCodeAlg.modules[row][col] ? foreground : options.background);\n          ctx.fillRect(Math.round(col * tileW), Math.round(row * tileH), w, h);\n        }\n      }\n      if (options.image) {\n\n\n\n\n        // 画圆角矩形\n        var drawRoundedRect = function drawRoundedRect(ctxi, x, y, width, height, r, lineWidth, fill, stroke) {\n          ctxi.setLineWidth(lineWidth);\n          ctxi.setFillStyle(options.background);\n          ctxi.setStrokeStyle(options.background);\n          ctxi.beginPath(); // draw top and top right corner \n          ctxi.moveTo(x + r, y);\n          ctxi.arcTo(x + width, y, x + width, y + r, r); // draw right side and bottom right corner \n          ctxi.arcTo(x + width, y + height, x + width - r, y + height, r); // draw bottom and bottom left corner \n          ctxi.arcTo(x, y + height, x, y + height - r, r); // draw left and top left corner \n          ctxi.arcTo(x, y, x + r, y, r);\n          ctxi.closePath();\n          if (fill) {\n            ctxi.fill();\n          }\n          if (stroke) {\n            ctxi.stroke();\n          }\n        };var x = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));var y = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));drawRoundedRect(ctx, x, y, ratioImgSize, ratioImgSize, 2, 6, true, true);ctx.drawImage(options.image, x, y, ratioImgSize, ratioImgSize);\n      }\n      setTimeout(function () {\n        ctx.draw(true, function () {\n          // 保存到临时区域\n          setTimeout(function () {\n            uni.canvasToTempFilePath({\n              width: options.width,\n              height: options.height,\n              destWidth: options.width,\n              destHeight: options.height,\n              canvasId: options.canvasId,\n              quality: Number(1),\n              success: function success(res) {\n                if (options.cbResult) {\n                  // 由于官方还没有统一此接口的输出字段，所以先判定下  支付宝为 res.apFilePath\n                  if (!empty(res.tempFilePath)) {\n                    options.cbResult(res.tempFilePath);\n                  } else if (!empty(res.apFilePath)) {\n                    options.cbResult(res.apFilePath);\n                  } else {\n                    options.cbResult(res.tempFilePath);\n                  }\n                }\n              },\n              fail: function fail(res) {\n                if (options.cbResult) {\n                  options.cbResult(res);\n                }\n              },\n              complete: function complete() {\n                uni.hideLoading();\n              } },\n            options.context);\n          }, options.text.length + 100);\n        });\n      }, options.usingComponents ? 0 : 150);\n    };\n    createCanvas(this.options);\n    // 空判定\n    var empty = function empty(v) {\n      var tp = typeof v,\n      rt = false;\n      if (tp == \"number\" && String(v) == \"\") {\n        rt = true;\n      } else if (tp == \"undefined\") {\n        rt = true;\n      } else if (tp == \"object\") {\n        if (JSON.stringify(v) == \"{}\" || JSON.stringify(v) == \"[]\" || v == null) rt = true;\n      } else if (tp == \"string\") {\n        if (v == \"\" || v == \"undefined\" || v == \"null\" || v == \"{}\" || v == \"[]\") rt = true;\n      } else if (tp == \"function\") {\n        rt = false;\n      }\n      return rt;\n    };\n  };\n  QRCode.prototype.clear = function (fn) {\n    var ctx = uni.createCanvasContext(this.options.canvasId, this.options.context);\n    ctx.clearRect(0, 0, this.options.size, this.options.size);\n    ctx.draw(false, function () {\n      if (fn) {\n        fn();\n      }\n    });\n  };\n})();var _default =\n\nQRCode;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///385\n");

/***/ }),

/***/ 4:
/*!****************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/pages.json ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\n       * h5 请求\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-23720191024001\",\"_inBundle\":false,\"_integrity\":\"sha512-vJEk493Vdb8KueNzR2otzDi23rfyRcQBo/t1R41MwNGPk+AUB94gh10+HVLo98DRcvMzkuVofz3KXTAfEx24iw==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-23720191024001.tgz\",\"_shasum\":\"18272814446a9bc6053bc92666ec7064a1767588\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/fxy/Documents/DCloud/HbuilderX-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"a725c04ef762e5df78a9a69d140c2666e0de05fc\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-23720191024001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!*********************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/pages.json?{"type":"style"} ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/index/index\": { \"navigationBarTitleText\": \"首页\", \"navigationBarTextStyle\": \"white\", \"enablePullDownRefresh\": true, \"titleNView\": false, \"scrollIndicator\": \"none\", \"usingComponents\": { \"article-list\": \"/components/articleList\" } }, \"pages/index/citys/citys\": { \"navigationBarTitleText\": \"城市选择\", \"bounce\": \"none\", \"scrollIndicator\": \"none\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-search\": \"/wxcomponents/vant/search/index\" } }, \"pages/index/search/search\": { \"navigationBarTitleText\": \"搜索\", \"usingComponents\": { \"article-list\": \"/components/articleList\" }, \"usingGlobalComponents\": { \"van-search\": \"/wxcomponents/vant/search/index\", \"van-tag\": \"/wxcomponents/vant/tag/index\" } }, \"pages/index/articleList/articleList\": { \"navigationBarTitleText\": \"文章列表\", \"enablePullDownRefresh\": true, \"usingComponents\": { \"article-list\": \"/components/articleList\" } }, \"pages/index/article/article\": { \"navigationBarTitleText\": \"文章详情\", \"navigationBarTextStyle\": \"white\", \"titleNView\": { \"type\": \"transparent\" }, \"bounce\": \"none\", \"scrollIndicator\": \"none\", \"softinputNavBar\": \"none\", \"softinputMode\": \"adjustResize\", \"usingComponents\": { \"article-list\": \"/components/articleList\", \"uni-popup\": \"/components/uni-popup/uni-popup\", \"u-parse\": \"/components/u-parse/u-parse\" }, \"usingGlobalComponents\": { \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/index/author/author\": { \"navigationBarTitleText\": \"主页\", \"usingComponents\": { \"article-list\": \"/components/articleList\", \"activity-list\": \"/components/activityList\" }, \"usingGlobalComponents\": { \"van-tabs\": \"/wxcomponents/vant/tabs/index\", \"van-tab\": \"/wxcomponents/vant/tab/index\" } }, \"pages/index/actList/actList\": { \"navigationBarTitleText\": \"日常活动\", \"enablePullDownRefresh\": true, \"usingComponents\": { \"activity-list\": \"/components/activityList\" } }, \"pages/index/activity/activity\": { \"navigationBarTitleText\": \"活动详情\", \"softinputNavBar\": \"none\", \"softinputMode\": \"adjustResize\", \"usingComponents\": { \"uni-popup\": \"/components/uni-popup/uni-popup\" }, \"usingGlobalComponents\": { \"van-loading\": \"/wxcomponents/vant/loading/index\", \"van-field\": \"/wxcomponents/vant/field/index\", \"van-cell\": \"/wxcomponents/vant/cell/index\" } }, \"pages/index/courseList/courseList\": { \"navigationBarTitleText\": \"工人培训\", \"enablePullDownRefresh\": true, \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-tabs\": \"/wxcomponents/vant/tabs/index\", \"van-tab\": \"/wxcomponents/vant/tab/index\", \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/index/course/course\": { \"navigationBarTitleText\": \"培训详情\", \"enablePullDownRefresh\": true, \"scrollIndicator\": \"none\", \"usingComponents\": {} }, \"pages/message/message\": { \"navigationBarTitleText\": \"消息\", \"enablePullDownRefresh\": true, \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-tabs\": \"/wxcomponents/vant/tabs/index\", \"van-tab\": \"/wxcomponents/vant/tab/index\", \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/message/detail/detail\": { \"navigationBarTitleText\": \"消息详情\", \"usingComponents\": { \"u-parse\": \"/components/u-parse/u-parse\" } }, \"pages/ucenter/ucenter\": { \"navigationBarTitleText\": \"我的\", \"titleNView\": false, \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-cell\": \"/wxcomponents/vant/cell/index\" } }, \"pages/ucenter/setting/setting\": { \"navigationBarTitleText\": \"设置\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-cell\": \"/wxcomponents/vant/cell/index\" } }, \"pages/ucenter/setting/mobile/mobile\": { \"navigationBarTitleText\": \"修改手机号\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-field\": \"/wxcomponents/vant/field/index\" } }, \"pages/ucenter/setting/pwd/pwd\": { \"navigationBarTitleText\": \"修改登录密码\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-field\": \"/wxcomponents/vant/field/index\" } }, \"pages/ucenter/setting/about/about\": { \"navigationBarTitleText\": \"关于我们\", \"usingComponents\": { \"u-parse\": \"/components/u-parse/u-parse\" } }, \"pages/ucenter/setting/complaint/complaint\": { \"navigationBarTitleText\": \"我的投诉\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/ucenter/setting/complaint/submit/submit\": { \"navigationBarTitleText\": \"提交投诉\", \"usingComponents\": {} }, \"pages/ucenter/info/info\": { \"navigationBarTitleText\": \"个人资料\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-cell\": \"/wxcomponents/vant/cell/index\", \"van-field\": \"/wxcomponents/vant/field/index\", \"van-popup\": \"/wxcomponents/vant/popup/index\", \"van-area\": \"/wxcomponents/vant/area/index\" } }, \"pages/ucenter/attention/attention\": { \"navigationBarTitleText\": \"我的关注\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-cell\": \"/wxcomponents/vant/cell/index\", \"van-button\": \"/wxcomponents/vant/button/index\", \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/ucenter/order/order\": { \"navigationBarTitleText\": \"我的订单\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-tabs\": \"/wxcomponents/vant/tabs/index\", \"van-tab\": \"/wxcomponents/vant/tab/index\", \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/ucenter/integral/integral\": { \"navigationBarTitleText\": \"我的砖瓦\", \"scrollIndicator\": \"none\", \"titleNView\": { \"buttons\": [{ \"width\": \"70px\", \"text\": \"明细\", \"fontSize\": \"14px\", \"color\": \"#A5A5A5\" }] }, \"usingComponents\": {} }, \"pages/ucenter/getCoupon/getCoupon\": { \"navigationBarTitleText\": \"兑换代金券\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/ucenter/record/record\": { \"navigationBarTitleText\": \"砖瓦明细\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/ucenter/collection/collection\": { \"navigationBarTitleText\": \"我的收藏\", \"usingComponents\": { \"article-list\": \"/components/articleList\", \"activity-list\": \"/components/activityList\" }, \"usingGlobalComponents\": { \"van-tabs\": \"/wxcomponents/vant/tabs/index\", \"van-tab\": \"/wxcomponents/vant/tab/index\" } }, \"pages/ucenter/coupon/coupon\": { \"navigationBarTitleText\": \"我的代金券\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/ucenter/activity/activity\": { \"navigationBarTitleText\": \"活动报名\", \"usingComponents\": { \"activity-list\": \"/components/activityList\" }, \"usingGlobalComponents\": { \"van-tabs\": \"/wxcomponents/vant/tabs/index\", \"van-tab\": \"/wxcomponents/vant/tab/index\" } }, \"pages/ucenter/servicer/servicer\": { \"navigationBarTitleText\": \"我的服务人\", \"usingComponents\": { \"uni-popup\": \"/components/uni-popup/uni-popup\" }, \"usingGlobalComponents\": { \"van-field\": \"/wxcomponents/vant/field/index\", \"van-cell\": \"/wxcomponents/vant/cell/index\" } }, \"pages/ucenter/serviceType/serviceType\": { \"navigationBarTitleText\": \"平台资质\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-cell\": \"/wxcomponents/vant/cell/index\", \"van-loading\": \"/wxcomponents/vant/loading/index\" } }, \"pages/ucenter/serviceType/detail/detail\": { \"navigationBarTitleText\": \"资质详情\", \"usingComponents\": { \"u-parse\": \"/components/u-parse/u-parse\" } }, \"pages/index/success/success\": { \"navigationBarTitleText\": \"报名结果\", \"usingComponents\": {} }, \"pages/index/signDetail/signDetail\": { \"navigationBarTitleText\": \"报名详情\", \"usingComponents\": { \"tki-qrcode\": \"/components/tki-qrcode/tki-qrcode\" } }, \"pages/login/login\": { \"navigationBarTitleText\": \"\", \"scrollIndicator\": \"none\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-field\": \"/wxcomponents/vant/field/index\" } }, \"pages/wxLogin/wxLogin\": { \"navigationBarTitleText\": \"\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-field\": \"/wxcomponents/vant/field/index\", \"van-radio-group\": \"/wxcomponents/vant/radio-group/index\", \"van-radio\": \"/wxcomponents/vant/radio/index\" } }, \"pages/getPwd/getPwd\": { \"navigationBarTitleText\": \"\", \"scrollIndicator\": \"none\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-field\": \"/wxcomponents/vant/field/index\" } }, \"pages/register/register\": { \"navigationBarTitleText\": \"\", \"scrollIndicator\": \"none\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"van-field\": \"/wxcomponents/vant/field/index\", \"van-radio-group\": \"/wxcomponents/vant/radio-group/index\", \"van-radio\": \"/wxcomponents/vant/radio/index\", \"van-popup\": \"/wxcomponents/vant/popup/index\", \"van-area\": \"/wxcomponents/vant/area/index\" } }, \"pages/message/chat/chat\": { \"bounce\": \"none\", \"scrollIndicator\": \"none\", \"softinputMode\": \"adjustResize\", \"softinputNavBar\": \"none\", \"usingComponents\": {} }, \"pages/ucenter/setting/complaint/detail/detail\": { \"navigationBarTitleText\": \"投诉回复\", \"usingComponents\": {} }, \"pages/index/video/video\": { \"usingComponents\": {} }, \"pages/share/share\": { \"usingComponents\": {} }, \"pages/authorize/authorize\": { \"usingComponents\": {} } }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"易建联\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"backgroundColor\": \"#F8F8F8\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!********************************************************************************!*\
  !*** /Users/shiguangpeng/Documents/Work/yijianlian/pages.json?{"type":"stat"} ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__985D8B7\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX185ODVEOEI3XCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);